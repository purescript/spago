// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Data_Bifunctor from "../Data.Bifunctor/index.js";
import * as Data_Codec from "../Data.Codec/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Codec_Argonaut_Record from "../Data.Codec.Argonaut.Record/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Profunctor from "../Data.Profunctor/index.js";
import * as Registry_Internal_Codec from "../Registry.Internal.Codec/index.js";
import * as Registry_Internal_Parsing from "../Registry.Internal.Parsing/index.js";
var eq = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Maybe.eqMaybe(Data_Eq.eqString));
var dimap = /* #__PURE__ */ Data_Profunctor.dimap(/* #__PURE__ */ Data_Codec.profunctorCodec(Data_Either.functorEither));
var object = /* #__PURE__ */ Data_Codec_Argonaut_Record.object();
var rowListCodecCons = /* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecConsOptional(Data_Codec_Argonaut_Record.rowListCodecNil)()()({
    reflectSymbol: function () {
        return "subdir";
    }
}))()();
var alt = /* #__PURE__ */ Control_Alt.alt(Data_Either.altEither);
var lmap = /* #__PURE__ */ Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither);
var map = /* #__PURE__ */ Data_Functor.map(Data_Either.functorEither);
var Git = /* #__PURE__ */ (function () {
    function Git(value0) {
        this.value0 = value0;
    };
    Git.create = function (value0) {
        return new Git(value0);
    };
    return Git;
})();
var GitHub = /* #__PURE__ */ (function () {
    function GitHub(value0) {
        this.value0 = value0;
    };
    GitHub.create = function (value0) {
        return new GitHub(value0);
    };
    return GitHub;
})();
var eqLocation = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Git && y instanceof Git) {
                return eq(x.value0.subdir)(y.value0.subdir) && x.value0.url === y.value0.url;
            };
            if (x instanceof GitHub && y instanceof GitHub) {
                return x.value0.owner === y.value0.owner && x.value0.repo === y.value0.repo && eq(x.value0.subdir)(y.value0.subdir);
            };
            return false;
        };
    }
};
var githubCodec = /* #__PURE__ */ (function () {
    var toJsonRep = function (v) {
        return {
            githubOwner: v.owner,
            githubRepo: v.repo,
            subdir: v.subdir
        };
    };
    var fromJsonRep = function (v) {
        return {
            owner: v.githubOwner,
            repo: v.githubRepo,
            subdir: v.subdir
        };
    };
    return dimap(toJsonRep)(fromJsonRep)(object(Data_Codec_Argonaut_Record.rowListCodecCons(rowListCodecCons({
        reflectSymbol: function () {
            return "githubRepo";
        }
    }))()()({
        reflectSymbol: function () {
            return "githubOwner";
        }
    }))("GitHub")({
        githubOwner: Data_Codec_Argonaut.string,
        githubRepo: Data_Codec_Argonaut.string,
        subdir: Data_Codec_Argonaut_Record.optional(Data_Codec_Argonaut.string)
    }));
})();
var gitCodec = /* #__PURE__ */ (function () {
    var toJsonRep = function (v) {
        return {
            gitUrl: v.url,
            subdir: v.subdir
        };
    };
    var fromJsonRep = function (v) {
        return {
            url: v.gitUrl,
            subdir: v.subdir
        };
    };
    return dimap(toJsonRep)(fromJsonRep)(object(rowListCodecCons({
        reflectSymbol: function () {
            return "gitUrl";
        }
    }))("Git")({
        gitUrl: Registry_Internal_Codec.parsedString("GitUrl")(Registry_Internal_Parsing.gitUrl),
        subdir: Data_Codec_Argonaut_Record.optional(Data_Codec_Argonaut.string)
    }));
})();
var codec = /* #__PURE__ */ (function () {
    var encode = function (v) {
        if (v instanceof Git) {
            return Data_Codec.encode(gitCodec)(v.value0);
        };
        if (v instanceof GitHub) {
            return Data_Codec.encode(githubCodec)(v.value0);
        };
        throw new Error("Failed pattern match at Registry.Location (line 45, column 12 - line 47, column 50): " + [ v.constructor.name ]);
    };
    var decode = function (json) {
        return alt(lmap(Data_Function["const"](new Data_Codec_Argonaut.TypeMismatch("Location")))(map(Git.create)(Data_Codec.decode(gitCodec)(json))))(map(GitHub.create)(Data_Codec.decode(githubCodec)(json)));
    };
    return Data_Codec["codec$prime"](decode)(encode);
})();
export {
    Git,
    GitHub,
    codec,
    eqLocation
};
//# sourceMappingURL=index.js.map
