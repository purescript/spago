// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Argonaut_Parser from "../Data.Argonaut.Parser/index.js";
import * as Data_Bifunctor from "../Data.Bifunctor/index.js";
import * as Data_Codec from "../Data.Codec/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Codec_Argonaut_Compat from "../Data.Codec.Argonaut.Compat/index.js";
import * as Data_Codec_Argonaut_Record from "../Data.Codec.Argonaut.Record/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Registry_Internal_Codec from "../Registry.Internal.Codec/index.js";
import * as Registry_Location from "../Registry.Location/index.js";
import * as Registry_PackageName from "../Registry.PackageName/index.js";
import * as Registry_SSH from "../Registry.SSH/index.js";
import * as Registry_Version from "../Registry.Version/index.js";
var eqMaybe = /* #__PURE__ */ Data_Maybe.eqMaybe(Registry_Version.eqVersion);
var eq = /* #__PURE__ */ Data_Eq.eq(eqMaybe);
var eqMap = /* #__PURE__ */ Data_Map_Internal.eqMap(Registry_PackageName.eqPackageName);
var eq1 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ eqMap(eqMaybe));
var eq2 = /* #__PURE__ */ Data_Eq.eq(Registry_PackageName.eqPackageName);
var eq4 = /* #__PURE__ */ Data_Eq.eq(Registry_Version.eqVersion);
var eq5 = /* #__PURE__ */ Data_Eq.eq(Registry_Location.eqLocation);
var eq6 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Maybe.eqMaybe(Registry_Location.eqLocation));
var eq7 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Maybe.eqMaybe(/* #__PURE__ */ eqMap(Registry_Version.eqVersion)));
var eq8 = /* #__PURE__ */ Data_Eq.eq(Registry_SSH.eqSignature);
var object = /* #__PURE__ */ Data_Codec_Argonaut_Record.object();
var rowListCodecCons = /* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(Data_Codec_Argonaut_Record.rowListCodecNil)()();
var nameIsSymbol = {
    reflectSymbol: function () {
        return "name";
    }
};
var compilerIsSymbol = {
    reflectSymbol: function () {
        return "compiler";
    }
};
var alt = /* #__PURE__ */ Control_Alt.alt(Data_Either.altEither);
var lmap = /* #__PURE__ */ Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither);
var map = /* #__PURE__ */ Data_Functor.map(Data_Either.functorEither);
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Either.bindEither);
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupString);
var pure = /* #__PURE__ */ Control_Applicative.pure(Data_Either.applicativeEither);
var PackageSetUpdate = /* #__PURE__ */ (function () {
    function PackageSetUpdate(value0) {
        this.value0 = value0;
    };
    PackageSetUpdate.create = function (value0) {
        return new PackageSetUpdate(value0);
    };
    return PackageSetUpdate;
})();
var Unpublish = /* #__PURE__ */ (function () {
    function Unpublish(value0) {
        this.value0 = value0;
    };
    Unpublish.create = function (value0) {
        return new Unpublish(value0);
    };
    return Unpublish;
})();
var Transfer = /* #__PURE__ */ (function () {
    function Transfer(value0) {
        this.value0 = value0;
    };
    Transfer.create = function (value0) {
        return new Transfer(value0);
    };
    return Transfer;
})();
var Publish = /* #__PURE__ */ (function () {
    function Publish(value0) {
        this.value0 = value0;
    };
    Publish.create = function (value0) {
        return new Publish(value0);
    };
    return Publish;
})();
var Authenticated = /* #__PURE__ */ (function () {
    function Authenticated(value0) {
        this.value0 = value0;
    };
    Authenticated.create = function (value0) {
        return new Authenticated(value0);
    };
    return Authenticated;
})();
var eqPackageSetOperation = {
    eq: function (x) {
        return function (y) {
            return eq(x.value0.compiler)(y.value0.compiler) && eq1(x.value0.packages)(y.value0.packages);
        };
    }
};
var eqAuthenticatedPackageOpe = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Unpublish && y instanceof Unpublish) {
                return eq2(x.value0.name)(y.value0.name) && x.value0.reason === y.value0.reason && eq4(x.value0.version)(y.value0.version);
            };
            if (x instanceof Transfer && y instanceof Transfer) {
                return eq2(x.value0.name)(y.value0.name) && eq5(x.value0.newLocation)(y.value0.newLocation);
            };
            return false;
        };
    }
};
var eq9 = /* #__PURE__ */ Data_Eq.eq(eqAuthenticatedPackageOpe);
var eqPackageOperation = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Publish && y instanceof Publish) {
                return eq4(x.value0.compiler)(y.value0.compiler) && eq6(x.value0.location)(y.value0.location) && eq2(x.value0.name)(y.value0.name) && x.value0.ref === y.value0.ref && eq7(x.value0.resolutions)(y.value0.resolutions);
            };
            if (x instanceof Authenticated && y instanceof Authenticated) {
                return eq9(x.value0.payload)(y.value0.payload) && x.value0.rawPayload === y.value0.rawPayload && eq8(x.value0.signature)(y.value0.signature);
            };
            return false;
        };
    }
};
var unpublishCodec = /* #__PURE__ */ object(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ rowListCodecCons({
    reflectSymbol: function () {
        return "version";
    }
}))()()({
    reflectSymbol: function () {
        return "reason";
    }
}))()()(nameIsSymbol))("Unpublish")({
    name: Registry_PackageName.codec,
    version: Registry_Version.codec,
    reason: /* #__PURE__ */ Registry_Internal_Codec.limitedString(300)
});
var transferCodec = /* #__PURE__ */ object(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ rowListCodecCons({
    reflectSymbol: function () {
        return "newLocation";
    }
}))()()(nameIsSymbol))("Transfer")({
    name: Registry_PackageName.codec,
    newLocation: Registry_Location.codec
});
var publishCodec = /* #__PURE__ */ object(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecConsOptional(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecConsOptional(Data_Codec_Argonaut_Record.rowListCodecNil)()()({
    reflectSymbol: function () {
        return "resolutions";
    }
}))()()({
    reflectSymbol: function () {
        return "ref";
    }
}))()()(nameIsSymbol))()()({
    reflectSymbol: function () {
        return "location";
    }
}))()()(compilerIsSymbol))("Publish")({
    name: Registry_PackageName.codec,
    location: /* #__PURE__ */ Data_Codec_Argonaut_Record.optional(Registry_Location.codec),
    ref: Data_Codec_Argonaut.string,
    compiler: Registry_Version.codec,
    resolutions: /* #__PURE__ */ Data_Codec_Argonaut_Record.optional(/* #__PURE__ */ Registry_Internal_Codec.packageMap(Registry_Version.codec))
});
var packageSetUpdateCodec = /* #__PURE__ */ object(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecConsOptional(/* #__PURE__ */ rowListCodecCons({
    reflectSymbol: function () {
        return "packages";
    }
}))()()(compilerIsSymbol))("PackageSetUpdate")({
    compiler: /* #__PURE__ */ Data_Codec_Argonaut_Record.optional(Registry_Version.codec),
    packages: /* #__PURE__ */ Registry_Internal_Codec.packageMap(/* #__PURE__ */ Data_Codec_Argonaut_Compat.maybe(Registry_Version.codec))
});
var authenticatedCodec = /* #__PURE__ */ (function () {
    var payloadCodec = (function () {
        var encode = function (v) {
            if (v instanceof Unpublish) {
                return Data_Codec.encode(unpublishCodec)(v.value0);
            };
            if (v instanceof Transfer) {
                return Data_Codec.encode(transferCodec)(v.value0);
            };
            throw new Error("Failed pattern match at Registry.Operation (line 130, column 14 - line 132, column 60): " + [ v.constructor.name ]);
        };
        var decode = function (json) {
            return alt(lmap(Data_Function["const"](new Data_Codec_Argonaut.TypeMismatch("AuthenticatedPackageOperation")))(map(Unpublish.create)(Data_Codec.decode(unpublishCodec)(json))))(map(Transfer.create)(Data_Codec.decode(transferCodec)(json)));
        };
        return Data_Codec["codec$prime"](decode)(encode);
    })();
    var toPureScriptRep = function (codec) {
        var encode = function (v) {
            return Data_Codec.encode(codec)({
                payload: v.rawPayload,
                signature: v.signature
            });
        };
        var decode = function (json) {
            return bind(Data_Codec.decode(codec)(json))(function (rep) {
                return bind(lmap((function () {
                    var $131 = append("Json: ");
                    return function ($132) {
                        return Data_Codec_Argonaut.TypeMismatch.create($131($132));
                    };
                })())(Data_Argonaut_Parser.jsonParser(rep.payload)))(function (payloadJson) {
                    return bind(Data_Codec.decode(payloadCodec)(payloadJson))(function (operation) {
                        return pure({
                            payload: operation,
                            rawPayload: rep.payload,
                            signature: rep.signature
                        });
                    });
                });
            });
        };
        return Data_Codec["codec$prime"](decode)(encode);
    };
    return toPureScriptRep(object(Data_Codec_Argonaut_Record.rowListCodecCons(rowListCodecCons({
        reflectSymbol: function () {
            return "signature";
        }
    }))()()({
        reflectSymbol: function () {
            return "payload";
        }
    }))("Authenticated")({
        payload: Data_Codec_Argonaut.string,
        signature: Data_Codec_Argonaut.string
    }));
})();
export {
    Unpublish,
    Transfer,
    Publish,
    Authenticated,
    PackageSetUpdate,
    authenticatedCodec,
    packageSetUpdateCodec,
    publishCodec,
    transferCodec,
    unpublishCodec,
    eqPackageOperation,
    eqAuthenticatedPackageOpe,
    eqPackageSetOperation
};
//# sourceMappingURL=index.js.map
