// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Function_Uncurried from "../Data.Function.Uncurried/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Nullable from "../Data.Nullable/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
var map = /* #__PURE__ */ Data_Functor.map(Data_Either.functorEither);
var Signature = function (x) {
    return x;
};
var PrivateKey = function (x) {
    return x;
};
var PublicKey = function (x) {
    return x;
};
var newtypeSignature_ = {
    Coercible0: function () {
        return undefined;
    }
};
var eqSignature = Data_Eq.eqString;
var eqParsedKey = {
    eq: function (a) {
        return function (b) {
            return $foreign.equalsImpl(a, b);
        };
    }
};
var eq = /* #__PURE__ */ Data_Eq.eq(eqParsedKey);
var eqPrivateKey = {
    eq: function (x) {
        return function (y) {
            return eq(x)(y);
        };
    }
};
var eqPublicKey = {
    eq: function (x) {
        return function (y) {
            return eq(x)(y);
        };
    }
};
var verify = function (v) {
    return function (payload) {
        return function (signature) {
            return $foreign.verifyImpl(v, payload, signature);
        };
    };
};
var sign = function (v) {
    return Data_Function_Uncurried.runFn2($foreign.signImpl)(v);
};
var parse = function (buf) {
    return $foreign.parseKeyImpl(function ($41) {
        return Data_Either.Left.create(Effect_Exception.message($41));
    }, Data_Either.Right.create, buf, Data_Nullable["null"]);
};
var keyType = /* #__PURE__ */ Data_Function_Uncurried.runFn1($foreign.keyTypeImpl);
var isPrivateKey = /* #__PURE__ */ Data_Function_Uncurried.runFn1($foreign.isPrivateKeyImpl);
var parsePrivateKey = function (key) {
    var v = parse(key);
    if (v instanceof Data_Either.Right && !isPrivateKey(v.value0)) {
        return new Data_Either.Left("Expected private key, but this is a public key of type " + keyType(v.value0));
    };
    return map(PrivateKey)(v);
};
var parsePrivateKeyWithPassword = function (v) {
    var v1 = $foreign.parseKeyImpl(function ($42) {
        return Data_Either.Left.create(Effect_Exception.message($42));
    }, Data_Either.Right.create, v.key, Data_Nullable.notNull(v.passphrase));
    if (v1 instanceof Data_Either.Right && !isPrivateKey(v1.value0)) {
        return new Data_Either.Left("Expected private key, but this is a public key of type " + keyType(v1.value0));
    };
    return map(PrivateKey)(v1);
};
var parsePublicKey = function (key) {
    var v = parse(key);
    if (v instanceof Data_Either.Right && isPrivateKey(v.value0)) {
        return new Data_Either.Left("Expected public key, but this is a private key of type " + keyType(v.value0));
    };
    return map(PublicKey)(v);
};
export {
    Signature,
    parsePublicKey,
    parsePrivateKey,
    parsePrivateKeyWithPassword,
    sign,
    verify,
    eqPublicKey,
    eqPrivateKey,
    newtypeSignature_,
    eqSignature
};
//# sourceMappingURL=index.js.map
