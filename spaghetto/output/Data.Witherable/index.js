// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Data_Compactable from "../Data.Compactable/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Filterable from "../Data.Filterable/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
var toUnfoldable = /* #__PURE__ */ Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
var foldl = /* #__PURE__ */ Data_Foldable.foldl(Data_List_Types.foldableList);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var unwrap = /* #__PURE__ */ Data_Newtype.unwrap();
var witherableMaybe = {
    wilt: function (dictApplicative) {
        var pure = Control_Applicative.pure(dictApplicative);
        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
        return function (v) {
            return function (v1) {
                if (v1 instanceof Data_Maybe.Nothing) {
                    return pure({
                        left: Data_Maybe.Nothing.value,
                        right: Data_Maybe.Nothing.value
                    });
                };
                if (v1 instanceof Data_Maybe.Just) {
                    var convert = function (v2) {
                        if (v2 instanceof Data_Either.Left) {
                            return {
                                left: new Data_Maybe.Just(v2.value0),
                                right: Data_Maybe.Nothing.value
                            };
                        };
                        if (v2 instanceof Data_Either.Right) {
                            return {
                                left: Data_Maybe.Nothing.value,
                                right: new Data_Maybe.Just(v2.value0)
                            };
                        };
                        throw new Error("Failed pattern match at Data.Witherable (line 147, column 5 - line 147, column 56): " + [ v2.constructor.name ]);
                    };
                    return map(convert)(v(v1.value0));
                };
                throw new Error("Failed pattern match at Data.Witherable (line 144, column 1 - line 151, column 26): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
    },
    wither: function (dictApplicative) {
        var pure = Control_Applicative.pure(dictApplicative);
        return function (v) {
            return function (v1) {
                if (v1 instanceof Data_Maybe.Nothing) {
                    return pure(Data_Maybe.Nothing.value);
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return v(v1.value0);
                };
                throw new Error("Failed pattern match at Data.Witherable (line 144, column 1 - line 151, column 26): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
    },
    Filterable0: function () {
        return Data_Filterable.filterableMaybe;
    },
    Traversable1: function () {
        return Data_Traversable.traversableMaybe;
    }
};
var witherableMap = function (dictOrd) {
    var insert = Data_Map_Internal.insert(dictOrd);
    var filterableMap = Data_Filterable.filterableMap(dictOrd);
    return {
        wilt: function (dictApplicative) {
            var Apply0 = dictApplicative.Apply0();
            var apply = Control_Apply.apply(Apply0);
            var map = Data_Functor.map(Apply0.Functor0());
            var pure = Control_Applicative.pure(dictApplicative);
            return function (p) {
                var toList = function (dictOrd1) {
                    return toUnfoldable;
                };
                var go = function (acc) {
                    return function (v) {
                        return apply(map(function (v1) {
                            return function (v2) {
                                if (v2 instanceof Data_Either.Left) {
                                    return {
                                        left: insert(v.value0)(v2.value0)(v1.left),
                                        right: v1.right
                                    };
                                };
                                if (v2 instanceof Data_Either.Right) {
                                    return {
                                        left: v1.left,
                                        right: insert(v.value0)(v2.value0)(v1.right)
                                    };
                                };
                                throw new Error("Failed pattern match at Data.Witherable (line 128, column 9 - line 130, column 59): " + [ v2.constructor.name ]);
                            };
                        })(acc))(p(v.value1));
                    };
                };
                var $172 = foldl(go)(pure({
                    left: Data_Map_Internal.empty,
                    right: Data_Map_Internal.empty
                }));
                var $173 = toList(dictOrd);
                return function ($174) {
                    return $172($173($174));
                };
            };
        },
        wither: function (dictApplicative) {
            var Apply0 = dictApplicative.Apply0();
            var apply = Control_Apply.apply(Apply0);
            var map = Data_Functor.map(Apply0.Functor0());
            var pure = Control_Applicative.pure(dictApplicative);
            return function (p) {
                var toList = function (dictOrd1) {
                    return toUnfoldable;
                };
                var go = function (acc) {
                    return function (v) {
                        return apply(map(function (comp) {
                            return function (v1) {
                                if (v1 instanceof Data_Maybe.Nothing) {
                                    return comp;
                                };
                                if (v1 instanceof Data_Maybe.Just) {
                                    return insert(v.value0)(v1.value0)(comp);
                                };
                                throw new Error("Failed pattern match at Data.Witherable (line 139, column 9 - line 141, column 41): " + [ v1.constructor.name ]);
                            };
                        })(acc))(p(v.value1));
                    };
                };
                var $175 = foldl(go)(pure(Data_Map_Internal.empty));
                var $176 = toList(dictOrd);
                return function ($177) {
                    return $175($176($177));
                };
            };
        },
        Filterable0: function () {
            return filterableMap;
        },
        Traversable1: function () {
            return Data_Map_Internal.traversableMap;
        }
    };
};
var witherableList = {
    wilt: function (dictApplicative) {
        var Apply0 = dictApplicative.Apply0();
        var apply = Control_Apply.apply(Apply0);
        var map = Data_Functor.map(Apply0.Functor0());
        var pure = Control_Applicative.pure(dictApplicative);
        return function (p) {
            var rev = function (v) {
                return {
                    left: Data_List.reverse(v.left),
                    right: Data_List.reverse(v.right)
                };
            };
            var go = function (acc) {
                return function (x) {
                    return apply(map(function (v) {
                        return function (v1) {
                            if (v1 instanceof Data_Either.Left) {
                                return {
                                    left: new Data_List_Types.Cons(v1.value0, v.left),
                                    right: v.right
                                };
                            };
                            if (v1 instanceof Data_Either.Right) {
                                return {
                                    left: v.left,
                                    right: new Data_List_Types.Cons(v1.value0, v.right)
                                };
                            };
                            throw new Error("Failed pattern match at Data.Witherable (line 109, column 7 - line 111, column 46): " + [ v1.constructor.name ]);
                        };
                    })(acc))(p(x));
                };
            };
            var $178 = map(rev);
            var $179 = foldl(go)(pure({
                left: Data_List_Types.Nil.value,
                right: Data_List_Types.Nil.value
            }));
            return function ($180) {
                return $178($179($180));
            };
        };
    },
    wither: function (dictApplicative) {
        var Apply0 = dictApplicative.Apply0();
        var apply = Control_Apply.apply(Apply0);
        var map = Data_Functor.map(Apply0.Functor0());
        var pure = Control_Applicative.pure(dictApplicative);
        return function (p) {
            var go = function (acc) {
                return function (x) {
                    return apply(map(function (comp) {
                        return function (v) {
                            if (v instanceof Data_Maybe.Nothing) {
                                return comp;
                            };
                            if (v instanceof Data_Maybe.Just) {
                                return new Data_List_Types.Cons(v.value0, comp);
                            };
                            throw new Error("Failed pattern match at Data.Witherable (line 116, column 7 - line 118, column 28): " + [ v.constructor.name ]);
                        };
                    })(acc))(p(x));
                };
            };
            var $181 = map(Data_List.reverse);
            var $182 = foldl(go)(pure(Data_List_Types.Nil.value));
            return function ($183) {
                return $181($182($183));
            };
        };
    },
    Filterable0: function () {
        return Data_Filterable.filterableList;
    },
    Traversable1: function () {
        return Data_List_Types.traversableList;
    }
};
var witherableEither = function (dictMonoid) {
    var mempty = Data_Monoid.mempty(dictMonoid);
    var filterableEither = Data_Filterable.filterableEither(dictMonoid);
    return {
        wilt: function (dictApplicative) {
            var pure = Control_Applicative.pure(dictApplicative);
            var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
            return function (v) {
                return function (v1) {
                    if (v1 instanceof Data_Either.Left) {
                        return pure({
                            left: new Data_Either.Left(v1.value0),
                            right: new Data_Either.Left(v1.value0)
                        });
                    };
                    if (v1 instanceof Data_Either.Right) {
                        var convert = function (v2) {
                            if (v2 instanceof Data_Either.Left) {
                                return {
                                    left: new Data_Either.Right(v2.value0),
                                    right: new Data_Either.Left(mempty)
                                };
                            };
                            if (v2 instanceof Data_Either.Right) {
                                return {
                                    left: new Data_Either.Left(mempty),
                                    right: new Data_Either.Right(v2.value0)
                                };
                            };
                            throw new Error("Failed pattern match at Data.Witherable (line 156, column 5 - line 156, column 61): " + [ v2.constructor.name ]);
                        };
                        return map(convert)(v(v1.value0));
                    };
                    throw new Error("Failed pattern match at Data.Witherable (line 153, column 1 - line 162, column 31): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
        },
        wither: function (dictApplicative) {
            var pure = Control_Applicative.pure(dictApplicative);
            var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
            return function (v) {
                return function (v1) {
                    if (v1 instanceof Data_Either.Left) {
                        return pure(new Data_Either.Left(v1.value0));
                    };
                    if (v1 instanceof Data_Either.Right) {
                        var convert = function (v2) {
                            if (v2 instanceof Data_Maybe.Nothing) {
                                return new Data_Either.Left(mempty);
                            };
                            if (v2 instanceof Data_Maybe.Just) {
                                return new Data_Either.Right(v2.value0);
                            };
                            throw new Error("Failed pattern match at Data.Witherable (line 161, column 5 - line 161, column 34): " + [ v2.constructor.name ]);
                        };
                        return map(convert)(v(v1.value0));
                    };
                    throw new Error("Failed pattern match at Data.Witherable (line 153, column 1 - line 162, column 31): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
        },
        Filterable0: function () {
            return filterableEither;
        },
        Traversable1: function () {
            return Data_Traversable.traversableEither;
        }
    };
};
var witherDefault = function (dictWitherable) {
    var compact = Data_Compactable.compact((dictWitherable.Filterable0()).Compactable0());
    var traverse = Data_Traversable.traverse(dictWitherable.Traversable1());
    return function (dictApplicative) {
        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
        var traverse1 = traverse(dictApplicative);
        return function (p) {
            var $184 = map(compact);
            var $185 = traverse1(p);
            return function ($186) {
                return $184($185($186));
            };
        };
    };
};
var wither = function (dict) {
    return dict.wither;
};
var withered = function (dictWitherable) {
    var wither1 = wither(dictWitherable);
    return function (dictApplicative) {
        return wither1(dictApplicative)(identity);
    };
};
var wiltDefault = function (dictWitherable) {
    var separate = Data_Compactable.separate((dictWitherable.Filterable0()).Compactable0());
    var traverse = Data_Traversable.traverse(dictWitherable.Traversable1());
    return function (dictApplicative) {
        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
        var traverse1 = traverse(dictApplicative);
        return function (p) {
            var $187 = map(separate);
            var $188 = traverse1(p);
            return function ($189) {
                return $187($188($189));
            };
        };
    };
};
var witherableArray = {
    wilt: function (dictApplicative) {
        return wiltDefault(witherableArray)(dictApplicative);
    },
    wither: function (dictApplicative) {
        return witherDefault(witherableArray)(dictApplicative);
    },
    Filterable0: function () {
        return Data_Filterable.filterableArray;
    },
    Traversable1: function () {
        return Data_Traversable.traversableArray;
    }
};
var wilt = function (dict) {
    return dict.wilt;
};
var wilted = function (dictWitherable) {
    var wilt1 = wilt(dictWitherable);
    return function (dictApplicative) {
        return wilt1(dictApplicative)(identity);
    };
};
var traverseByWither = function (dictWitherable) {
    var wither1 = wither(dictWitherable);
    return function (dictApplicative) {
        var wither2 = wither1(dictApplicative);
        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
        return function (f) {
            return wither2((function () {
                var $190 = map(Data_Maybe.Just.create);
                return function ($191) {
                    return $190(f($191));
                };
            })());
        };
    };
};
var partitionMapByWilt = function (dictWitherable) {
    var wilt1 = wilt(dictWitherable)(Data_Identity.applicativeIdentity);
    return function (p) {
        var $192 = wilt1(function ($194) {
            return Data_Identity.Identity(p($194));
        });
        return function ($193) {
            return unwrap($192($193));
        };
    };
};
var filterMapByWither = function (dictWitherable) {
    var wither1 = wither(dictWitherable)(Data_Identity.applicativeIdentity);
    return function (p) {
        var $195 = wither1(function ($197) {
            return Data_Identity.Identity(p($197));
        });
        return function ($196) {
            return unwrap($195($196));
        };
    };
};
export {
    wilt,
    wither,
    partitionMapByWilt,
    filterMapByWither,
    traverseByWither,
    wilted,
    withered,
    witherDefault,
    wiltDefault,
    witherableArray,
    witherableList,
    witherableMap,
    witherableMaybe,
    witherableEither
};
//# sourceMappingURL=index.js.map
