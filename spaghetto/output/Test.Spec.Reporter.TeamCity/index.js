// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_State_Class from "../Control.Monad.State.Class/index.js";
import * as Control_Monad_State_Trans from "../Control.Monad.State.Trans/index.js";
import * as Control_Monad_Writer_Trans from "../Control.Monad.Writer.Trans/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Regex from "../Data.String.Regex/index.js";
import * as Data_String_Regex_Flags from "../Data.String.Regex.Flags/index.js";
import * as Data_String_Regex_Unsafe from "../Data.String.Regex.Unsafe/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Test_Spec_Console from "../Test.Spec.Console/index.js";
import * as Test_Spec_Reporter_Base from "../Test.Spec.Reporter.Base/index.js";
import * as Test_Spec_Result from "../Test.Spec.Result/index.js";
import * as Test_Spec_Runner_Event from "../Test.Spec.Runner.Event/index.js";
import * as Test_Spec_Tree from "../Test.Spec.Tree/index.js";
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var intercalate = /* #__PURE__ */ Data_Array.intercalate(Data_Monoid.monoidString);
var mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(Data_Functor.functorArray);
var unwrap = /* #__PURE__ */ Data_Newtype.unwrap();
var mapFlipped1 = /* #__PURE__ */ Data_Functor.mapFlipped(Data_Maybe.functorMaybe);
var monadWriterT = /* #__PURE__ */ Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity);
var bindStateT = /* #__PURE__ */ Control_Monad_State_Trans.bindStateT(monadWriterT);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(bindStateT);
var functorStateT = /* #__PURE__ */ Control_Monad_State_Trans.functorStateT(/* #__PURE__ */ Control_Monad_Writer_Trans.functorWriterT(Data_Identity.functorIdentity));
var $$void = /* #__PURE__ */ Data_Functor["void"](functorStateT);
var monadStateStateT = /* #__PURE__ */ Control_Monad_State_Trans.monadStateStateT(monadWriterT);
var modify = /* #__PURE__ */ Control_Monad_State_Class.modify(monadStateStateT);
var ordArray = /* #__PURE__ */ Data_Ord.ordArray(Test_Spec_Tree.pathItemOrd);
var insert = /* #__PURE__ */ Data_Map_Internal.insert(ordArray);
var tellLn = /* #__PURE__ */ Test_Spec_Console.tellLn(/* #__PURE__ */ Control_Monad_State_Trans.monadWriterStateT(/* #__PURE__ */ Control_Monad_Writer_Trans.monadWriterWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)));
var bind = /* #__PURE__ */ Control_Bind.bind(bindStateT);
var mapFlipped2 = /* #__PURE__ */ Data_Functor.mapFlipped(functorStateT);
var get = /* #__PURE__ */ Control_Monad_State_Class.get(monadStateStateT);
var lookup = /* #__PURE__ */ Data_Map_Internal.lookup(ordArray);
var applicativeStateT = /* #__PURE__ */ Control_Monad_State_Trans.applicativeStateT(monadWriterT);
var for_ = /* #__PURE__ */ Data_Foldable.for_(applicativeStateT)(Data_Foldable.foldableMaybe);
var show1 = /* #__PURE__ */ Data_Show.show(Effect_Exception.showError);
var pure = /* #__PURE__ */ Control_Applicative.pure(applicativeStateT);
var withMessage = function (message) {
    return function (v) {
        return {
            name: v.name,
            nodeId: v.nodeId,
            parentNodeId: v.parentNodeId,
            message: message
        };
    };
};
var withDuration = function (duration) {
    return function (v) {
        return {
            name: v.name,
            nodeId: v.nodeId,
            parentNodeId: v.parentNodeId,
            duration: duration
        };
    };
};
var testCount = function (count) {
    return "##teamcity[testCount count='" + (show(count) + "']");
};
var idFromPath = function (path) {
    return intercalate(",")(mapFlipped(mapFlipped(path)(unwrap))(function (v) {
        return show(v.index) + (":" + Data_Maybe.fromMaybe("")(v.name));
    }));
};
var serviceMessage = function (name) {
    return function (path) {
        var parentNodeId = mapFlipped1(mapFlipped1(Test_Spec_Tree.parentSuite(path))(function (v) {
            return v.path;
        }))(idFromPath);
        var nodeId = idFromPath(path);
        return {
            name: name,
            nodeId: nodeId,
            parentNodeId: parentNodeId
        };
    };
};
var $$escape = /* #__PURE__ */ Data_String_Regex["replace$prime"](/* #__PURE__ */ Data_String_Regex_Unsafe.unsafeRegex("(?:[|\x0a\x0d'\\[\\]])")(Data_String_Regex_Flags.global))(function (match) {
    return function (v) {
        if (match === "|") {
            return "||";
        };
        if (match === "\x0a") {
            return "|n";
        };
        if (match === "\x0d") {
            return "|r";
        };
        if (match === "[") {
            return "|[";
        };
        if (match === "]") {
            return "|]";
        };
        if (match === "'") {
            return "|'";
        };
        return "";
    };
});
var property = function (key) {
    return function (value) {
        return " " + (key + ("='" + ($$escape(value) + "'")));
    };
};
var teamcity$prime = function (rest) {
    return function (event) {
        return function (v) {
            return "##teamcity[" + (event + (property("name")(v.name) + (property("nodeId")(v.nodeId) + (property("parentNodeId")(Data_Maybe.fromMaybe("0")(v.parentNodeId)) + (rest + "]")))));
        };
    };
};
var teamcity = /* #__PURE__ */ teamcity$prime("");
var testFinished = /* #__PURE__ */ teamcity$prime("")("testFinished");
var testIgnored = /* #__PURE__ */ teamcity$prime("")("testIgnored");
var testStarted = /* #__PURE__ */ teamcity$prime("")("testStarted");
var testSuiteFinished = /* #__PURE__ */ teamcity$prime("")("testSuiteFinished");
var testSuiteStarted = /* #__PURE__ */ teamcity$prime("")("testSuiteStarted");
var testFailed = function (d) {
    return teamcity$prime(property("message")(d.message))("testFailed")(d);
};
var testFinishedIn = function (d) {
    return teamcity$prime(property("duration")(show(Data_Int.trunc(d.duration))))("testFinished")(d);
};
var teamcityReporter = /* #__PURE__ */ Test_Spec_Reporter_Base.defaultReporter(Data_Map_Internal.empty)(function (v) {
    if (v instanceof Test_Spec_Runner_Event.Suite) {
        return discard($$void(modify(insert(v.value1)(v.value2))))(function () {
            return tellLn(testSuiteStarted(serviceMessage(v.value2)(v.value1)));
        });
    };
    if (v instanceof Test_Spec_Runner_Event.SuiteEnd) {
        return bind(mapFlipped2(get)(lookup(v.value0)))(function (maybeName) {
            return for_(maybeName)(function (name) {
                return tellLn(testSuiteFinished(serviceMessage(name)(v.value0)));
            });
        });
    };
    if (v instanceof Test_Spec_Runner_Event.Test) {
        return tellLn(testStarted(serviceMessage(v.value2)(v.value1)));
    };
    if (v instanceof Test_Spec_Runner_Event.Pending) {
        var attributes = serviceMessage(v.value1)(v.value0);
        return discard(tellLn(testStarted(attributes)))(function () {
            return discard(tellLn(testIgnored(attributes)))(function () {
                return tellLn(testFinished(attributes));
            });
        });
    };
    if (v instanceof Test_Spec_Runner_Event.TestEnd && v.value2 instanceof Test_Spec_Result.Success) {
        return tellLn(testFinishedIn(withDuration(v.value2.value1)(serviceMessage(v.value1)(v.value0))));
    };
    if (v instanceof Test_Spec_Runner_Event.TestEnd && v.value2 instanceof Test_Spec_Result.Failure) {
        var attributes = withMessage(show1(v.value2.value0))(serviceMessage(v.value1)(v.value0));
        return discard(tellLn(testFailed(attributes)))(function () {
            return tellLn(testFinished(attributes));
        });
    };
    if (v instanceof Test_Spec_Runner_Event.End) {
        return pure(Data_Unit.unit);
    };
    if (v instanceof Test_Spec_Runner_Event.Start) {
        return tellLn(testCount(v.value0));
    };
    throw new Error("Failed pattern match at Test.Spec.Reporter.TeamCity (line 112, column 46 - line 137, column 48): " + [ v.constructor.name ]);
});
export {
    teamcityReporter,
    teamcity
};
//# sourceMappingURL=index.js.map
