// Generated by purs version 0.15.10
import * as Ansi_Codes from "../Ansi.Codes/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Dodo from "../Dodo/index.js";
import * as Dodo_Ansi from "../Dodo.Ansi/index.js";
import * as Dodo_Box from "../Dodo.Box/index.js";
import * as Dodo_Internal from "../Dodo.Internal/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Class_Console from "../Effect.Class.Console/index.js";
import * as Node_Process from "../Node.Process/index.js";
import * as Registry_PackageName from "../Registry.PackageName/index.js";
import * as Spago_Json from "../Spago.Json/index.js";
var lines = /* #__PURE__ */ Dodo.lines(Data_Foldable.foldableArray);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var max = /* #__PURE__ */ Data_Ord.max(Data_Ord.ordInt);
var horizontal = /* #__PURE__ */ Dodo_Box.horizontal(Data_Foldable.foldableArray);
var vertical = /* #__PURE__ */ Dodo_Box.vertical(Data_Foldable.foldableArray);
var append = /* #__PURE__ */ Data_Semigroup.append(Dodo_Internal.semigroupDoc);
var traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableArray);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var OutputJson = /* #__PURE__ */ (function () {
    function OutputJson(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    OutputJson.create = function (value0) {
        return function (value1) {
            return new OutputJson(value0, value1);
        };
    };
    return OutputJson;
})();
var OutputTable = /* #__PURE__ */ (function () {
    function OutputTable(value0) {
        this.value0 = value0;
    };
    OutputTable.create = function (value0) {
        return new OutputTable(value0);
    };
    return OutputTable;
})();
var OutputLines = /* #__PURE__ */ (function () {
    function OutputLines(value0) {
        this.value0 = value0;
    };
    OutputLines.create = function (value0) {
        return new OutputLines(value0);
    };
    return OutputLines;
})();
var LogQuiet = /* #__PURE__ */ (function () {
    function LogQuiet() {

    };
    LogQuiet.value = new LogQuiet();
    return LogQuiet;
})();
var LogNormal = /* #__PURE__ */ (function () {
    function LogNormal() {

    };
    LogNormal.value = new LogNormal();
    return LogNormal;
})();
var LogVerbose = /* #__PURE__ */ (function () {
    function LogVerbose() {

    };
    LogVerbose.value = new LogVerbose();
    return LogVerbose;
})();
var LogDebug = /* #__PURE__ */ (function () {
    function LogDebug() {

    };
    LogDebug.value = new LogDebug();
    return LogDebug;
})();
var LogInfo = /* #__PURE__ */ (function () {
    function LogInfo() {

    };
    LogInfo.value = new LogInfo();
    return LogInfo;
})();
var LogWarning = /* #__PURE__ */ (function () {
    function LogWarning() {

    };
    LogWarning.value = new LogWarning();
    return LogWarning;
})();
var LogError = /* #__PURE__ */ (function () {
    function LogError() {

    };
    LogError.value = new LogError();
    return LogError;
})();
var loggableString = {
    toDoc: Dodo.text
};
var loggableDocc = {
    toDoc: /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn)
};
var toDoc = function (dict) {
    return dict.toDoc;
};
var toDoc1 = /* #__PURE__ */ toDoc(loggableString);
var loggableArray = function (dictLoggable) {
    return {
        toDoc: (function () {
            var $114 = map(toDoc(dictLoggable));
            return function ($115) {
                return lines($114($115));
            };
        })()
    };
};
var loggablePackageName = {
    toDoc: function ($116) {
        return toDoc1(Registry_PackageName.print($116));
    }
};
var textBox = /* #__PURE__ */ (function () {
    var $117 = Dodo.print(Dodo_Box.docBox)(Dodo.twoSpaces);
    return function ($118) {
        return $117(Dodo.text($118));
    };
})();
var logTable = function (v) {
    var widths = Data_Array.mapWithIndex(function (ix) {
        return function (hd) {
            return Data_Array.foldr((function () {
                var $119 = Data_Maybe.fromMaybe(0);
                var $120 = map1(function ($123) {
                    return (function (v1) {
                        return v1.width;
                    })(Dodo_Box.sizeOf($123));
                });
                var $121 = Data_Function.flip(Data_Array.index)(ix);
                return function ($122) {
                    return max($119($120($121($122))));
                };
            })())((Dodo_Box.sizeOf(hd)).width)(v.rows);
        };
    })(v.headers);
    var joint = Dodo_Box.fill(Dodo.text("+"))({
        width: 1,
        height: 1
    });
    var rowSep = horizontal([ joint, horizontal(Data_Array.intersperse(joint)(map(function (width) {
        return Dodo_Box.fill(Dodo.text("-"))({
            width: width + 2 | 0,
            height: 1
        });
    })(widths))), joint ]);
    var columns = function (cols) {
        var height = Data_Array.foldr(function ($124) {
            return max((function (v1) {
                return v1.height;
            })(Dodo_Box.sizeOf($124)));
        })(0)(cols);
        var sep = Dodo_Box.fill(Dodo.text("|"))({
            width: 1,
            height: height
        });
        var colBoxes = Data_Array.mapWithIndex(function (ix) {
            return function (col) {
                return horizontal([ Dodo_Box.hpadding(1), Dodo_Box.resize({
                    width: Data_Maybe.fromMaybe(0)(Data_Array.index(widths)(ix)),
                    height: height
                })(col), Dodo_Box.hpadding(1) ]);
            };
        })(cols);
        return horizontal([ sep, horizontal(Data_Array.intersperse(sep)(colBoxes)), sep ]);
    };
    return vertical([ rowSep, vertical(Data_Array.cons(columns(v.headers))(Data_Array.cons(rowSep)(map(columns)(v.rows)))), rowSep ]);
};
var output = function (dictMonadEffect) {
    var log1 = Effect_Class_Console.log(dictMonadEffect);
    return function (format) {
        return log1((function () {
            if (format instanceof OutputJson) {
                return Spago_Json.printJson(format.value0)(format.value1);
            };
            if (format instanceof OutputLines) {
                return Data_String_Common.joinWith("\x0a")(format.value0);
            };
            if (format instanceof OutputTable) {
                return Dodo.print(Dodo.plainText)(Dodo.twoSpaces)(Dodo_Box.toDoc(logTable({
                    headers: map(textBox)(format.value0.titles),
                    rows: map(map(textBox))(format.value0.rows)
                })));
            };
            throw new Error("Failed pattern match at Spago.Log (line 140, column 29 - line 147, column 79): " + [ format.constructor.name ]);
        })());
    };
};
var log = function (dictMonadEffect) {
    var error = Effect_Class_Console.error(dictMonadEffect);
    return function (dictMonadAsk) {
        var Monad0 = dictMonadAsk.Monad0();
        var bind = Control_Bind.bind(Monad0.Bind1());
        var ask = Control_Monad_Reader_Class.ask(dictMonadAsk);
        var pure = Control_Applicative.pure(Monad0.Applicative0());
        return function (v) {
            return bind(ask)(function (v1) {
                var printFn = (function () {
                    if (v1.logOptions.color) {
                        return Dodo.print(Dodo_Ansi.ansiGraphics);
                    };
                    return Dodo.print(Dodo.plainText);
                })();
                if (v1.logOptions.verbosity instanceof LogQuiet) {
                    return pure(Data_Unit.unit);
                };
                if (v1.logOptions.verbosity instanceof LogNormal && v.level instanceof LogDebug) {
                    return pure(Data_Unit.unit);
                };
                return error(printFn({
                    pageWidth: 200,
                    ribbonRatio: Dodo.twoSpaces.ribbonRatio,
                    indentUnit: Dodo.twoSpaces.indentUnit,
                    indentWidth: Dodo.twoSpaces.indentWidth
                })(v.content));
            });
        };
    };
};
var logDebug = function (dictMonadEffect) {
    var log1 = log(dictMonadEffect);
    return function (dictMonadAsk) {
        var log2 = log1(dictMonadAsk);
        return function (dictLoggable) {
            var toDoc2 = toDoc(dictLoggable);
            return function (l) {
                return log2({
                    level: LogDebug.value,
                    content: Dodo_Ansi.foreground(Ansi_Codes.Blue.value)(toDoc2(l))
                });
            };
        };
    };
};
var logError = function (dictMonadEffect) {
    var log1 = log(dictMonadEffect);
    return function (dictMonadAsk) {
        var log2 = log1(dictMonadAsk);
        return function (dictLoggable) {
            var toDoc2 = toDoc(dictLoggable);
            return function (l) {
                return log2({
                    level: LogError.value,
                    content: Dodo_Ansi.foreground(Ansi_Codes.Red.value)(toDoc2(l))
                });
            };
        };
    };
};
var logFailure = function (dictMonadEffect) {
    var log1 = log(dictMonadEffect);
    return function (dictMonadAsk) {
        var log2 = log1(dictMonadAsk);
        return function (dictLoggable) {
            var toDoc2 = toDoc(dictLoggable);
            return function (l) {
                return log2({
                    level: LogInfo.value,
                    content: Dodo_Ansi.foreground(Ansi_Codes.Red.value)(append(Dodo["break"])(append(Dodo_Ansi.bold(append(toDoc1("\u274c"))(append(Dodo.space)(toDoc2(l)))))(Dodo["break"])))
                });
            };
        };
    };
};
var logInfo = function (dictMonadEffect) {
    var log1 = log(dictMonadEffect);
    return function (dictMonadAsk) {
        var log2 = log1(dictMonadAsk);
        return function (dictLoggable) {
            var toDoc2 = toDoc(dictLoggable);
            return function (l) {
                return log2({
                    level: LogInfo.value,
                    content: toDoc2(l)
                });
            };
        };
    };
};
var logSuccess = function (dictMonadEffect) {
    var log1 = log(dictMonadEffect);
    return function (dictMonadAsk) {
        var log2 = log1(dictMonadAsk);
        return function (dictLoggable) {
            var toDoc2 = toDoc(dictLoggable);
            return function (l) {
                return log2({
                    level: LogInfo.value,
                    content: Dodo_Ansi.foreground(Ansi_Codes.Green.value)(append(Dodo["break"])(append(Dodo_Ansi.bold(append(toDoc1("\u2705"))(append(Dodo.space)(toDoc2(l)))))(Dodo["break"])))
                });
            };
        };
    };
};
var logWarn = function (dictMonadEffect) {
    var log1 = log(dictMonadEffect);
    return function (dictMonadAsk) {
        var log2 = log1(dictMonadAsk);
        return function (dictLoggable) {
            var toDoc2 = toDoc(dictLoggable);
            return function (l) {
                return log2({
                    level: LogWarning.value,
                    content: Dodo_Ansi.foreground(Ansi_Codes.Yellow.value)(Dodo_Ansi.bold(append(toDoc1("\u26a0\ufe0f"))(append(Dodo.space)(toDoc2(l)))))
                });
            };
        };
    };
};
var indent2 = function ($125) {
    return Dodo.indent(Dodo.indent($125));
};
var die$prime = function (dictMonadEffect) {
    var logFailure1 = logFailure(dictMonadEffect);
    var liftEffect = Effect_Class.liftEffect(dictMonadEffect);
    return function (dictMonadAsk) {
        var Monad0 = dictMonadAsk.Monad0();
        var bind = Control_Bind.bind(Monad0.Bind1());
        var traverse1 = traverse(Monad0.Applicative0());
        var logFailure2 = logFailure1(dictMonadAsk);
        return function (dictLoggable) {
            var logFailure3 = logFailure2(dictLoggable);
            return function (msgs) {
                return bind(traverse1(logFailure3)(msgs))(function () {
                    return liftEffect(Node_Process.exit(1));
                });
            };
        };
    };
};
var die = function (dictMonadEffect) {
    var logFailure1 = logFailure(dictMonadEffect);
    var liftEffect = Effect_Class.liftEffect(dictMonadEffect);
    return function (dictMonadAsk) {
        var discard1 = discard((dictMonadAsk.Monad0()).Bind1());
        var logFailure2 = logFailure1(dictMonadAsk);
        return function (dictLoggable) {
            var logFailure3 = logFailure2(dictLoggable);
            return function (msg) {
                return discard1(logFailure3(msg))(function () {
                    return liftEffect(Node_Process.exit(1));
                });
            };
        };
    };
};
export {
    LogQuiet,
    LogNormal,
    LogVerbose,
    OutputJson,
    OutputTable,
    OutputLines,
    die,
    die$prime,
    indent2,
    logDebug,
    logError,
    logFailure,
    logInfo,
    logSuccess,
    logWarn,
    output,
    toDoc,
    loggableDocc,
    loggableString,
    loggablePackageName,
    loggableArray
};
export {
    break,
    indent
} from "../Dodo/index.js";
export {
    bold
} from "../Dodo.Ansi/index.js";
//# sourceMappingURL=index.js.map
