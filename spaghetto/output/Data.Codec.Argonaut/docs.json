{"comments":null,"declarations":[{"children":[],"comments":"Codec type for `Json` values.\n","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec"],"Codec'"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonDecodeError"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[61,60],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[61,1]},"title":"JsonCodec"},{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"declType":"dataConstructor"},"sourceSpan":{"end":[65,17],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[65,3]},"title":"TypeMismatch"},{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"declType":"dataConstructor"},"sourceSpan":{"end":[66,20],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[66,3]},"title":"UnexpectedValue"},{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonDecodeError"],"tag":"TypeConstructor"}],"declType":"dataConstructor"},"sourceSpan":{"end":[67,12],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[67,3]},"title":"AtIndex"},{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonDecodeError"],"tag":"TypeConstructor"}],"declType":"dataConstructor"},"sourceSpan":{"end":[68,10],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[68,3]},"title":"AtKey"},{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonDecodeError"],"tag":"TypeConstructor"}],"declType":"dataConstructor"},"sourceSpan":{"end":[69,10],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[69,3]},"title":"Named"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[70,17],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[70,3]},"title":"MissingValue"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Eq"],"Eq"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonDecodeError"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[72,55],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[72,1]},"title":"eqJsonDecodeError"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Ord"],"Ord"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonDecodeError"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[73,57],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[73,1]},"title":"ordJsonDecodeError"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Generic","Rep"],"Generic"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonDecodeError"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":null,"tag":"TypeWildcard"}],"tag":"TypeApp"}},"sourceSpan":{"end":[74,67],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[74,1]},"title":"genericJsonDecodeError"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Show"],"Show"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonDecodeError"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[83,34],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[76,1]},"title":"showJsonDecodeError"}],"comments":"Error type for failures while decoding.\n","info":{"dataDeclType":"data","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[70,17],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[64,1]},"title":"JsonDecodeError"},{"children":[],"comments":"Prints a `JsonDecodeError` as a somewhat readable error message.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonDecodeError"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[86,48],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[86,1]},"title":"printJsonDecodeError"},{"children":[],"comments":"The \"identity codec\" for `Json` values.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[99,24],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[99,1]},"title":"json"},{"children":[],"comments":"A codec for `null` values in `Json`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[103,22],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[103,1]},"title":"null"},{"children":[],"comments":"A codec for `Boolean` values in `Json`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[107,28],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[107,1]},"title":"boolean"},{"children":[],"comments":"A codec for `Number` values in `Json`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[111,26],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[111,1]},"title":"number"},{"children":[],"comments":"A codec for `Int` values in `Json`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[115,20],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[115,1]},"title":"int"},{"children":[],"comments":"A codec for `String` values in `Json`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[119,26],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[119,1]},"title":"string"},{"children":[],"comments":"A codec for `Codepoint` values in `Json`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[123,34],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[123,1]},"title":"codePoint"},{"children":[],"comments":"A codec for `Char` values in `Json`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Char"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[127,22],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[127,1]},"title":"char"},{"children":[],"comments":"A codec for `Array Json` values in `Json`. This does not decode the values\nof the array, for that use `array` for a general array decoder, or\n`indexedArray` with `index` to decode fixed length array encodings.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[137,34],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[137,1]},"title":"jarray"},{"children":[],"comments":"A codec for `JObject` values in `Json`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Foreign","Object"],"Object"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[141,39],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[141,1]},"title":"jobject"},{"children":[],"comments":"A codec for `Void` values.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Void"],"Void"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[131,22],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[131,1]},"title":"void"},{"children":[],"comments":"A codec for arbitrary length `Array`s where every item in the array\nshares the same type.\n\n``` purescript\nimport Data.Codec.Argonaut as CA\n\ncodecIntArray ∷ CA.JsonCodec (Array Int)\ncodecIntArray = CA.array CA.int\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[153,47],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[153,1]},"title":"array"},{"children":[],"comments":"Codec type for specifically indexed `JArray` elements.\n","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec"],"Codec"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonDecodeError"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","List","Types"],"List"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[166,6],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[160,1]},"title":"JIndexedCodec"},{"children":[],"comments":"A codec for types that are encoded as an array with a specific layout.\n\nFor example, if we'd like to encode a `Person` as a 2-element array, like\n`[\"Rashida\", 37]`, we could write the following codec:\n\n```purescript\nimport Data.Codec ((~))\nimport Data.Codec.Argonaut as CA\n\ntype Person = { name ∷ String, age ∷ Int }\n\ncodecPerson ∷ CA.JsonCodec Person\ncodecPerson = CA.indexedArray \"Test Object\" $\n  { name: _, age: _ }\n    <$> _.name ~ CA.index 0 CA.string\n    <*> _.age ~ CA.index 1 CA.int\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JIndexedCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[185,59],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[185,1]},"title":"indexedArray"},{"children":[],"comments":"A codec for an item in an `indexedArray`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JIndexedCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[192,49],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[192,1]},"title":"index"},{"children":[],"comments":"Codec type for `JObject` prop/value pairs.\n","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec"],"Codec"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonDecodeError"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Foreign","Object"],"Object"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","List","Types"],"List"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Tuple"],"Tuple"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[205,6],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[199,1]},"title":"JPropCodec"},{"children":[],"comments":"A codec for objects that are encoded with specific properties.\n\nSee also `Data.Codec.Argonaut.Record.object` for a more commonly useful\nversion of this function.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JPropCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[211,50],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[211,1]},"title":"object"},{"children":[],"comments":"A codec for a property of an object.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JPropCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[218,48],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[218,1]},"title":"prop"},{"children":[],"comments":"The starting value for a object-record codec. Used with `recordProp` it\nprovides a convenient method for defining codecs for record types that\nencode into JSON objects of the same shape.\n\nFor example, to encode a record as the JSON object\n`{ \"name\": \"Karl\", \"age\": 25 }` we would define a codec like this:\n```\nimport Data.Codec.Argonaut as CA\nimport Type.Proxy (Proxy(..))\n\ntype Person = { name ∷ String, age ∷ Int }\n\ncodecPerson ∷ CA.JsonCodec Person\ncodecPerson =\n  CA.object \"Person\" $ CA.record\n    # CA.recordProp (Proxy :: _ \"name\") CA.string\n    # CA.recordProp (Proxy :: _ \"age\") CA.int\n```\n\nSee also `Data.Codec.Argonaut.Record.object` for a more commonly useful\nversion of this function.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JPropCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"tag":"REmpty"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[245,23],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[245,1]},"title":"record"},{"children":[],"comments":"Used with `record` to define codecs for record types that encode into JSON\nobjects of the same shape. See the comment on `record` for an example.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"p","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"r","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"r'","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"p","tag":"TypeVar"}],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"p","tag":"TypeVar"},{"annotation":[],"contents":"a","tag":"TypeVar"},{"annotation":[],"contents":"r","tag":"TypeVar"},{"annotation":[],"contents":"r'","tag":"TypeVar"}],"constraintClass":[["Prim","Row"],"Cons"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Type","Proxy"],"Proxy"],"tag":"TypeConstructor"},{"annotation":[],"contents":"p","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JPropCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":"r","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JPropCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":"r'","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[257,27],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[250,1]},"title":"recordProp"},{"children":[],"comments":"Used with `record` to define an optional field.\n\nThis will only decode the property as `Nothing` if the field does not exist\nin the object - having a values such as `null` assigned will need handling\nseparately.\n\nThe property will be omitted when encoding and the value is `Nothing`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"p","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"r","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"r'","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"p","tag":"TypeVar"}],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"p","tag":"TypeVar"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"},{"annotation":[],"contents":"r","tag":"TypeVar"},{"annotation":[],"contents":"r'","tag":"TypeVar"}],"constraintClass":[["Prim","Row"],"Cons"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Type","Proxy"],"Proxy"],"tag":"TypeConstructor"},{"annotation":[],"contents":"p","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JPropCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":"r","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JPropCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":"r'","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[291,27],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[284,1]},"title":"recordPropOptional"},{"children":[],"comments":"Helper function for defining recursive codecs in situations where the codec\ndefinition causes a _\"The value of <codec> is undefined here\"_ error.\n\n```purescript\nimport Data.Codec.Argonaut as CA\nimport Data.Codec.Argonaut.Common as CAC\nimport Data.Codec.Argonaut.Record as CAR\nimport Data.Maybe (Maybe)\nimport Data.Newtype (class Newtype)\nimport Data.Profunctor (wrapIso)\n\nnewtype IntList = IntList { cell ∷ Int, rest ∷ Maybe IntList }\n\nderive instance newtypeLoopyList ∷ Newtype IntList _\n\ncodecIntList ∷ CA.JsonCodec IntList\ncodecIntList =\n  CA.fix \\codec →\n    wrapIso IntList $\n      CAR.object \"IntList\" { cell: CA.int, rest: CAC.maybe codec }\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[339,53],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[339,1]},"title":"fix"},{"children":[],"comments":"A codec for introducing names into error messages - useful when definiting a codec for a type\nsynonym for a record, for instance.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[347,48],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[347,1]},"title":"named"},{"children":[],"comments":"A codec for types that can be safely coerced.\n\nAccepts the name of the target type as an argument to improve error messaging when the inner\ncodec fails.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"b","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"constraintClass":[["Prim","Coerce"],"Coercible"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[357,70],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[357,1]},"title":"coercible"},{"children":[],"comments":"Adapts an existing codec with a pair of functions to allow a value to be\nfurther refined. If the inner decoder fails an `UnexpectedValue` error will\nbe raised for JSON input.\n\nThis function is named as such as the pair of functions it accepts\ncorrespond with the `preview` and `review` functions of a `Prism`-style lens.\n\nAn example of this would be a codec for `Data.String.NonEmpty.NonEmptyString`:\n\n```purescript\nnonEmptyString ∷ CA.JsonCodec NES.NonEmptyString\nnonEmptyString = CA.prismaticCodec \"NonEmptyString\" NES.fromString NES.toString CA.string\n```\n\nAnother example might be to handle a mapping from a small sum type to\nstrings:\n\n```purescript\ndata Direction = North | South | West | East\n\ndirectionCodec :: JsonCodec Direction\ndirectionCodec = CA.prismaticCodec \"Direction\" dec enc string\n  where\n    dec = case _ of\n      \"N\" -> Just North\n      \"S\" -> Just South\n      \"W\" -> Just West\n      \"E\" -> Just East\n      _ -> Nothing\n\n    enc = case _ of\n      North -> \"N\"\n      South -> \"S\"\n      West -> \"W\"\n      East -> \"E\"\n```\n\nAlthough for this latter case there are some other options too, in the form\nof `Data.Codec.Argonaut.Generic.nullarySum` and `Data.Codec.Argonaut.Sum.enumSum`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"b","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[402,85],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut.purs","start":[402,1]},"title":"prismaticCodec"}],"name":"Data.Codec.Argonaut","reExports":[]}