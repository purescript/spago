// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Nullable from "../Data.Nullable/index.js";
import * as Data_Number from "../Data.Number/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Node_Buffer from "../Node.Buffer/index.js";
import * as Node_Buffer_Class from "../Node.Buffer.Class/index.js";
import * as Node_Library_Execa_Utils from "../Node.Library.Execa.Utils/index.js";
import * as Node_Stream from "../Node.Stream/index.js";
var size = /* #__PURE__ */ Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect);
var concat$prime = /* #__PURE__ */ Node_Buffer_Class["concat$prime"](Node_Buffer.mutableBufferEffect);
var bind1 = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
var unsafeFreeze = /* #__PURE__ */ Node_Buffer_Class.unsafeFreeze(Node_Buffer.mutableBufferEffect);
var when = /* #__PURE__ */ Control_Applicative.when(Effect.applicativeEffect);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showNumber);
var getStreamBuffer = function (inputStream) {
    return function (initialOptions) {
        var bufferStream = function __do() {
            var chunksRef = Effect_Ref["new"]([  ])();
            var lengthRef = Effect_Ref["new"](0.0)();
            var stream = Node_Library_Execa_Utils.newPassThroughStream();
            Node_Stream.onData(stream)(function (buf) {
                return function __do() {
                    Effect_Ref.modify_(function (chunks) {
                        return Data_Array.snoc(chunks)(buf);
                    })(chunksRef)();
                    var bufLen = size(buf)();
                    return Effect_Ref.modify_(function (v) {
                        return v + Data_Int.toNumber(bufLen);
                    })(lengthRef)();
                };
            })();
            return {
                getBufferedValue: function __do() {
                    var chunks = Effect_Ref.read(chunksRef)();
                    var len = Effect_Ref.read(lengthRef)();
                    return concat$prime(chunks)(len)();
                },
                getBufferedLength: Effect_Ref.read(lengthRef),
                stream: stream
            };
        };
        var options = {
            maxBuffer: Data_Maybe.fromMaybe(Data_Number.infinity)(initialOptions.maxBuffer)
        };
        return bind1(liftEffect(bufferStream))(function ($$interface) {
            return Effect_Aff.makeAff(function (cb) {
                return function __do() {
                    $foreign.pipeline(inputStream, $$interface.stream, function (err) {
                        var bufferedData = $$interface.getBufferedValue();
                        var buff = unsafeFreeze(bufferedData)();
                        return cb(new Data_Either.Right({
                            buffer: buff,
                            inputError: Data_Nullable.toMaybe(err)
                        }))();
                    });
                    Node_Stream.onData($$interface.stream)(function (v) {
                        return function __do() {
                            var bufferedLen = $$interface.getBufferedLength();
                            return when(bufferedLen > options.maxBuffer)(function __do() {
                                var bufferedData = $$interface.getBufferedValue();
                                var buff = unsafeFreeze(bufferedData)();
                                return cb(new Data_Either.Right({
                                    buffer: buff,
                                    inputError: new Data_Maybe.Just(Effect_Exception.error(Data_Maybe.maybe("Max buffer exceeded")(function (size1) {
                                        return "Max buffer size exceeded. Buffer size was: " + show(size1);
                                    })(initialOptions.maxBuffer)))
                                }))();
                            })();
                        };
                    })();
                    return Effect_Aff.nonCanceler;
                };
            });
        });
    };
};
export {
    maxBufferLength,
    pipeline
} from "./foreign.js";
export {
    getStreamBuffer
};
//# sourceMappingURL=index.js.map
