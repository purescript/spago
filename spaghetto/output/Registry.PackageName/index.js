// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_NonEmpty from "../Data.Array.NonEmpty/index.js";
import * as Data_Bifunctor from "../Data.Bifunctor/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_String_CodePoints from "../Data.String.CodePoints/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_Combinators from "../Parsing.Combinators/index.js";
import * as Parsing_Combinators_Array from "../Parsing.Combinators.Array/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as Parsing_String_Basic from "../Parsing.String.Basic/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT);
var elem = /* #__PURE__ */ Data_Array.elem(Data_Eq.eqString);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(Parsing.bindParserT);
var when = /* #__PURE__ */ Control_Applicative.when(Parsing.applicativeParserT);
var alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);
var choice = /* #__PURE__ */ Parsing_Combinators.choice(Data_Foldable.foldableArray);
var pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);
var applySecond = /* #__PURE__ */ Control_Apply.applySecond(Parsing.applyParserT);
var map = /* #__PURE__ */ Data_Functor.map(Parsing.functorParserT);
var PackageName = function (x) {
    return x;
};
var ordPackageName = Data_Ord.ordString;
var eqPackageName = Data_Eq.eqString;
var stripPureScriptPrefix = function (pkg) {
    return Data_Maybe.fromMaybe(pkg)(Data_String_CodeUnits.stripPrefix("purescript-")(pkg));
};
var print = function (v) {
    return v;
};
var parser = /* #__PURE__ */ bind(Parsing.getParserT)(function (v) {
    var hasPureScriptPrefix = Data_Maybe.isJust(Data_String_CodeUnits.stripPrefix("purescript-")(v.value0));
    var allowedPrefixNames = [ "purescript-compiler-backend-utilities" ];
    var isBlessedPackage = elem(v.value0)(allowedPrefixNames);
    return discard(when(hasPureScriptPrefix && !isBlessedPackage)(Parsing.fail("Package names should not begin with 'purescript-'")))(function () {
        var acceptedChars = alt(choice([ Parsing_String_Basic.lower, Parsing_String_Basic.digit ]))(Parsing.fail("Package name can contain lower case chars, digits and non-consecutive dashes"));
        var chunk1 = Parsing_Combinators_Array.many1(acceptedChars);
        return bind(alt(chunk1)(Parsing.fail("Package name should start with a lower case char or a digit")))(function (firstChunk) {
            return bind(bind(Data_Function.flip(Parsing_Combinators_Array.manyTill_)(Parsing_String.eof)(bind(alt(Parsing_String["char"]("-"))(Parsing.fail("Package name can contain lower case chars, digits and non-consecutive dashes")))(function () {
                return bind(bind(Parsing_Combinators.optionMaybe(Parsing_Combinators.lookAhead(Parsing_String.anyChar)))(function (v1) {
                    if (v1 instanceof Data_Maybe.Just) {
                        if (v1.value0 === "-") {
                            return Parsing.fail("Package names cannot contain consecutive dashes");
                        };
                        if (Data_Boolean.otherwise) {
                            return pure(Data_Unit.unit);
                        };
                    };
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return applySecond(Parsing_Combinators.lookAhead(Parsing_String.eof))(Parsing.fail("Package name should end with a lower case char or digit"));
                    };
                    throw new Error("Failed pattern match at Registry.PackageName (line 102, column 103 - line 106, column 91): " + [ v1.constructor.name ]);
                }))(function () {
                    return alt(map(Data_Array_NonEmpty.cons("-"))(chunk1))(Parsing.fail("Package name should end with a lower case char or digit"));
                });
            })))(function (chunks) {
                return pure(Data_Tuple.fst(chunks));
            }))(function (nextChunks) {
                return discard(alt(Parsing_String.eof)(Parsing.fail("Package name can contain lower case chars, digits and non-consecutive dashes")))(function () {
                    var allChunks = Data_Array.concatMap(Data_Array_NonEmpty.toArray)(Data_Array.cons(firstChunk)(nextChunks));
                    var name = Data_String_CodeUnits.fromCharArray(allChunks);
                    var $25 = Data_String_Common["null"](name);
                    if ($25) {
                        return Parsing.fail("Package name cannot be empty");
                    };
                    var $26 = Data_String_CodePoints.length(name) > 50;
                    if ($26) {
                        return Parsing.fail("Package name cannot be longer than 50 characters");
                    };
                    return pure(name);
                });
            });
        });
    });
});
var parse = /* #__PURE__ */ (function () {
    var $30 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Parsing.parseErrorMessage);
    var $31 = Data_Function.flip(Parsing.runParser)(parser);
    return function ($32) {
        return $30($31($32));
    };
})();
var codec = /* #__PURE__ */ Data_Codec_Argonaut.prismaticCodec("PackageName")(function ($33) {
    return Data_Either.hush(parse($33));
})(print)(Data_Codec_Argonaut.string);
export {
    codec,
    parse,
    parser,
    print,
    stripPureScriptPrefix,
    eqPackageName,
    ordPackageName
};
//# sourceMappingURL=index.js.map
