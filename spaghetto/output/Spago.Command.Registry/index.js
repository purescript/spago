// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Map from "../Data.Map/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Dodo from "../Dodo/index.js";
import * as Node_Path from "../Node.Path/index.js";
import * as Registry_Metadata from "../Registry.Metadata/index.js";
import * as Registry_PackageName from "../Registry.PackageName/index.js";
import * as Registry_Version from "../Registry.Version/index.js";
import * as Spago_Core_Prelude from "../Spago.Core.Prelude/index.js";
import * as Spago_FS from "../Spago.FS/index.js";
import * as Spago_Log from "../Spago.Log/index.js";
import * as Spago_Paths from "../Spago.Paths/index.js";
import * as Spago_Prelude from "../Spago.Prelude/index.js";
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(Spago_Core_Prelude.bindSpago);
var logInfo = /* #__PURE__ */ Spago_Log.logInfo(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showString);
var bind = /* #__PURE__ */ Control_Bind.bind(Spago_Core_Prelude.bindSpago);
var ls = /* #__PURE__ */ Spago_FS.ls(Spago_Core_Prelude.monadAffSpago);
var logError = /* #__PURE__ */ Spago_Log.logError(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var output = /* #__PURE__ */ Spago_Log.output(Spago_Core_Prelude.monadEffectSpago);
var die = /* #__PURE__ */ Spago_Log.die(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago);
var die1 = /* #__PURE__ */ die(/* #__PURE__ */ Spago_Log.loggableArray(Spago_Log.loggableDocc));
var toDoc = /* #__PURE__ */ Spago_Log.toDoc(Spago_Log.loggableString);
var pure = /* #__PURE__ */ Control_Applicative.pure(Spago_Core_Prelude.applicativeSpago);
var ask = /* #__PURE__ */ Control_Monad_Reader_Class.ask(Spago_Core_Prelude.monadAskSpago);
var runSpago = /* #__PURE__ */ Spago_Core_Prelude.runSpago(Spago_Core_Prelude.monadAffSpago);
var logDebug = /* #__PURE__ */ Spago_Log.logDebug(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var die2 = /* #__PURE__ */ die(Spago_Log.loggableString);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var fromFoldable = /* #__PURE__ */ Data_Array.fromFoldable(Data_Set.foldableSet);
var lookup = /* #__PURE__ */ Data_Map_Internal.lookup(Registry_Version.ordVersion);
var search = function (searchString) {
    return discard(logInfo("Searching for " + (show(searchString) + " in the Registry package names...")))(function () {
        return bind(ls(Node_Path.concat([ Spago_Paths.registryPath, "metadata" ])))(function (metadataFiles) {
            var matches = Data_Array.filter(Data_String_CodeUnits.contains(searchString))(Data_Array.mapMaybe(Data_String_CodeUnits.stripSuffix(".json"))(metadataFiles));
            var $33 = Data_Array["null"](matches);
            if ($33) {
                return logError("Did not find any packages matching the search string.");
            };
            return discard(output(new Spago_Log.OutputLines(matches)))(function () {
                return logInfo("Use `spago registry info $package` to get more details on a package.");
            });
        });
    });
};
var info = function (args) {
    return bind((function () {
        var v = Registry_PackageName.parse(args["package"]);
        if (v instanceof Data_Either.Left) {
            return die1([ toDoc("Could not parse package name, error:"), Dodo.indent(toDoc(show(v.value0))) ]);
        };
        if (v instanceof Data_Either.Right) {
            return pure(v.value0);
        };
        throw new Error("Failed pattern match at Spago.Command.Registry (line 46, column 18 - line 48, column 28): " + [ v.constructor.name ]);
    })())(function (packageName) {
        return bind((function () {
            if (args.maybeVersion instanceof Data_Maybe.Nothing) {
                return pure(Data_Maybe.Nothing.value);
            };
            if (args.maybeVersion instanceof Data_Maybe.Just) {
                var v1 = Spago_Prelude.parseLenientVersion(args.maybeVersion.value0);
                if (v1 instanceof Data_Either.Left) {
                    return die1([ toDoc("Could not parse version, error:"), Dodo.indent(toDoc(show(v1.value0))) ]);
                };
                if (v1 instanceof Data_Either.Right) {
                    return pure(new Data_Maybe.Just(v1.value0));
                };
                throw new Error("Failed pattern match at Spago.Command.Registry (line 52, column 15 - line 54, column 43): " + [ v1.constructor.name ]);
            };
            throw new Error("Failed pattern match at Spago.Command.Registry (line 50, column 19 - line 54, column 43): " + [ args.maybeVersion.constructor.name ]);
        })())(function (maybeVersion) {
            return bind(ask)(function (v) {
                return bind(runSpago({
                    logOptions: v.logOptions
                })(v.getMetadata(packageName)))(function (v1) {
                    if (v1 instanceof Data_Either.Left) {
                        return discard(logDebug(v1.value0))(function () {
                            return die2("Could not find package " + Registry_PackageName.print(packageName));
                        });
                    };
                    if (v1 instanceof Data_Either.Right) {
                        if (maybeVersion instanceof Data_Maybe.Nothing) {
                            return discard(output(new Spago_Log.OutputLines(map(Registry_Version.print)(fromFoldable(Data_Map.keys(v1.value0.published))))))(function () {
                                return logInfo("Use `spago registry info " + (Registry_PackageName.print(packageName) + " $version` to get more details on a version."));
                            });
                        };
                        if (maybeVersion instanceof Data_Maybe.Just) {
                            var v2 = lookup(maybeVersion.value0)(v1.value0.published);
                            if (v2 instanceof Data_Maybe.Nothing) {
                                return die2("Version " + (Registry_Version.print(maybeVersion.value0) + (" does not exist for package " + Registry_PackageName.print(packageName))));
                            };
                            if (v2 instanceof Data_Maybe.Just) {
                                return output(new Spago_Log.OutputJson(Registry_Metadata.publishedMetadataCodec, v2.value0));
                            };
                            throw new Error("Failed pattern match at Spago.Command.Registry (line 65, column 23 - line 68, column 84): " + [ v2.constructor.name ]);
                        };
                        throw new Error("Failed pattern match at Spago.Command.Registry (line 61, column 34 - line 68, column 84): " + [ maybeVersion.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Spago.Command.Registry (line 57, column 57 - line 68, column 84): " + [ v1.constructor.name ]);
                });
            });
        });
    });
};
export {
    search,
    info
};
