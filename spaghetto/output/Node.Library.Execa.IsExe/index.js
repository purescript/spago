// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_String_CodePoints from "../Data.String.CodePoints/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Node_FS_Async from "../Node.FS.Async/index.js";
import * as Node_FS_Stats from "../Node.FS.Stats/index.js";
import * as Node_FS_Sync from "../Node.FS.Sync/index.js";
import * as Node_Platform from "../Node.Platform/index.js";
import * as Node_Process from "../Node.Process/index.js";
var alt = /* #__PURE__ */ Control_Alt.alt(Data_Maybe.altMaybe);
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect.applicativeEffect);
var eq = /* #__PURE__ */ Data_Eq.eq(Data_Eq.eqString);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var eq1 = /* #__PURE__ */ Data_Eq.eq(Data_Eq.eqInt);
var bind1 = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(Effect_Aff.applicativeAff);
var getUid = function () {
    return $foreign.getUidImpl(Data_Maybe.Nothing.value, Data_Maybe.Just.create);
};
var getGid = function () {
    return $foreign.getGidImpl(Data_Maybe.Nothing.value, Data_Maybe.Just.create);
};
var getErrorCode = function (e) {
    return e.code;
};
var defaultIsExeOptions = /* #__PURE__ */ (function () {
    return {
        pathExt: Data_Maybe.Nothing.value,
        uid: Data_Maybe.Nothing.value,
        gid: Data_Maybe.Nothing.value,
        ignoreErrors: false
    };
})();
var coreWindows = /* #__PURE__ */ (function () {
    var checkPathExt = function (path) {
        return function (options) {
            return function __do() {
                var mbPathExt = Node_Process.lookupEnv("PATHEXT")();
                var v = alt(options.pathExt)(mbPathExt);
                if (v instanceof Data_Maybe.Nothing) {
                    return true;
                };
                if (v instanceof Data_Maybe.Just) {
                    var pathLen = Data_String_CodePoints.length(path);
                    var pathExt = Data_String_Common.split(";")(v.value0);
                    var pathEndsInExt = Data_Maybe.isJust(Data_Array.find(function (p1) {
                        var p2 = Data_String_CodePoints.drop(pathLen - Data_String_CodePoints.length(p1) | 0)(path);
                        return Data_String_Common.toLower(p1) === Data_String_Common.toLower(p2);
                    })(pathExt));
                    var allElemsNonEmpty = Data_Maybe.isNothing(Data_Array.find(eq(""))(pathExt));
                    return allElemsNonEmpty || pathEndsInExt;
                };
                throw new Error("Failed pattern match at Node.Library.Execa.IsExe (line 102, column 5 - line 116, column 49): " + [ v.constructor.name ]);
            };
        };
    };
    var checkStat = function (stat) {
        return function (path) {
            return function (options) {
                var v = function (v1) {
                    if (Data_Boolean.otherwise) {
                        return checkPathExt(path)(options);
                    };
                    throw new Error("Failed pattern match at Node.Library.Execa.IsExe (line 89, column 1 - line 89, column 25): " + [ stat.constructor.name, path.constructor.name, options.constructor.name ]);
                };
                var $34 = !Node_FS_Stats.isSymbolicLink(stat);
                if ($34) {
                    var $35 = !Node_FS_Stats.isFile(stat);
                    if ($35) {
                        return pure(false);
                    };
                    return v(true);
                };
                return v(true);
            };
        };
    };
    var winIsExe = function (path) {
        return function (options) {
            return Effect_Aff.makeAff(function (cb) {
                return function __do() {
                    Node_FS_Async.stat(path)(function (v) {
                        if (v instanceof Data_Either.Left) {
                            return cb(new Data_Either.Right(new Data_Tuple.Tuple(new Data_Maybe.Just(v.value0), false)));
                        };
                        if (v instanceof Data_Either.Right) {
                            return function __do() {
                                var result = checkStat(v.value0)(path)(options)();
                                return cb(new Data_Either.Right(new Data_Tuple.Tuple(Data_Maybe.Nothing.value, result)))();
                            };
                        };
                        throw new Error("Failed pattern match at Node.Library.Execa.IsExe (line 120, column 23 - line 124, column 42): " + [ v.constructor.name ]);
                    })();
                    return Effect_Aff.nonCanceler;
                };
            });
        };
    };
    var winIsExeSync = function (path) {
        return function (options) {
            return function __do() {
                var statsObj = Node_FS_Sync.stat(path)();
                return checkStat(statsObj)(path)(options)();
            };
        };
    };
    return {
        isExe: winIsExe,
        isExeSync: winIsExeSync
    };
})();
var coreNonWindows = /* #__PURE__ */ (function () {
    var checkMode = function (v) {
        return function (options) {
            var uid = Data_Int.floor(v.value0.uid);
            var mode = Data_Int.floor(v.value0.mode);
            var gid = Data_Int.floor(v.value0.gid);
            return function __do() {
                var processMbUid = getUid();
                var processMbGid = getGid();
                var truthy = function (x) {
                    return x !== 0;
                };
                var myUid = alt(options.uid)(processMbUid);
                var myGid = alt(options.gid)(processMbGid);
                var ug = 64 | 8;
                return Data_Array.any(identity)([ truthy(mode & 1), truthy(mode & 8) && Data_Maybe.maybe(false)(eq1(gid))(myGid), truthy(mode & 64) && Data_Maybe.maybe(false)(eq1(uid))(myUid), truthy(mode & ug) && Data_Maybe.maybe(false)(eq1(0))(myUid) ]);
            };
        };
    };
    var checkStat = function (stat) {
        return function (options) {
            return function __do() {
                var b = checkMode(stat)(options)();
                return Node_FS_Stats.isFile(stat) && b;
            };
        };
    };
    var nonWinIsExe = function (path) {
        return function (options) {
            return Effect_Aff.makeAff(function (cb) {
                return function __do() {
                    Node_FS_Async.stat(path)(function (v) {
                        if (v instanceof Data_Either.Left) {
                            return cb(new Data_Either.Right(new Data_Tuple.Tuple(new Data_Maybe.Just(v.value0), false)));
                        };
                        if (v instanceof Data_Either.Right) {
                            return function __do() {
                                var b = checkStat(v.value0)(options)();
                                return cb(new Data_Either.Right(new Data_Tuple.Tuple(Data_Maybe.Nothing.value, b)))();
                            };
                        };
                        throw new Error("Failed pattern match at Node.Library.Execa.IsExe (line 138, column 23 - line 142, column 37): " + [ v.constructor.name ]);
                    })();
                    return Effect_Aff.nonCanceler;
                };
            });
        };
    };
    var nonWinIsExeSync = function (path) {
        return function (options) {
            return function __do() {
                var stats = Node_FS_Sync.stat(path)();
                return checkStat(stats)(options)();
            };
        };
    };
    return {
        isExe: nonWinIsExe,
        isExeSync: nonWinIsExeSync
    };
})();
var isExe = function (path) {
    return function (options) {
        var core = (function () {
            if (Node_Process.platform instanceof Data_Maybe.Just && Node_Process.platform.value0 instanceof Node_Platform.Win32) {
                return coreWindows;
            };
            return coreNonWindows;
        })();
        return bind1(core.isExe(path)(options))(function (original) {
            var v = Data_Tuple.fst(original);
            var v1 = function (v2) {
                return pure1(original);
            };
            if (v instanceof Data_Maybe.Just) {
                var $48 = getErrorCode(v.value0);
                if ($48 === "EACCES") {
                    if (options.ignoreErrors) {
                        return pure1(new Data_Tuple.Tuple(Data_Maybe.Nothing.value, false));
                    };
                    return v1(true);
                };
                return v1(true);
            };
            return v1(true);
        });
    };
};
var isExeSync = function (path) {
    return function (options) {
        var core = (function () {
            if (Node_Process.platform instanceof Data_Maybe.Just && Node_Process.platform.value0 instanceof Node_Platform.Win32) {
                return coreWindows;
            };
            return coreNonWindows;
        })();
        return function __do() {
            var mbEither = Effect_Exception["try"](core.isExeSync(path)(options))();
            var v = function (v1) {
                if (mbEither instanceof Data_Either.Left && Data_Boolean.otherwise) {
                    return pure(new Data_Either.Left(mbEither.value0));
                };
                if (mbEither instanceof Data_Either.Right) {
                    return pure(new Data_Either.Right(mbEither.value0));
                };
                throw new Error("Failed pattern match at Node.Library.Execa.IsExe (line 67, column 1 - line 67, column 69): " + [ mbEither.constructor.name ]);
            };
            if (mbEither instanceof Data_Either.Left) {
                if (options.ignoreErrors) {
                    var $58 = getErrorCode(mbEither.value0);
                    if ($58 === "EACCESS") {
                        return new Data_Either.Right(false);
                    };
                    return v(true)();
                };
                return v(true)();
            };
            return v(true)();
        };
    };
};
export {
    isExe,
    isExeSync,
    defaultIsExeOptions
};
//# sourceMappingURL=index.js.map
