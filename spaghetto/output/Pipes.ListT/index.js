// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Control_Monad_Except_Trans from "../Control.Monad.Except.Trans/index.js";
import * as Control_Monad_Maybe_Trans from "../Control.Monad.Maybe.Trans/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Control_Monad_State_Class from "../Control.Monad.State.Class/index.js";
import * as Control_Monad_Trans_Class from "../Control.Monad.Trans.Class/index.js";
import * as Control_Monad_Writer_Class from "../Control.Monad.Writer.Class/index.js";
import * as Control_Plus from "../Control.Plus/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Pipes from "../Pipes/index.js";
import * as Pipes_Core from "../Pipes.Core/index.js";
import * as Pipes_Internal from "../Pipes.Internal/index.js";
var lift = /* #__PURE__ */ Control_Monad_Trans_Class.lift(Pipes_Internal.monadTransProxy);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var Select = function (x) {
    return x;
};
var toListT = function (dict) {
    return dict.toListT;
};
var maybeTEnumerable = {
    toListT: function (dictMonad) {
        var bind = Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad));
        var lift2 = lift(dictMonad);
        var pure = Control_Applicative.pure(Pipes_Internal.applicativeProxy(dictMonad));
        var $$yield = Pipes["yield"](dictMonad);
        return function (m) {
            return bind(lift2(Control_Monad_Maybe_Trans.runMaybeT(m)))(function (x) {
                if (x instanceof Data_Maybe.Nothing) {
                    return pure(Data_Unit.unit);
                };
                if (x instanceof Data_Maybe.Just) {
                    return $$yield(x.value0);
                };
                throw new Error("Failed pattern match at Pipes.ListT (line 122, column 9 - line 124, column 31): " + [ x.constructor.name ]);
            });
        };
    }
};
var listTMonadTrans = {
    lift: function (dictMonad) {
        var bind = Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad));
        var lift2 = lift(dictMonad);
        var $$yield = Pipes["yield"](dictMonad);
        return function (m) {
            return bind(lift2(m))($$yield);
        };
    }
};
var lift1 = /* #__PURE__ */ Control_Monad_Trans_Class.lift(listTMonadTrans);
var listTFunctor = function (dictMonad) {
    var $$for = Pipes["for"](dictMonad);
    var $$yield = Pipes["yield"](dictMonad);
    return {
        map: function (f) {
            return function (v) {
                return $$for(v)(function ($194) {
                    return $$yield(f($194));
                });
            };
        }
    };
};
var listTEnumerable = {
    toListT: function (dictMonad) {
        return identity;
    }
};
var listTApply = function (dictMonad) {
    var $$for = Pipes["for"](dictMonad);
    var $$yield = Pipes["yield"](dictMonad);
    var listTFunctor1 = listTFunctor(dictMonad);
    return {
        apply: function (v) {
            return function (v1) {
                return $$for(v)(function (f) {
                    return $$for(v1)(function (x) {
                        return $$yield(f(x));
                    });
                });
            };
        },
        Functor0: function () {
            return listTFunctor1;
        }
    };
};
var listTApplicative = function (dictMonad) {
    var listTApply1 = listTApply(dictMonad);
    return {
        pure: (function () {
            var $195 = Pipes["yield"](dictMonad);
            return function ($196) {
                return Select($195($196));
            };
        })(),
        Apply0: function () {
            return listTApply1;
        }
    };
};
var listTAlt = function (dictMonad) {
    var applySecond = Control_Apply.applySecond(Pipes_Internal.applyProxy(dictMonad));
    var listTFunctor1 = listTFunctor(dictMonad);
    return {
        alt: function (v) {
            return function (v1) {
                return applySecond(v)(v1);
            };
        },
        Functor0: function () {
            return listTFunctor1;
        }
    };
};
var listTPlus = function (dictMonad) {
    var listTAlt1 = listTAlt(dictMonad);
    return {
        empty: Control_Applicative.pure(Pipes_Internal.applicativeProxy(dictMonad))(Data_Unit.unit),
        Alt0: function () {
            return listTAlt1;
        }
    };
};
var listTAlternative = function (dictMonad) {
    var listTApplicative1 = listTApplicative(dictMonad);
    var listTPlus1 = listTPlus(dictMonad);
    return {
        Applicative0: function () {
            return listTApplicative1;
        },
        Plus1: function () {
            return listTPlus1;
        }
    };
};
var listTSemigroup = function (dictMonad) {
    return {
        append: Control_Alt.alt(listTAlt(dictMonad))
    };
};
var listTMonoid = function (dictMonad) {
    var listTSemigroup1 = listTSemigroup(dictMonad);
    return {
        mempty: Control_Plus.empty(listTPlus(dictMonad)),
        Semigroup0: function () {
            return listTSemigroup1;
        }
    };
};
var errorTEnumerable = {
    toListT: function (dictMonad) {
        var bind = Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad));
        var lift2 = lift(dictMonad);
        var pure = Control_Applicative.pure(Pipes_Internal.applicativeProxy(dictMonad));
        var $$yield = Pipes["yield"](dictMonad);
        return function (m) {
            return bind(lift2(Control_Monad_Except_Trans.runExceptT(m)))(function (x) {
                if (x instanceof Data_Either.Left) {
                    return pure(Data_Unit.unit);
                };
                if (x instanceof Data_Either.Right) {
                    return $$yield(x.value0);
                };
                throw new Error("Failed pattern match at Pipes.ListT (line 129, column 9 - line 131, column 31): " + [ x.constructor.name ]);
            });
        };
    }
};
var enumerate = function (v) {
    return v;
};
var every = function (dictMonad) {
    var composeRequest = Pipes_Core.composeRequest(dictMonad);
    var discard = Pipes.discard(Pipes_Internal.monadProxy(dictMonad));
    return function (dictEnumerable) {
        var toListT1 = toListT(dictEnumerable)(dictMonad);
        return function (it) {
            return composeRequest(discard)(enumerate(toListT1(it)));
        };
    };
};
var listTBind = function (dictMonad) {
    var $$for = Pipes["for"](dictMonad);
    var listTApply1 = listTApply(dictMonad);
    return {
        bind: function (v) {
            return function (f) {
                return $$for(v)(function ($197) {
                    return enumerate(f($197));
                });
            };
        },
        Apply0: function () {
            return listTApply1;
        }
    };
};
var listTMonad = function (dictMonad) {
    var listTApplicative1 = listTApplicative(dictMonad);
    var listTBind1 = listTBind(dictMonad);
    return {
        Applicative0: function () {
            return listTApplicative1;
        },
        Bind1: function () {
            return listTBind1;
        }
    };
};
var listTMonadAsk = function (dictMonadAsk) {
    var Monad0 = dictMonadAsk.Monad0();
    var listTMonad1 = listTMonad(Monad0);
    return {
        ask: lift1(Monad0)(Control_Monad_Reader_Class.ask(dictMonadAsk)),
        Monad0: function () {
            return listTMonad1;
        }
    };
};
var listTMonadReader = function (dictMonadReader) {
    var local = Control_Monad_Reader_Class.local(Pipes_Internal.proxyMonadReader(dictMonadReader));
    var listTMonadAsk1 = listTMonadAsk(dictMonadReader.MonadAsk0());
    return {
        local: function (f) {
            return function (v) {
                return local(f)(v);
            };
        },
        MonadAsk0: function () {
            return listTMonadAsk1;
        }
    };
};
var listTMonadEffect = function (dictMonadEffect) {
    var Monad0 = dictMonadEffect.Monad0();
    var listTMonad1 = listTMonad(Monad0);
    return {
        liftEffect: (function () {
            var $198 = lift1(Monad0);
            var $199 = Effect_Class.liftEffect(dictMonadEffect);
            return function ($200) {
                return $198($199($200));
            };
        })(),
        Monad0: function () {
            return listTMonad1;
        }
    };
};
var listTMonadState = function (dictMonadState) {
    var Monad0 = dictMonadState.Monad0();
    var listTMonad1 = listTMonad(Monad0);
    return {
        state: (function () {
            var $201 = lift1(Monad0);
            var $202 = Control_Monad_State_Class.state(dictMonadState);
            return function ($203) {
                return $201($202($203));
            };
        })(),
        Monad0: function () {
            return listTMonad1;
        }
    };
};
var listTMonadTell = function (dictMonoid) {
    return function (dictMonadTell) {
        var Monad1 = dictMonadTell.Monad1();
        var Semigroup0 = dictMonadTell.Semigroup0();
        var listTMonad1 = listTMonad(Monad1);
        return {
            tell: (function () {
                var $204 = lift1(Monad1);
                var $205 = Control_Monad_Writer_Class.tell(dictMonadTell);
                return function ($206) {
                    return $204($205($206));
                };
            })(),
            Semigroup0: function () {
                return Semigroup0;
            },
            Monad1: function () {
                return listTMonad1;
            }
        };
    };
};
var listTMonadWriter = function (dictMonoid) {
    return function (dictMonadWriter) {
        var MonadTell1 = dictMonadWriter.MonadTell1();
        var Monad1 = MonadTell1.Monad1();
        var bind = Control_Bind.bind(Monad1.Bind1());
        var listen = Control_Monad_Writer_Class.listen(dictMonadWriter);
        var pure = Control_Applicative.pure(Monad1.Applicative0());
        var append = Data_Semigroup.append(MonadTell1.Semigroup0());
        var Monoid0 = dictMonadWriter.Monoid0();
        var mempty = Data_Monoid.mempty(Monoid0);
        var pass = Control_Monad_Writer_Class.pass(dictMonadWriter);
        var listTMonadTell1 = listTMonadTell(Monoid0)(MonadTell1);
        return {
            listen: function (v) {
                var go = function (v1) {
                    return function (v2) {
                        if (v1 instanceof Pipes_Internal.Request) {
                            return new Pipes_Internal.Request(v1.value0, function (a) {
                                return go(v1.value1(a))(v2);
                            });
                        };
                        if (v1 instanceof Pipes_Internal.Respond) {
                            return new Pipes_Internal.Respond(new Data_Tuple.Tuple(v1.value0, v2), function (b$prime) {
                                return go(v1.value1(b$prime))(v2);
                            });
                        };
                        if (v1 instanceof Pipes_Internal.M) {
                            return new Pipes_Internal.M(bind(listen(v1.value0))(function (v3) {
                                return pure(go(v3.value0)(append(v2)(v3.value1)));
                            }));
                        };
                        if (v1 instanceof Pipes_Internal.Pure) {
                            return new Pipes_Internal.Pure(v1.value0);
                        };
                        throw new Error("Failed pattern match at Pipes.ListT (line 84, column 9 - line 84, column 62): " + [ v1.constructor.name, v2.constructor.name ]);
                    };
                };
                return go(v)(mempty);
            },
            pass: function (v) {
                var go = function (v1) {
                    return function (v2) {
                        if (v1 instanceof Pipes_Internal.Request) {
                            return new Pipes_Internal.Request(v1.value0, function (a) {
                                return go(v1.value1(a))(v2);
                            });
                        };
                        if (v1 instanceof Pipes_Internal.Respond) {
                            var _2 = function (v3) {
                                return v1.value0.value1(v2);
                            };
                            var _1 = new Pipes_Internal.Respond(v1.value0.value0, function (b$prime) {
                                return go(v1.value1(b$prime))(v1.value0.value1(v2));
                            });
                            return new Pipes_Internal.M(pass(pure(new Data_Tuple.Tuple(_1, _2))));
                        };
                        if (v1 instanceof Pipes_Internal.M) {
                            return new Pipes_Internal.M(bind(listen(v1.value0))(function (v3) {
                                return pure(go(v3.value0)(append(v2)(v3.value1)));
                            }));
                        };
                        if (v1 instanceof Pipes_Internal.Pure) {
                            return new Pipes_Internal.Pure(v1.value0);
                        };
                        throw new Error("Failed pattern match at Pipes.ListT (line 93, column 9 - line 93, column 72): " + [ v1.constructor.name, v2.constructor.name ]);
                    };
                };
                return go(v)(mempty);
            },
            Monoid0: function () {
                return Monoid0;
            },
            MonadTell1: function () {
                return listTMonadTell1;
            }
        };
    };
};
var listTMonadThrow = function (dictMonadThrow) {
    var Monad0 = dictMonadThrow.Monad0();
    var listTMonad1 = listTMonad(Monad0);
    return {
        throwError: (function () {
            var $207 = lift1(Monad0);
            var $208 = Control_Monad_Error_Class.throwError(dictMonadThrow);
            return function ($209) {
                return $207($208($209));
            };
        })(),
        Monad0: function () {
            return listTMonad1;
        }
    };
};
var listTMonadError = function (dictMonadError) {
    var catchError = Control_Monad_Error_Class.catchError(Pipes_Internal.proxyMonadError(dictMonadError));
    var listTMonadThrow1 = listTMonadThrow(dictMonadError.MonadThrow0());
    return {
        catchError: function (v) {
            return function (f) {
                return catchError(v)(function ($210) {
                    return enumerate(f($210));
                });
            };
        },
        MonadThrow0: function () {
            return listTMonadThrow1;
        }
    };
};
var runListT = function (dictMonad) {
    var runEffect = Pipes_Core.runEffect(dictMonad);
    var applySecond = Control_Apply.applySecond(listTApply(dictMonad));
    var empty = Control_Plus.empty(listTPlus(dictMonad));
    return function (l) {
        return runEffect(enumerate(applySecond(l)(empty)));
    };
};
var runListTRec = function (dictMonadRec) {
    var runEffectRec = Pipes_Core.runEffectRec(dictMonadRec);
    var Monad0 = dictMonadRec.Monad0();
    var applySecond = Control_Apply.applySecond(listTApply(Monad0));
    var empty = Control_Plus.empty(listTPlus(Monad0));
    return function (l) {
        return runEffectRec(enumerate(applySecond(l)(empty)));
    };
};
export {
    toListT,
    Select,
    enumerate,
    runListT,
    runListTRec,
    every,
    listTFunctor,
    listTApply,
    listTApplicative,
    listTBind,
    listTMonad,
    listTMonadTrans,
    listTAlt,
    listTPlus,
    listTAlternative,
    listTMonadEffect,
    listTSemigroup,
    listTMonoid,
    listTMonadState,
    listTMonadTell,
    listTMonadWriter,
    listTMonadAsk,
    listTMonadReader,
    listTMonadThrow,
    listTMonadError,
    listTEnumerable,
    maybeTEnumerable,
    errorTEnumerable
};
//# sourceMappingURL=index.js.map
