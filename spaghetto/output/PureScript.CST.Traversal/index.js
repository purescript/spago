// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Monad_Free from "../Control.Monad.Free/index.js";
import * as Control_Monad_Reader_Trans from "../Control.Monad.Reader.Trans/index.js";
import * as Data_Array_NonEmpty_Internal from "../Data.Array.NonEmpty.Internal/index.js";
import * as Data_Bitraversable from "../Data.Bitraversable/index.js";
import * as Data_Const from "../Data.Const/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Functor_Compose from "../Data.Functor.Compose/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as PureScript_CST_Types from "../PureScript.CST.Types/index.js";
var traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableArray);
var traverse1 = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableTuple);
var traverse2 = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableMaybe);
var ltraverse = /* #__PURE__ */ Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple);
var traverse3 = /* #__PURE__ */ Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray);
var bitraverse = /* #__PURE__ */ Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple);
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Identity.bindIdentity);
var pure = /* #__PURE__ */ Control_Applicative.pure(Data_Identity.applicativeIdentity);
var applicativeReaderT = /* #__PURE__ */ Control_Monad_Reader_Trans.applicativeReaderT(Data_Identity.applicativeIdentity);
var bind1 = /* #__PURE__ */ Control_Bind.bind(Control_Monad_Free.freeBind);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(Control_Monad_Free.freeApplicative);
var un = /* #__PURE__ */ Data_Newtype.un();
var runFree = /* #__PURE__ */ Control_Monad_Free.runFree(Data_Identity.functorIdentity);
var applyCompose = /* #__PURE__ */ Data_Functor_Compose.applyCompose(Control_Monad_Free.freeApply);
var applicativeCompose = /* #__PURE__ */ Data_Functor_Compose.applicativeCompose(Control_Monad_Free.freeApplicative);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var bindFlipped = /* #__PURE__ */ Control_Bind.bindFlipped(Control_Monad_Free.freeBind);
var traverseWrapped = function (dictApplicative) {
    var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
    return function (k) {
        return function (v) {
            return map(function (value) {
                return {
                    open: v.open,
                    value: value,
                    close: v.close
                };
            })(k(v.value));
        };
    };
};
var traverseSeparated = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply = Control_Apply.apply(Apply0);
    var map = Data_Functor.map(Apply0.Functor0());
    var traverse4 = traverse(dictApplicative);
    var traverse5 = traverse1(dictApplicative);
    return function (k) {
        return function (v) {
            return apply(map(function (v1) {
                return function (v2) {
                    return {
                        head: v1,
                        tail: v2
                    };
                };
            })(k(v.head)))(traverse4(traverse5(k))(v.tail));
        };
    };
};
var traverseRecordUpdate = function (dictApplicative) {
    var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
    var traverseWrapped1 = traverseWrapped(dictApplicative);
    var traverseSeparated1 = traverseSeparated(dictApplicative);
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.RecordUpdateLeaf) {
                return map(PureScript_CST_Types.RecordUpdateLeaf.create(v.value0)(v.value1))(k.onExpr(v.value2));
            };
            if (v instanceof PureScript_CST_Types.RecordUpdateBranch) {
                return map(PureScript_CST_Types.RecordUpdateBranch.create(v.value0))(traverseWrapped1(traverseSeparated1(traverseRecordUpdate(dictApplicative)(k)))(v.value1));
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 409, column 26 - line 411, column 146): " + [ v.constructor.name ]);
        };
    };
};
var traverseRecordLabeled = function (dictApplicative) {
    var pure2 = Control_Applicative.pure(dictApplicative);
    var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.RecordPun) {
                return pure2(new PureScript_CST_Types.RecordPun(v.value0));
            };
            if (v instanceof PureScript_CST_Types.RecordField) {
                return map(PureScript_CST_Types.RecordField.create(v.value0)(v.value1))(k(v.value2));
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 384, column 27 - line 386, column 57): " + [ v.constructor.name ]);
        };
    };
};
var traverseRecordAccessor = function (dictApplicative) {
    var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
    return function (k) {
        return function (r) {
            return map(function (v) {
                return {
                    expr: v,
                    dot: r.dot,
                    path: r.path
                };
            })(k.onExpr(r.expr));
        };
    };
};
var traversePatternGuard = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply = Control_Apply.apply(Apply0);
    var map = Data_Functor.map(Apply0.Functor0());
    var traverse4 = traverse2(dictApplicative);
    var ltraverse1 = ltraverse(dictApplicative);
    return function (k) {
        return function (v) {
            return apply(map(function (binder) {
                return function (expr) {
                    return {
                        binder: binder,
                        expr: expr
                    };
                };
            })(traverse4(ltraverse1(k.onBinder))(v.binder)))(k.onExpr(v.expr));
        };
    };
};
var traverseModuleBody = function (dictApplicative) {
    var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
    var traverse4 = traverse(dictApplicative);
    return function (k) {
        return function (v) {
            return map(function (decls) {
                return {
                    decls: decls,
                    trailingComments: v.trailingComments,
                    end: v.end
                };
            })(traverse4(k.onDecl)(v.decls));
        };
    };
};
var traverseModule = function (dictApplicative) {
    var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
    var traverseModuleBody1 = traverseModuleBody(dictApplicative);
    return function (k) {
        return function (v) {
            return map(function (body) {
                return {
                    header: v.header,
                    body: body
                };
            })(traverseModuleBody1(k)(v.body));
        };
    };
};
var traverseModule1 = /* #__PURE__ */ traverseModule(Control_Monad_Free.freeApplicative);
var traverseLambda = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply = Control_Apply.apply(Apply0);
    var map = Data_Functor.map(Apply0.Functor0());
    var traverse4 = traverse3(dictApplicative);
    return function (k) {
        return function (l) {
            return apply(map(function (v) {
                return function (v1) {
                    return {
                        binders: v,
                        body: v1,
                        arrow: l.arrow,
                        symbol: l.symbol
                    };
                };
            })(traverse4(k.onBinder)(l.binders)))(k.onExpr(l.body));
        };
    };
};
var traverseLabeled = function (dictApplicative) {
    var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
    return function (k) {
        return function (v) {
            return map(function (value) {
                return {
                    label: v.label,
                    separator: v.separator,
                    value: value
                };
            })(k(v.value));
        };
    };
};
var traverseRow = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply = Control_Apply.apply(Apply0);
    var map = Data_Functor.map(Apply0.Functor0());
    var traverse4 = traverse2(dictApplicative);
    var traverseSeparated1 = traverseSeparated(dictApplicative);
    var traverseLabeled1 = traverseLabeled(dictApplicative);
    var traverse5 = traverse1(dictApplicative);
    return function (k) {
        return function (v) {
            return apply(map(function (labels) {
                return function (tail) {
                    return {
                        labels: labels,
                        tail: tail
                    };
                };
            })(traverse4(traverseSeparated1(traverseLabeled1(k.onType)))(v.labels)))(traverse4(traverse5(k.onType))(v.tail));
        };
    };
};
var traverseTypeVarBinding = function (dictApplicative) {
    var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
    var traverseWrapped1 = traverseWrapped(dictApplicative);
    var traverseLabeled1 = traverseLabeled(dictApplicative);
    var pure2 = Control_Applicative.pure(dictApplicative);
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.TypeVarKinded) {
                return map(PureScript_CST_Types.TypeVarKinded.create)(traverseWrapped1(traverseLabeled1(k.onType))(v.value0));
            };
            if (v instanceof PureScript_CST_Types.TypeVarName) {
                return pure2(new PureScript_CST_Types.TypeVarName(v.value0));
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 319, column 28 - line 321, column 46): " + [ v.constructor.name ]);
        };
    };
};
var traverseType = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var Functor0 = Apply0.Functor0();
    var map = Data_Functor.map(Functor0);
    var traverseWrapped1 = traverseWrapped(dictApplicative);
    var traverseRow1 = traverseRow(dictApplicative);
    var apply = Control_Apply.apply(Apply0);
    var flap = Data_Functor.flap(Functor0);
    var traverse4 = traverse3(dictApplicative);
    var traverseTypeVarBinding1 = traverseTypeVarBinding(dictApplicative);
    var traverse5 = traverse1(dictApplicative);
    var pure2 = Control_Applicative.pure(dictApplicative);
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.TypeRow) {
                return map(PureScript_CST_Types.TypeRow.create)(traverseWrapped1(traverseRow1(k))(v.value0));
            };
            if (v instanceof PureScript_CST_Types.TypeRecord) {
                return map(PureScript_CST_Types.TypeRecord.create)(traverseWrapped1(traverseRow1(k))(v.value0));
            };
            if (v instanceof PureScript_CST_Types.TypeForall) {
                return apply(flap(map(PureScript_CST_Types.TypeForall.create(v.value0))(traverse4(traverseTypeVarBinding1(k))(v.value1)))(v.value2))(k.onType(v.value3));
            };
            if (v instanceof PureScript_CST_Types.TypeKinded) {
                return apply(flap(map(PureScript_CST_Types.TypeKinded.create)(k.onType(v.value0)))(v.value1))(k.onType(v.value2));
            };
            if (v instanceof PureScript_CST_Types.TypeApp) {
                return apply(map(PureScript_CST_Types.TypeApp.create)(k.onType(v.value0)))(traverse4(k.onType)(v.value1));
            };
            if (v instanceof PureScript_CST_Types.TypeOp) {
                return apply(map(PureScript_CST_Types.TypeOp.create)(k.onType(v.value0)))(traverse4(traverse5(k.onType))(v.value1));
            };
            if (v instanceof PureScript_CST_Types.TypeArrow) {
                return apply(flap(map(PureScript_CST_Types.TypeArrow.create)(k.onType(v.value0)))(v.value1))(k.onType(v.value2));
            };
            if (v instanceof PureScript_CST_Types.TypeConstrained) {
                return apply(flap(map(PureScript_CST_Types.TypeConstrained.create)(k.onType(v.value0)))(v.value1))(k.onType(v.value2));
            };
            if (v instanceof PureScript_CST_Types.TypeParens) {
                return map(PureScript_CST_Types.TypeParens.create)(traverseWrapped1(k.onType)(v.value0));
            };
            return pure2(v);
        };
    };
};
var traverseType1 = /* #__PURE__ */ traverseType(applicativeReaderT);
var traverseType2 = /* #__PURE__ */ traverseType(Control_Monad_Free.freeApplicative);
var traverseIfThenElse = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply = Control_Apply.apply(Apply0);
    var map = Data_Functor.map(Apply0.Functor0());
    return function (k) {
        return function (r) {
            return apply(apply(map(function (v) {
                return function (v1) {
                    return function (v2) {
                        return {
                            cond: v,
                            "true": v1,
                            "false": v2,
                            "else": r["else"],
                            keyword: r.keyword,
                            then: r.then
                        };
                    };
                };
            })(k.onExpr(r.cond)))(k.onExpr(r["true"])))(k.onExpr(r["false"]));
        };
    };
};
var traverseWhere = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply = Control_Apply.apply(Apply0);
    var map = Data_Functor.map(Apply0.Functor0());
    var traverse4 = traverse2(dictApplicative);
    var traverse5 = traverse1(dictApplicative);
    var traverse6 = traverse3(dictApplicative);
    return function (k) {
        return function (v) {
            return apply(map(function (expr) {
                return function (bindings) {
                    return {
                        expr: expr,
                        bindings: bindings
                    };
                };
            })(k.onExpr(v.expr)))(traverse4(traverse5(traverse6(traverseLetBinding(dictApplicative)(k))))(v.bindings));
        };
    };
};
var traverseValueBindingFields = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply = Control_Apply.apply(Apply0);
    var map = Data_Functor.map(Apply0.Functor0());
    var traverse4 = traverse(dictApplicative);
    return function (k) {
        return function (v) {
            return apply(map(function (v1) {
                return function (v2) {
                    return {
                        binders: v1,
                        guarded: v2,
                        name: v.name
                    };
                };
            })(traverse4(k.onBinder)(v.binders)))(traverseGuarded(dictApplicative)(k)(v.guarded));
        };
    };
};
var traverseLetBinding = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var Functor0 = Apply0.Functor0();
    var map = Data_Functor.map(Functor0);
    var traverseLabeled1 = traverseLabeled(dictApplicative);
    var apply = Control_Apply.apply(Apply0);
    var flap = Data_Functor.flap(Functor0);
    var pure2 = Control_Applicative.pure(dictApplicative);
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.LetBindingSignature) {
                return map(PureScript_CST_Types.LetBindingSignature.create)(traverseLabeled1(k.onType)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.LetBindingName) {
                return map(PureScript_CST_Types.LetBindingName.create)(traverseValueBindingFields(dictApplicative)(k)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.LetBindingPattern) {
                return apply(flap(map(PureScript_CST_Types.LetBindingPattern.create)(k.onBinder(v.value0)))(v.value1))(traverseWhere(dictApplicative)(k)(v.value2));
            };
            if (v instanceof PureScript_CST_Types.LetBindingError) {
                return pure2(new PureScript_CST_Types.LetBindingError(v.value0));
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 488, column 24 - line 492, column 48): " + [ v.constructor.name ]);
        };
    };
};
var traverseGuardedExpr = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply = Control_Apply.apply(Apply0);
    var map = Data_Functor.map(Apply0.Functor0());
    var traverseSeparated1 = traverseSeparated(dictApplicative);
    var traversePatternGuard1 = traversePatternGuard(dictApplicative);
    return function (k) {
        return function (v) {
            return apply(map(function (ps) {
                return function (wh) {
                    return {
                        bar: v.bar,
                        patterns: ps,
                        separator: v.separator,
                        where: wh
                    };
                };
            })(traverseSeparated1(traversePatternGuard1(k))(v.patterns)))(traverseWhere(dictApplicative)(k)(v.where));
        };
    };
};
var traverseGuarded = function (dictApplicative) {
    var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
    var traverse4 = traverse3(dictApplicative);
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.Unconditional) {
                return map(PureScript_CST_Types.Unconditional.create(v.value0))(traverseWhere(dictApplicative)(k)(v.value1));
            };
            if (v instanceof PureScript_CST_Types.Guarded) {
                return map(PureScript_CST_Types.Guarded.create)(traverse4(traverseGuardedExpr(dictApplicative)(k))(v.value0));
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 449, column 21 - line 451, column 72): " + [ v.constructor.name ]);
        };
    };
};
var traverseInstanceBinding = function (dictApplicative) {
    var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
    var traverseLabeled1 = traverseLabeled(dictApplicative);
    var traverseValueBindingFields1 = traverseValueBindingFields(dictApplicative);
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.InstanceBindingSignature) {
                return map(PureScript_CST_Types.InstanceBindingSignature.create)(traverseLabeled1(k.onType)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.InstanceBindingName) {
                return map(PureScript_CST_Types.InstanceBindingName.create)(traverseValueBindingFields1(k)(v.value0));
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 246, column 29 - line 248, column 92): " + [ v.constructor.name ]);
        };
    };
};
var traverseLetIn = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply = Control_Apply.apply(Apply0);
    var map = Data_Functor.map(Apply0.Functor0());
    var traverse4 = traverse3(dictApplicative);
    var traverseLetBinding1 = traverseLetBinding(dictApplicative);
    return function (k) {
        return function (l) {
            return apply(map(function (v) {
                return function (v1) {
                    return {
                        bindings: v,
                        body: v1,
                        "in": l["in"],
                        keyword: l.keyword
                    };
                };
            })(traverse4(traverseLetBinding1(k))(l.bindings)))(k.onExpr(l.body));
        };
    };
};
var traverseForeign = function (dictApplicative) {
    var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
    var traverseLabeled1 = traverseLabeled(dictApplicative);
    var pure2 = Control_Applicative.pure(dictApplicative);
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.ForeignValue) {
                return map(PureScript_CST_Types.ForeignValue.create)(traverseLabeled1(k.onType)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ForeignData) {
                return map(PureScript_CST_Types.ForeignData.create(v.value0))(traverseLabeled1(k.onType)(v.value1));
            };
            if (v instanceof PureScript_CST_Types.ForeignKind) {
                return pure2(v);
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 216, column 21 - line 219, column 40): " + [ v.constructor.name ]);
        };
    };
};
var traverseDoStatement = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var Functor0 = Apply0.Functor0();
    var map = Data_Functor.map(Functor0);
    var traverse4 = traverse3(dictApplicative);
    var traverseLetBinding1 = traverseLetBinding(dictApplicative);
    var apply = Control_Apply.apply(Apply0);
    var flap = Data_Functor.flap(Functor0);
    var pure2 = Control_Applicative.pure(dictApplicative);
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.DoLet) {
                return map(PureScript_CST_Types.DoLet.create(v.value0))(traverse4(traverseLetBinding1(k))(v.value1));
            };
            if (v instanceof PureScript_CST_Types.DoDiscard) {
                return map(PureScript_CST_Types.DoDiscard.create)(k.onExpr(v.value0));
            };
            if (v instanceof PureScript_CST_Types.DoBind) {
                return apply(flap(map(PureScript_CST_Types.DoBind.create)(k.onBinder(v.value0)))(v.value1))(k.onExpr(v.value2));
            };
            if (v instanceof PureScript_CST_Types.DoError) {
                return pure2(new PureScript_CST_Types.DoError(v.value0));
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 519, column 25 - line 523, column 32): " + [ v.constructor.name ]);
        };
    };
};
var traverseDoBlock = function (dictApplicative) {
    var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
    var traverse4 = traverse3(dictApplicative);
    var traverseDoStatement1 = traverseDoStatement(dictApplicative);
    return function (k) {
        return function (d) {
            return map(function (v) {
                return {
                    statements: v,
                    keyword: d.keyword
                };
            })(traverse4(traverseDoStatement1(k))(d.statements));
        };
    };
};
var traverseDelimitedNonEmpty = function (dictApplicative) {
    var traverseWrapped1 = traverseWrapped(dictApplicative);
    var traverseSeparated1 = traverseSeparated(dictApplicative);
    return function (k) {
        return traverseWrapped1(traverseSeparated1(k));
    };
};
var traverseOneOrDelimited = function (dictApplicative) {
    var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
    var traverseDelimitedNonEmpty1 = traverseDelimitedNonEmpty(dictApplicative);
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.One) {
                return map(PureScript_CST_Types.One.create)(k(v.value0));
            };
            if (v instanceof PureScript_CST_Types.Many) {
                return map(PureScript_CST_Types.Many.create)(traverseDelimitedNonEmpty1(k)(v.value0));
            };
            throw new Error("Failed pattern match at PureScript.CST.Traversal (line 265, column 28 - line 267, column 55): " + [ v.constructor.name ]);
        };
    };
};
var traverseInstanceHead = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply = Control_Apply.apply(Apply0);
    var map = Data_Functor.map(Apply0.Functor0());
    var traverse4 = traverse2(dictApplicative);
    var ltraverse1 = ltraverse(dictApplicative);
    var traverseOneOrDelimited1 = traverseOneOrDelimited(dictApplicative);
    var traverse5 = traverse(dictApplicative);
    return function (k) {
        return function (head) {
            return apply(map(function (v) {
                return function (v1) {
                    return {
                        constraints: v,
                        types: v1,
                        className: head.className,
                        keyword: head.keyword,
                        name: head.name
                    };
                };
            })(traverse4(ltraverse1(traverseOneOrDelimited1(k.onType)))(head.constraints)))(traverse5(k.onType)(head.types));
        };
    };
};
var traverseInstance = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply = Control_Apply.apply(Apply0);
    var map = Data_Functor.map(Apply0.Functor0());
    var traverseInstanceHead1 = traverseInstanceHead(dictApplicative);
    var traverse4 = traverse2(dictApplicative);
    var traverse5 = traverse1(dictApplicative);
    var traverse6 = traverse3(dictApplicative);
    var traverseInstanceBinding1 = traverseInstanceBinding(dictApplicative);
    return function (k) {
        return function (v) {
            return apply(map(function (head) {
                return function (body) {
                    return {
                        head: head,
                        body: body
                    };
                };
            })(traverseInstanceHead1(k)(v.head)))(traverse4(traverse5(traverse6(traverseInstanceBinding1(k))))(v.body));
        };
    };
};
var traverseDelimited = function (dictApplicative) {
    var traverseWrapped1 = traverseWrapped(dictApplicative);
    var traverse4 = traverse2(dictApplicative);
    var traverseSeparated1 = traverseSeparated(dictApplicative);
    return function (k) {
        return traverseWrapped1(traverse4(traverseSeparated1(k)));
    };
};
var traverseDataHead = function (dictApplicative) {
    var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
    var traverse4 = traverse(dictApplicative);
    var traverseTypeVarBinding1 = traverseTypeVarBinding(dictApplicative);
    return function (k) {
        return function (head) {
            return map(function (v) {
                return {
                    vars: v,
                    keyword: head.keyword,
                    name: head.name
                };
            })(traverse4(traverseTypeVarBinding1(k))(head.vars));
        };
    };
};
var traverseDataCtor = function (dictApplicative) {
    var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
    var traverse4 = traverse(dictApplicative);
    return function (k) {
        return function (v) {
            return map(function (fields) {
                return {
                    name: v.name,
                    fields: fields
                };
            })(traverse4(k.onType)(v.fields));
        };
    };
};
var traverseClassHead = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply = Control_Apply.apply(Apply0);
    var map = Data_Functor.map(Apply0.Functor0());
    var traverse4 = traverse2(dictApplicative);
    var ltraverse1 = ltraverse(dictApplicative);
    var traverseOneOrDelimited1 = traverseOneOrDelimited(dictApplicative);
    var traverse5 = traverse(dictApplicative);
    var traverseTypeVarBinding1 = traverseTypeVarBinding(dictApplicative);
    return function (k) {
        return function (head) {
            return apply(map(function (v) {
                return function (v1) {
                    return {
                        "super": v,
                        vars: v1,
                        fundeps: head.fundeps,
                        keyword: head.keyword,
                        name: head.name
                    };
                };
            })(traverse4(ltraverse1(traverseOneOrDelimited1(k.onType)))(head["super"])))(traverse5(traverseTypeVarBinding1(k))(head.vars));
        };
    };
};
var traverseDecl = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply = Control_Apply.apply(Apply0);
    var Functor0 = Apply0.Functor0();
    var map = Data_Functor.map(Functor0);
    var traverseDataHead1 = traverseDataHead(dictApplicative);
    var traverse4 = traverse2(dictApplicative);
    var traverse5 = traverse1(dictApplicative);
    var traverseSeparated1 = traverseSeparated(dictApplicative);
    var traverseDataCtor1 = traverseDataCtor(dictApplicative);
    var flap = Data_Functor.flap(Functor0);
    var traverseClassHead1 = traverseClassHead(dictApplicative);
    var traverse6 = traverse3(dictApplicative);
    var traverseLabeled1 = traverseLabeled(dictApplicative);
    var traverseInstance1 = traverseInstance(dictApplicative);
    var traverseInstanceHead1 = traverseInstanceHead(dictApplicative);
    var traverseValueBindingFields1 = traverseValueBindingFields(dictApplicative);
    var traverseForeign1 = traverseForeign(dictApplicative);
    var pure2 = Control_Applicative.pure(dictApplicative);
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.DeclData) {
                return apply(map(PureScript_CST_Types.DeclData.create)(traverseDataHead1(k)(v.value0)))(traverse4(traverse5(traverseSeparated1(traverseDataCtor1(k))))(v.value1));
            };
            if (v instanceof PureScript_CST_Types.DeclType) {
                return apply(flap(map(PureScript_CST_Types.DeclType.create)(traverseDataHead1(k)(v.value0)))(v.value1))(k.onType(v.value2));
            };
            if (v instanceof PureScript_CST_Types.DeclNewtype) {
                return apply(flap(flap(map(PureScript_CST_Types.DeclNewtype.create)(traverseDataHead1(k)(v.value0)))(v.value1))(v.value2))(k.onType(v.value3));
            };
            if (v instanceof PureScript_CST_Types.DeclClass) {
                return apply(map(PureScript_CST_Types.DeclClass.create)(traverseClassHead1(k)(v.value0)))(traverse4(traverse5(traverse6(traverseLabeled1(k.onType))))(v.value1));
            };
            if (v instanceof PureScript_CST_Types.DeclInstanceChain) {
                return map(PureScript_CST_Types.DeclInstanceChain.create)(traverseSeparated1(traverseInstance1(k))(v.value0));
            };
            if (v instanceof PureScript_CST_Types.DeclDerive) {
                return map(PureScript_CST_Types.DeclDerive.create(v.value0)(v.value1))(traverseInstanceHead1(k)(v.value2));
            };
            if (v instanceof PureScript_CST_Types.DeclKindSignature) {
                return map(PureScript_CST_Types.DeclKindSignature.create(v.value0))(traverseLabeled1(k.onType)(v.value1));
            };
            if (v instanceof PureScript_CST_Types.DeclSignature) {
                return map(PureScript_CST_Types.DeclSignature.create)(traverseLabeled1(k.onType)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.DeclValue) {
                return map(PureScript_CST_Types.DeclValue.create)(traverseValueBindingFields1(k)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.DeclForeign) {
                return map(PureScript_CST_Types.DeclForeign.create(v.value0)(v.value1))(traverseForeign1(k)(v.value2));
            };
            return pure2(v);
        };
    };
};
var traverseDecl1 = /* #__PURE__ */ traverseDecl(applicativeReaderT);
var traverseDecl2 = /* #__PURE__ */ traverseDecl(Control_Monad_Free.freeApplicative);
var traverseCaseOf = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply = Control_Apply.apply(Apply0);
    var map = Data_Functor.map(Apply0.Functor0());
    var traverseSeparated1 = traverseSeparated(dictApplicative);
    var traverse4 = traverse3(dictApplicative);
    var bitraverse1 = bitraverse(dictApplicative);
    var traverseGuarded1 = traverseGuarded(dictApplicative);
    return function (k) {
        return function (r) {
            return apply(map(function (v) {
                return function (v1) {
                    return {
                        head: v,
                        branches: v1,
                        keyword: r.keyword,
                        of: r.of
                    };
                };
            })(traverseSeparated1(k.onExpr)(r.head)))(traverse4(bitraverse1(traverseSeparated1(k.onBinder))(traverseGuarded1(k)))(r.branches));
        };
    };
};
var traverseBinder = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var Functor0 = Apply0.Functor0();
    var map = Data_Functor.map(Functor0);
    var traverse4 = traverse(dictApplicative);
    var traverseDelimited1 = traverseDelimited(dictApplicative);
    var traverseRecordLabeled1 = traverseRecordLabeled(dictApplicative);
    var traverseWrapped1 = traverseWrapped(dictApplicative);
    var apply = Control_Apply.apply(Apply0);
    var flap = Data_Functor.flap(Functor0);
    var traverse5 = traverse3(dictApplicative);
    var traverse6 = traverse1(dictApplicative);
    var pure2 = Control_Applicative.pure(dictApplicative);
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.BinderNamed) {
                return map(PureScript_CST_Types.BinderNamed.create(v.value0)(v.value1))(k.onBinder(v.value2));
            };
            if (v instanceof PureScript_CST_Types.BinderConstructor) {
                return map(PureScript_CST_Types.BinderConstructor.create(v.value0))(traverse4(k.onBinder)(v.value1));
            };
            if (v instanceof PureScript_CST_Types.BinderArray) {
                return map(PureScript_CST_Types.BinderArray.create)(traverseDelimited1(k.onBinder)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.BinderRecord) {
                return map(PureScript_CST_Types.BinderRecord.create)(traverseDelimited1(traverseRecordLabeled1(k.onBinder))(v.value0));
            };
            if (v instanceof PureScript_CST_Types.BinderParens) {
                return map(PureScript_CST_Types.BinderParens.create)(traverseWrapped1(k.onBinder)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.BinderTyped) {
                return apply(flap(map(PureScript_CST_Types.BinderTyped.create)(k.onBinder(v.value0)))(v.value1))(k.onType(v.value2));
            };
            if (v instanceof PureScript_CST_Types.BinderOp) {
                return apply(map(PureScript_CST_Types.BinderOp.create)(k.onBinder(v.value0)))(traverse5(traverse6(k.onBinder))(v.value1));
            };
            return pure2(v);
        };
    };
};
var traverseBinder1 = /* #__PURE__ */ traverseBinder(applicativeReaderT);
var traverseBinder2 = /* #__PURE__ */ traverseBinder(Control_Monad_Free.freeApplicative);
var traverseAdoBlock = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply = Control_Apply.apply(Apply0);
    var map = Data_Functor.map(Apply0.Functor0());
    var traverse4 = traverse(dictApplicative);
    var traverseDoStatement1 = traverseDoStatement(dictApplicative);
    return function (k) {
        return function (a) {
            return apply(map(function (v) {
                return function (v1) {
                    return {
                        statements: v,
                        result: v1,
                        "in": a["in"],
                        keyword: a.keyword
                    };
                };
            })(traverse4(traverseDoStatement1(k))(a.statements)))(k.onExpr(a.result));
        };
    };
};
var traverseExpr = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var Functor0 = Apply0.Functor0();
    var map = Data_Functor.map(Functor0);
    var traverseDelimited1 = traverseDelimited(dictApplicative);
    var traverseRecordLabeled1 = traverseRecordLabeled(dictApplicative);
    var traverseWrapped1 = traverseWrapped(dictApplicative);
    var apply = Control_Apply.apply(Apply0);
    var flap = Data_Functor.flap(Functor0);
    var traverse4 = traverse3(dictApplicative);
    var bitraverse1 = bitraverse(dictApplicative);
    var traverse5 = traverse1(dictApplicative);
    var traverseRecordAccessor1 = traverseRecordAccessor(dictApplicative);
    var traverseSeparated1 = traverseSeparated(dictApplicative);
    var traverseRecordUpdate1 = traverseRecordUpdate(dictApplicative);
    var traverseLambda1 = traverseLambda(dictApplicative);
    var traverseIfThenElse1 = traverseIfThenElse(dictApplicative);
    var traverseCaseOf1 = traverseCaseOf(dictApplicative);
    var traverseLetIn1 = traverseLetIn(dictApplicative);
    var traverseDoBlock1 = traverseDoBlock(dictApplicative);
    var traverseAdoBlock1 = traverseAdoBlock(dictApplicative);
    var pure2 = Control_Applicative.pure(dictApplicative);
    return function (k) {
        return function (v) {
            if (v instanceof PureScript_CST_Types.ExprArray) {
                return map(PureScript_CST_Types.ExprArray.create)(traverseDelimited1(k.onExpr)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprRecord) {
                return map(PureScript_CST_Types.ExprRecord.create)(traverseDelimited1(traverseRecordLabeled1(k.onExpr))(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprParens) {
                return map(PureScript_CST_Types.ExprParens.create)(traverseWrapped1(k.onExpr)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprTyped) {
                return apply(flap(map(PureScript_CST_Types.ExprTyped.create)(k.onExpr(v.value0)))(v.value1))(k.onType(v.value2));
            };
            if (v instanceof PureScript_CST_Types.ExprInfix) {
                return apply(map(PureScript_CST_Types.ExprInfix.create)(k.onExpr(v.value0)))(traverse4(bitraverse1(traverseWrapped1(k.onExpr))(k.onExpr))(v.value1));
            };
            if (v instanceof PureScript_CST_Types.ExprOp) {
                return apply(map(PureScript_CST_Types.ExprOp.create)(k.onExpr(v.value0)))(traverse4(traverse5(k.onExpr))(v.value1));
            };
            if (v instanceof PureScript_CST_Types.ExprNegate) {
                return map(PureScript_CST_Types.ExprNegate.create(v.value0))(k.onExpr(v.value1));
            };
            if (v instanceof PureScript_CST_Types.ExprRecordAccessor) {
                return map(PureScript_CST_Types.ExprRecordAccessor.create)(traverseRecordAccessor1(k)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprRecordUpdate) {
                return apply(map(PureScript_CST_Types.ExprRecordUpdate.create)(k.onExpr(v.value0)))(traverseWrapped1(traverseSeparated1(traverseRecordUpdate1(k)))(v.value1));
            };
            if (v instanceof PureScript_CST_Types.ExprApp) {
                return apply(map(PureScript_CST_Types.ExprApp.create)(k.onExpr(v.value0)))(traverse4(k.onExpr)(v.value1));
            };
            if (v instanceof PureScript_CST_Types.ExprLambda) {
                return map(PureScript_CST_Types.ExprLambda.create)(traverseLambda1(k)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprIf) {
                return map(PureScript_CST_Types.ExprIf.create)(traverseIfThenElse1(k)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprCase) {
                return map(PureScript_CST_Types.ExprCase.create)(traverseCaseOf1(k)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprLet) {
                return map(PureScript_CST_Types.ExprLet.create)(traverseLetIn1(k)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprDo) {
                return map(PureScript_CST_Types.ExprDo.create)(traverseDoBlock1(k)(v.value0));
            };
            if (v instanceof PureScript_CST_Types.ExprAdo) {
                return map(PureScript_CST_Types.ExprAdo.create)(traverseAdoBlock1(k)(v.value0));
            };
            return pure2(v);
        };
    };
};
var traverseExpr1 = /* #__PURE__ */ traverseExpr(applicativeReaderT);
var traverseExpr2 = /* #__PURE__ */ traverseExpr(Control_Monad_Free.freeApplicative);
var topDownTraversalWithContextM = function (dictMonad) {
    var bind2 = Control_Bind.bind(dictMonad.Bind1());
    var applicativeReaderT1 = Control_Monad_Reader_Trans.applicativeReaderT(dictMonad.Applicative0());
    var traverseBinder3 = traverseBinder(applicativeReaderT1);
    var traverseExpr3 = traverseExpr(applicativeReaderT1);
    var traverseDecl3 = traverseDecl(applicativeReaderT1);
    var traverseType3 = traverseType(applicativeReaderT1);
    return function (visitor) {
        var visitor$prime = {
            onBinder: function (a) {
                return function (ctx) {
                    return bind2(visitor.onBinder(ctx)(a))(Data_Tuple.uncurry(Data_Function.flip((function () {
                        var $670 = traverseBinder3(visitor$prime);
                        return function ($671) {
                            return Control_Monad_Reader_Trans.runReaderT($670($671));
                        };
                    })())));
                };
            },
            onExpr: function (a) {
                return function (ctx) {
                    return bind2(visitor.onExpr(ctx)(a))(Data_Tuple.uncurry(Data_Function.flip((function () {
                        var $672 = traverseExpr3(visitor$prime);
                        return function ($673) {
                            return Control_Monad_Reader_Trans.runReaderT($672($673));
                        };
                    })())));
                };
            },
            onDecl: function (a) {
                return function (ctx) {
                    return bind2(visitor.onDecl(ctx)(a))(Data_Tuple.uncurry(Data_Function.flip((function () {
                        var $674 = traverseDecl3(visitor$prime);
                        return function ($675) {
                            return Control_Monad_Reader_Trans.runReaderT($674($675));
                        };
                    })())));
                };
            },
            onType: function (a) {
                return function (ctx) {
                    return bind2(visitor.onType(ctx)(a))(Data_Tuple.uncurry(Data_Function.flip((function () {
                        var $676 = traverseType3(visitor$prime);
                        return function ($677) {
                            return Control_Monad_Reader_Trans.runReaderT($676($677));
                        };
                    })())));
                };
            }
        };
        return visitor$prime;
    };
};
var topDownTraversalWithContext = function (visitor) {
    var visitor$prime = {
        onBinder: function (a) {
            return function (ctx) {
                return bind(pure(visitor.onBinder(ctx)(a)))(Data_Tuple.uncurry(Data_Function.flip((function () {
                    var $678 = traverseBinder1(visitor$prime);
                    return function ($679) {
                        return Control_Monad_Reader_Trans.runReaderT($678($679));
                    };
                })())));
            };
        },
        onExpr: function (a) {
            return function (ctx) {
                return bind(pure(visitor.onExpr(ctx)(a)))(Data_Tuple.uncurry(Data_Function.flip((function () {
                    var $680 = traverseExpr1(visitor$prime);
                    return function ($681) {
                        return Control_Monad_Reader_Trans.runReaderT($680($681));
                    };
                })())));
            };
        },
        onDecl: function (a) {
            return function (ctx) {
                return bind(pure(visitor.onDecl(ctx)(a)))(Data_Tuple.uncurry(Data_Function.flip((function () {
                    var $682 = traverseDecl1(visitor$prime);
                    return function ($683) {
                        return Control_Monad_Reader_Trans.runReaderT($682($683));
                    };
                })())));
            };
        },
        onType: function (a) {
            return function (ctx) {
                return bind(pure(visitor.onType(ctx)(a)))(Data_Tuple.uncurry(Data_Function.flip((function () {
                    var $684 = traverseType1(visitor$prime);
                    return function ($685) {
                        return Control_Monad_Reader_Trans.runReaderT($684($685));
                    };
                })())));
            };
        }
    };
    return visitor$prime;
};
var topDownTraversal = function (dictMonad) {
    var bind2 = Control_Bind.bind(dictMonad.Bind1());
    var Applicative0 = dictMonad.Applicative0();
    var traverseBinder3 = traverseBinder(Applicative0);
    var traverseExpr3 = traverseExpr(Applicative0);
    var traverseType3 = traverseType(Applicative0);
    var traverseDecl3 = traverseDecl(Applicative0);
    return function (visitor) {
        var visitor$prime = {
            onBinder: function (a) {
                return bind2(visitor.onBinder(a))(traverseBinder3(visitor$prime));
            },
            onExpr: function (a) {
                return bind2(visitor.onExpr(a))(traverseExpr3(visitor$prime));
            },
            onType: function (a) {
                return bind2(visitor.onType(a))(traverseType3(visitor$prime));
            },
            onDecl: function (a) {
                return bind2(visitor.onDecl(a))(traverseDecl3(visitor$prime));
            }
        };
        return visitor$prime;
    };
};
var topDownPureTraversal = function (visitor) {
    var visitor$prime = {
        onBinder: function (a) {
            return bind1(pure1(visitor.onBinder(a)))(traverseBinder2(visitor$prime));
        },
        onExpr: function (a) {
            return bind1(pure1(visitor.onExpr(a)))(traverseExpr2(visitor$prime));
        },
        onType: function (a) {
            return bind1(pure1(visitor.onType(a)))(traverseType2(visitor$prime));
        },
        onDecl: function (a) {
            return bind1(pure1(visitor.onDecl(a)))(traverseDecl2(visitor$prime));
        }
    };
    return visitor$prime;
};
var rewriteWithContextM = function (dictMonad) {
    var topDownTraversalWithContextM1 = topDownTraversalWithContextM(dictMonad);
    var map = Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0());
    return function (traversal) {
        return function (visitor) {
            return function (ctx) {
                return function (g) {
                    var visitor$prime = topDownTraversalWithContextM1(visitor);
                    return map(Data_Tuple.Tuple.create(ctx))(Control_Monad_Reader_Trans.runReaderT(traversal(visitor$prime)(g))(ctx));
                };
            };
        };
    };
};
var rewriteWithContext = function (traversal) {
    return function (visitor) {
        return function (ctx) {
            return function (g) {
                var visitor$prime = topDownTraversalWithContext(visitor);
                return new Data_Tuple.Tuple(ctx, un(Data_Identity.Identity)(Control_Monad_Reader_Trans.runReaderT(traversal(visitor$prime)(g))(ctx)));
            };
        };
    };
};
var rewriteTypeWithContextM = function (dictMonad) {
    return rewriteWithContextM(dictMonad)(function (v) {
        return v.onType;
    });
};
var rewriteTypeWithContext = /* #__PURE__ */ rewriteWithContext(function (v) {
    return v.onType;
});
var rewriteTopDownM = function (dictMonad) {
    var topDownTraversal1 = topDownTraversal(dictMonad);
    return function (traversal) {
        return function (visitor) {
            var visitor$prime = topDownTraversal1(visitor);
            return traversal(visitor$prime);
        };
    };
};
var rewriteTypeTopDownM = function (dictMonad) {
    return rewriteTopDownM(dictMonad)(function (v) {
        return v.onType;
    });
};
var rewriteTopDown = function (traversal) {
    return function (visitor) {
        var visitor$prime = topDownPureTraversal(visitor);
        var $686 = runFree(un(Data_Identity.Identity));
        var $687 = traversal(visitor$prime);
        return function ($688) {
            return $686($687($688));
        };
    };
};
var rewriteTypeTopDown = /* #__PURE__ */ rewriteTopDown(function (v) {
    return v.onType;
});
var rewriteModuleWithContextM = function (dictMonad) {
    return rewriteWithContextM(dictMonad)(traverseModule(Control_Monad_Reader_Trans.applicativeReaderT(dictMonad.Applicative0())));
};
var rewriteModuleWithContext = /* #__PURE__ */ rewriteWithContext(/* #__PURE__ */ traverseModule(applicativeReaderT));
var rewriteModuleTopDownM = function (dictMonad) {
    return rewriteTopDownM(dictMonad)(traverseModule(dictMonad.Applicative0()));
};
var rewriteModuleTopDown = /* #__PURE__ */ rewriteTopDown(traverseModule1);
var rewriteExprWithContextM = function (dictMonad) {
    return rewriteWithContextM(dictMonad)(function (v) {
        return v.onExpr;
    });
};
var rewriteExprWithContext = /* #__PURE__ */ rewriteWithContext(function (v) {
    return v.onExpr;
});
var rewriteExprTopDownM = function (dictMonad) {
    return rewriteTopDownM(dictMonad)(function (v) {
        return v.onExpr;
    });
};
var rewriteExprTopDown = /* #__PURE__ */ rewriteTopDown(function (v) {
    return v.onExpr;
});
var rewriteDeclWithContextM = function (dictMonad) {
    return rewriteWithContextM(dictMonad)(function (v) {
        return v.onDecl;
    });
};
var rewriteDeclWithContext = /* #__PURE__ */ rewriteWithContext(function (v) {
    return v.onDecl;
});
var rewriteDeclTopDownM = function (dictMonad) {
    return rewriteTopDownM(dictMonad)(function (v) {
        return v.onDecl;
    });
};
var rewriteDeclTopDown = /* #__PURE__ */ rewriteTopDown(function (v) {
    return v.onDecl;
});
var rewriteBinderWithContextM = function (dictMonad) {
    return rewriteWithContextM(dictMonad)(function (v) {
        return v.onBinder;
    });
};
var rewriteBinderWithContext = /* #__PURE__ */ rewriteWithContext(function (v) {
    return v.onBinder;
});
var rewriteBinderTopDownM = function (dictMonad) {
    return rewriteTopDownM(dictMonad)(function (v) {
        return v.onBinder;
    });
};
var rewriteBinderTopDown = /* #__PURE__ */ rewriteTopDown(function (v) {
    return v.onBinder;
});
var defer = function (dictMonad) {
    var bind2 = Control_Bind.bind(dictMonad.Bind1());
    var pure2 = Control_Applicative.pure(dictMonad.Applicative0());
    return function (v) {
        return bind2(pure2(Data_Unit.unit))(v);
    };
};
var defer1 = /* #__PURE__ */ defer(Control_Monad_Free.freeMonad);
var topDownMonoidalTraversal = function (dictMonoid) {
    var apply = Control_Apply.apply(applyCompose(Data_Const.applyConst(dictMonoid.Semigroup0())));
    var applicativeCompose1 = applicativeCompose(Data_Const.applicativeConst(dictMonoid));
    var traverseBinder3 = traverseBinder(applicativeCompose1);
    var traverseExpr3 = traverseExpr(applicativeCompose1);
    var traverseDecl3 = traverseDecl(applicativeCompose1);
    var traverseType3 = traverseType(applicativeCompose1);
    return function (visitor) {
        var visitor$prime = {
            onBinder: function (a) {
                return apply(pure1(visitor.onBinder(a)))(defer1(function (v) {
                    return un(Data_Functor_Compose.Compose)(traverseBinder3(visitor$prime)(a));
                }));
            },
            onExpr: function (a) {
                return apply(pure1(visitor.onExpr(a)))(defer1(function (v) {
                    return un(Data_Functor_Compose.Compose)(traverseExpr3(visitor$prime)(a));
                }));
            },
            onDecl: function (a) {
                return apply(pure1(visitor.onDecl(a)))(defer1(function (v) {
                    return un(Data_Functor_Compose.Compose)(traverseDecl3(visitor$prime)(a));
                }));
            },
            onType: function (a) {
                return apply(pure1(visitor.onType(a)))(defer1(function (v) {
                    return un(Data_Functor_Compose.Compose)(traverseType3(visitor$prime)(a));
                }));
            }
        };
        return visitor$prime;
    };
};
var monoidalRewrite = function (dictMonoid) {
    var topDownMonoidalTraversal1 = topDownMonoidalTraversal(dictMonoid);
    return function (traversal) {
        return function (visitor) {
            return function (g) {
                var visitor$prime = topDownMonoidalTraversal1(visitor);
                return un(Data_Const.Const)(runFree(un(Data_Identity.Identity))(un(Data_Functor_Compose.Compose)(traversal(visitor$prime)(g))));
            };
        };
    };
};
var foldMapBinder = function (dictMonoid) {
    return monoidalRewrite(dictMonoid)(function (v) {
        return v.onBinder;
    });
};
var foldMapDecl = function (dictMonoid) {
    return monoidalRewrite(dictMonoid)(function (v) {
        return v.onDecl;
    });
};
var foldMapExpr = function (dictMonoid) {
    return monoidalRewrite(dictMonoid)(function (v) {
        return v.onExpr;
    });
};
var foldMapModule = function (dictMonoid) {
    return monoidalRewrite(dictMonoid)(traverseModule(applicativeCompose(Data_Const.applicativeConst(dictMonoid))));
};
var foldMapType = function (dictMonoid) {
    return monoidalRewrite(dictMonoid)(function (v) {
        return v.onType;
    });
};
var defaultVisitorWithContextM = function (dictMonad) {
    var pure2 = Control_Applicative.pure(dictMonad.Applicative0());
    return {
        onBinder: Data_Tuple.curry(pure2),
        onDecl: Data_Tuple.curry(pure2),
        onExpr: Data_Tuple.curry(pure2),
        onType: Data_Tuple.curry(pure2)
    };
};
var defaultVisitorWithContext = {
    onBinder: /* #__PURE__ */ Data_Tuple.curry(identity),
    onDecl: /* #__PURE__ */ Data_Tuple.curry(identity),
    onExpr: /* #__PURE__ */ Data_Tuple.curry(identity),
    onType: /* #__PURE__ */ Data_Tuple.curry(identity)
};
var defaultVisitorM = function (dictApplicative) {
    var pure2 = Control_Applicative.pure(dictApplicative);
    return {
        onBinder: pure2,
        onDecl: pure2,
        onExpr: pure2,
        onType: pure2
    };
};
var defaultVisitor = {
    onBinder: identity,
    onDecl: identity,
    onExpr: identity,
    onType: identity
};
var defaultMonoidalVisitor = function (dictMonoid) {
    var mempty = Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid));
    return {
        onBinder: mempty,
        onDecl: mempty,
        onExpr: mempty,
        onType: mempty
    };
};
var bottomUpTraversal = function (dictMonad) {
    var bindFlipped1 = Control_Bind.bindFlipped(dictMonad.Bind1());
    var defer2 = defer(dictMonad);
    var Applicative0 = dictMonad.Applicative0();
    var traverseBinder3 = traverseBinder(Applicative0);
    var traverseExpr3 = traverseExpr(Applicative0);
    var traverseType3 = traverseType(Applicative0);
    var traverseDecl3 = traverseDecl(Applicative0);
    return function (visitor) {
        var visitor$prime = {
            onBinder: function (a) {
                return bindFlipped1(visitor.onBinder)(defer2(function (v) {
                    return traverseBinder3(visitor$prime)(a);
                }));
            },
            onExpr: function (a) {
                return bindFlipped1(visitor.onExpr)(defer2(function (v) {
                    return traverseExpr3(visitor$prime)(a);
                }));
            },
            onType: function (a) {
                return bindFlipped1(visitor.onType)(defer2(function (v) {
                    return traverseType3(visitor$prime)(a);
                }));
            },
            onDecl: function (a) {
                return bindFlipped1(visitor.onDecl)(defer2(function (v) {
                    return traverseDecl3(visitor$prime)(a);
                }));
            }
        };
        return visitor$prime;
    };
};
var rewriteBottomUpM = function (dictMonad) {
    var bottomUpTraversal1 = bottomUpTraversal(dictMonad);
    return function (traversal) {
        return function (visitor) {
            var visitor$prime = bottomUpTraversal1(visitor);
            return traversal(visitor$prime);
        };
    };
};
var rewriteBinderBottomUpM = function (dictMonad) {
    return rewriteBottomUpM(dictMonad)(function (v) {
        return v.onBinder;
    });
};
var rewriteDeclBottomUpM = function (dictMonad) {
    return rewriteBottomUpM(dictMonad)(function (v) {
        return v.onDecl;
    });
};
var rewriteExprBottomUpM = function (dictMonad) {
    return rewriteBottomUpM(dictMonad)(function (v) {
        return v.onExpr;
    });
};
var rewriteModuleBottomUpM = function (dictMonad) {
    return rewriteBottomUpM(dictMonad)(traverseModule(dictMonad.Applicative0()));
};
var rewriteTypeBottomUpM = function (dictMonad) {
    return rewriteBottomUpM(dictMonad)(function (v) {
        return v.onType;
    });
};
var bottomUpPureTraversal = function (visitor) {
    var visitor$prime = {
        onBinder: function (a) {
            return bindFlipped(function ($689) {
                return pure1(visitor.onBinder($689));
            })(traverseBinder2(visitor$prime)(a));
        },
        onExpr: function (a) {
            return bindFlipped(function ($690) {
                return pure1(visitor.onExpr($690));
            })(traverseExpr2(visitor$prime)(a));
        },
        onType: function (a) {
            return bindFlipped(function ($691) {
                return pure1(visitor.onType($691));
            })(traverseType2(visitor$prime)(a));
        },
        onDecl: function (a) {
            return bindFlipped(function ($692) {
                return pure1(visitor.onDecl($692));
            })(traverseDecl2(visitor$prime)(a));
        }
    };
    return visitor$prime;
};
var rewriteBottomUp = function (traversal) {
    return function (visitor) {
        var visitor$prime = bottomUpPureTraversal(visitor);
        var $693 = runFree(un(Data_Identity.Identity));
        var $694 = traversal(visitor$prime);
        return function ($695) {
            return $693($694($695));
        };
    };
};
var rewriteBinderBottomUp = /* #__PURE__ */ rewriteBottomUp(function (v) {
    return v.onBinder;
});
var rewriteDeclBottomUp = /* #__PURE__ */ rewriteBottomUp(function (v) {
    return v.onDecl;
});
var rewriteExprBottomUp = /* #__PURE__ */ rewriteBottomUp(function (v) {
    return v.onExpr;
});
var rewriteModuleBottomUp = /* #__PURE__ */ rewriteBottomUp(traverseModule1);
var rewriteTypeBottomUp = /* #__PURE__ */ rewriteBottomUp(function (v) {
    return v.onType;
});
export {
    defaultVisitorM,
    rewriteModuleBottomUpM,
    rewriteBinderBottomUpM,
    rewriteExprBottomUpM,
    rewriteDeclBottomUpM,
    rewriteTypeBottomUpM,
    rewriteModuleTopDownM,
    rewriteBinderTopDownM,
    rewriteExprTopDownM,
    rewriteDeclTopDownM,
    rewriteTypeTopDownM,
    defaultVisitorWithContextM,
    rewriteModuleWithContextM,
    rewriteBinderWithContextM,
    rewriteExprWithContextM,
    rewriteDeclWithContextM,
    rewriteTypeWithContextM,
    defaultMonoidalVisitor,
    foldMapModule,
    foldMapBinder,
    foldMapDecl,
    foldMapExpr,
    foldMapType,
    defaultVisitor,
    rewriteModuleBottomUp,
    rewriteBinderBottomUp,
    rewriteExprBottomUp,
    rewriteDeclBottomUp,
    rewriteTypeBottomUp,
    rewriteModuleTopDown,
    rewriteBinderTopDown,
    rewriteExprTopDown,
    rewriteDeclTopDown,
    rewriteTypeTopDown,
    defaultVisitorWithContext,
    rewriteModuleWithContext,
    rewriteBinderWithContext,
    rewriteExprWithContext,
    rewriteDeclWithContext,
    rewriteTypeWithContext,
    traverseModule,
    traverseModuleBody,
    traverseDecl,
    traverseForeign,
    traverseInstance,
    traverseInstanceHead,
    traverseInstanceBinding,
    traverseClassHead,
    traverseOneOrDelimited,
    traverseDataHead,
    traverseDataCtor,
    traverseType,
    traverseRow,
    traverseTypeVarBinding,
    traverseExpr,
    traverseDelimited,
    traverseDelimitedNonEmpty,
    traverseSeparated,
    traverseWrapped,
    traverseRecordLabeled,
    traverseLabeled,
    traverseRecordAccessor,
    traverseRecordUpdate,
    traverseLambda,
    traverseIfThenElse,
    traverseCaseOf,
    traverseGuarded,
    traverseGuardedExpr,
    traversePatternGuard,
    traverseWhere,
    traverseLetBinding,
    traverseValueBindingFields,
    traverseLetIn,
    traverseDoStatement,
    traverseDoBlock,
    traverseAdoBlock,
    traverseBinder,
    bottomUpTraversal,
    rewriteBottomUpM,
    topDownTraversal,
    rewriteTopDownM,
    topDownTraversalWithContextM,
    rewriteWithContextM,
    topDownMonoidalTraversal,
    monoidalRewrite,
    bottomUpPureTraversal,
    rewriteBottomUp,
    topDownPureTraversal,
    rewriteTopDown,
    topDownTraversalWithContext,
    rewriteWithContext
};
//# sourceMappingURL=index.js.map
