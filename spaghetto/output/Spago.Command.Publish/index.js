// Generated by purs version 0.15.10
import * as Affjax from "../Affjax/index.js";
import * as Affjax_Node from "../Affjax.Node/index.js";
import * as Affjax_RequestBody from "../Affjax.RequestBody/index.js";
import * as Affjax_ResponseFormat from "../Affjax.ResponseFormat/index.js";
import * as Affjax_StatusCode from "../Affjax.StatusCode/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Codec from "../Data.Codec/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Formatter_DateTime from "../Data.Formatter.DateTime/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Dodo from "../Dodo/index.js";
import * as Dodo_Ansi from "../Dodo.Ansi/index.js";
import * as Dodo_Internal from "../Dodo.Internal/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Node_Path from "../Node.Path/index.js";
import * as Registry_API_V1 from "../Registry.API.V1/index.js";
import * as Registry_Internal_Format from "../Registry.Internal.Format/index.js";
import * as Registry_Internal_Path from "../Registry.Internal.Path/index.js";
import * as Registry_Location from "../Registry.Location/index.js";
import * as Registry_Metadata from "../Registry.Metadata/index.js";
import * as Registry_Operation from "../Registry.Operation/index.js";
import * as Registry_Operation_Validation from "../Registry.Operation.Validation/index.js";
import * as Registry_PackageName from "../Registry.PackageName/index.js";
import * as Registry_Version from "../Registry.Version/index.js";
import * as Routing_Duplex from "../Routing.Duplex/index.js";
import * as Spago_Command_Build from "../Spago.Command.Build/index.js";
import * as Spago_Command_Fetch from "../Spago.Command.Fetch/index.js";
import * as Spago_Config from "../Spago.Config/index.js";
import * as Spago_Core_Prelude from "../Spago.Core.Prelude/index.js";
import * as Spago_Git from "../Spago.Git/index.js";
import * as Spago_Json from "../Spago.Json/index.js";
import * as Spago_Log from "../Spago.Log/index.js";
import * as Spago_Prelude from "../Spago.Prelude/index.js";
import * as Spago_Purs_Graph from "../Spago.Purs.Graph/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Spago_Core_Prelude.bindSpago);
var die = /* #__PURE__ */ Spago_Log.die(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var pure = /* #__PURE__ */ Control_Applicative.pure(Spago_Core_Prelude.applicativeSpago);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(Spago_Core_Prelude.bindSpago);
var logDebug = /* #__PURE__ */ Spago_Log.logDebug(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago);
var logDebug1 = /* #__PURE__ */ logDebug(Spago_Log.loggableString);
var liftAff = /* #__PURE__ */ Effect_Aff_Class.liftAff(Spago_Core_Prelude.monadAffSpago);
var notEq = /* #__PURE__ */ Data_Eq.notEq(Affjax_StatusCode.eqStatusCode);
var show = /* #__PURE__ */ Data_Show.show(Affjax_StatusCode.showStatusCode);
var show1 = /* #__PURE__ */ Data_Show.show(Data_Codec_Argonaut.showJsonDecodeError);
var ask = /* #__PURE__ */ Control_Monad_Reader_Class.ask(Spago_Core_Prelude.monadAskSpago);
var for_ = /* #__PURE__ */ Data_Foldable.for_(Spago_Core_Prelude.applicativeSpago);
var for_1 = /* #__PURE__ */ for_(Data_Foldable.foldableArray);
var toDoc = /* #__PURE__ */ Spago_Log.toDoc(Spago_Log.loggableString);
var logDebug2 = /* #__PURE__ */ logDebug(Spago_Log.loggableDocc);
var logInfo = /* #__PURE__ */ Spago_Log.logInfo(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago);
var logInfo1 = /* #__PURE__ */ logInfo(Spago_Log.loggableDocc);
var logWarn = /* #__PURE__ */ Spago_Log.logWarn(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableDocc);
var logError = /* #__PURE__ */ Spago_Log.logError(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableDocc);
var logSuccess = /* #__PURE__ */ Spago_Log.logSuccess(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Spago_Core_Prelude.monadEffectSpago);
var runSpago = /* #__PURE__ */ Spago_Core_Prelude.runSpago(Spago_Core_Prelude.monadAffSpago);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var toUnfoldable = /* #__PURE__ */ Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray);
var unwrap = /* #__PURE__ */ Data_Newtype.unwrap();
var fromFoldable = /* #__PURE__ */ Data_Map_Internal.fromFoldable(Registry_PackageName.ordPackageName)(Data_Foldable.foldableArray);
var unless = /* #__PURE__ */ Control_Applicative.unless(Spago_Core_Prelude.applicativeSpago);
var toDoc1 = /* #__PURE__ */ Spago_Log.toDoc(/* #__PURE__ */ Spago_Log.loggableArray(Spago_Log.loggableDocc));
var toDoc2 = /* #__PURE__ */ Spago_Log.toDoc(/* #__PURE__ */ Spago_Log.loggableArray(Spago_Log.loggableString));
var fromFoldable1 = /* #__PURE__ */ Data_Array.fromFoldable(Data_Foldable.foldableArray);
var readPursFiles = /* #__PURE__ */ Registry_Internal_Path.readPursFiles(Spago_Core_Prelude.monadAffSpago);
var validatePursModules = /* #__PURE__ */ Registry_Operation_Validation.validatePursModules(Spago_Core_Prelude.monadAffSpago);
var when = /* #__PURE__ */ Control_Applicative.when(Spago_Core_Prelude.applicativeSpago);
var for_2 = /* #__PURE__ */ for_(Data_Foldable.foldableMaybe);
var append1 = /* #__PURE__ */ Data_Semigroup.append(Dodo_Internal.semigroupDoc);
var show2 = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var die$prime = /* #__PURE__ */ Spago_Log["die$prime"](Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableDocc);
var fromFoldable2 = /* #__PURE__ */ Data_Array.fromFoldable(Data_List_Types.foldableList);
var logInfo2 = /* #__PURE__ */ logInfo(Spago_Log.loggableString);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Map_Internal.functorMap);
var callRegistry = function (url) {
    return function (outputCodec) {
        return function (maybeInput) {
            var handleError = function (a) {
                return bind(a)(function (v) {
                    if (v instanceof Data_Either.Left) {
                        return die(v.value0);
                    };
                    if (v instanceof Data_Either.Right) {
                        return pure(v.value0);
                    };
                    throw new Error("Failed pattern match at Spago.Command.Publish (line 344, column 25 - line 346, column 26): " + [ v.constructor.name ]);
                });
            };
            return handleError(discard(logDebug1("Calling registry at " + url))(function () {
                return bind(liftAff(Spago_Prelude["withBackoff$prime"]((function () {
                    if (maybeInput instanceof Data_Maybe.Just) {
                        return Affjax_Node.post(Affjax_ResponseFormat.string)(url)(new Data_Maybe.Just(Affjax_RequestBody.json(Data_Codec.encode(maybeInput.value0.codec)(maybeInput.value0.data))));
                    };
                    if (maybeInput instanceof Data_Maybe.Nothing) {
                        return Affjax_Node.get(Affjax_ResponseFormat.string)(url);
                    };
                    throw new Error("Failed pattern match at Spago.Command.Publish (line 330, column 40 - line 332, column 50): " + [ maybeInput.constructor.name ]);
                })())))(function (response) {
                    if (response instanceof Data_Maybe.Nothing) {
                        return pure(new Data_Either.Left("Could not reach the registry at " + url));
                    };
                    if (response instanceof Data_Maybe.Just && response.value0 instanceof Data_Either.Left) {
                        return pure(new Data_Either.Left("Error while calling the registry:\x0a  " + Affjax.printError(response.value0.value0)));
                    };
                    if (response instanceof Data_Maybe.Just && (response.value0 instanceof Data_Either.Right && notEq(response.value0.value0.status)(200))) {
                        return pure(new Data_Either.Left("Registry did not like this and answered with status " + (show(response.value0.value0.status) + (", got answer:\x0a  " + response.value0.value0.body))));
                    };
                    if (response instanceof Data_Maybe.Just && response.value0 instanceof Data_Either.Right) {
                        return pure((function () {
                            var v = Spago_Json.parseJson(outputCodec)(response.value0.value0.body);
                            if (v instanceof Data_Either.Right) {
                                return new Data_Either.Right(v.value0);
                            };
                            if (v instanceof Data_Either.Left) {
                                return new Data_Either.Left("Could not parse response from the registry, error: " + show1(v.value0));
                            };
                            throw new Error("Failed pattern match at Spago.Command.Publish (line 339, column 14 - line 341, column 93): " + [ v.constructor.name ]);
                        })());
                    };
                    throw new Error("Failed pattern match at Spago.Command.Publish (line 333, column 3 - line 341, column 93): " + [ response.constructor.name ]);
                });
            }));
        };
    };
};
var baseApi = "https://registry.purescript.org";
var waitForJobFinish = function (jobId) {
    var go = function (lastTimestamp) {
        return bind(ask)(function (v) {
            var url = baseApi + Routing_Duplex.print(Registry_API_V1.routes)(new Registry_API_V1.Job(jobId, {
                since: lastTimestamp,
                level: (function () {
                    if (v.logOptions.verbosity instanceof Spago_Log.LogVerbose) {
                        return new Data_Maybe.Just(Registry_API_V1.Debug.value);
                    };
                    return new Data_Maybe.Just(Registry_API_V1.Info.value);
                })()
            }));
            return bind(callRegistry(url)(Registry_API_V1.jobCodec)(Data_Maybe.Nothing.value))(function (v1) {
                return discard(for_1(v1.logs)(function (log) {
                    var line = Dodo.indent(toDoc(Data_Formatter_DateTime.format(Registry_Internal_Format.iso8601DateTime)(log.timestamp) + (" " + log.message)));
                    if (log.level instanceof Registry_API_V1.Debug) {
                        return logDebug2(line);
                    };
                    if (log.level instanceof Registry_API_V1.Info) {
                        return logInfo1(line);
                    };
                    if (log.level instanceof Registry_API_V1.Warn) {
                        return logWarn(line);
                    };
                    if (log.level instanceof Registry_API_V1["Error"]) {
                        return logError(line);
                    };
                    throw new Error("Failed pattern match at Spago.Command.Publish (line 367, column 7 - line 371, column 34): " + [ log.level.constructor.name ]);
                }))(function () {
                    if (v1.finishedAt instanceof Data_Maybe.Nothing) {
                        var latestTimestamp = (function (v2) {
                            if (v2 instanceof Data_Maybe.Just) {
                                return new Data_Maybe.Just(v2.value0.timestamp);
                            };
                            if (v2 instanceof Data_Maybe.Nothing) {
                                return lastTimestamp;
                            };
                            throw new Error("Failed pattern match at Spago.Command.Publish (line 376, column 57 - line 378, column 37): " + [ v2.constructor.name ]);
                        })(Data_Array.last(v1.logs));
                        return discard(liftAff(Effect_Aff.delay(500.0)))(function () {
                            return go(latestTimestamp);
                        });
                    };
                    if (v1.finishedAt instanceof Data_Maybe.Just) {
                        return discard(logDebug1("Job: " + Spago_Json.printJson(Registry_API_V1.jobCodec)(v1)))(function () {
                            if (v1.success) {
                                return logSuccess("Registry finished processing the package. Your package was published successfully!");
                            };
                            if (!v1.success) {
                                return die("Registry finished processing the package, but it failed. Please fix it and try again.");
                            };
                            throw new Error("Failed pattern match at Spago.Command.Publish (line 384, column 9 - line 386, column 113): " + [ v1.success.constructor.name ]);
                        });
                    };
                    throw new Error("Failed pattern match at Spago.Command.Publish (line 372, column 5 - line 386, column 113): " + [ v1.finishedAt.constructor.name ]);
                });
            });
        });
    };
    return go(Data_Maybe.Nothing.value);
};
var publish = function (_args) {
    return bind(liftEffect(Effect_Ref["new"](new Data_Either.Left(Data_List_Types.Nil.value))))(function (resultRef) {
        var setResult = function (r) {
            return liftEffect(Effect_Ref.modify_(function (v) {
                if (v instanceof Data_Either.Left && v.value0 instanceof Data_List_Types.Nil) {
                    return new Data_Either.Right(r);
                };
                return v;
            })(resultRef));
        };
        var addError = function (err) {
            return liftEffect(Effect_Ref.modify_(function (v) {
                if (v instanceof Data_Either.Left) {
                    return new Data_Either.Left(new Data_List_Types.Cons(err, v.value0));
                };
                if (v instanceof Data_Either.Right) {
                    return new Data_Either.Left(new Data_List_Types.Cons(err, Data_List_Types.Nil.value));
                };
                throw new Error("Failed pattern match at Spago.Command.Publish (line 80, column 11 - line 82, column 54): " + [ v.constructor.name ]);
            })(resultRef));
        };
        return bind(ask)(function (v) {
            var v1 = {
                hasTests: false,
                doc: v.selected.doc,
                "package": v["selected"]["package"],
                path: v.selected.path
            };
            var strName = Registry_PackageName.print(v1["package"].name);
            return discard(logDebug1("Publishing package " + strName))(function () {
                return discard(runSpago({
                    getManifestFromIndex: v.getManifestFromIndex,
                    getMetadata: v.getMetadata,
                    workspace: {
                        selected: new Data_Maybe.Just(v1),
                        backend: v.workspace.backend,
                        buildOptions: v.workspace.buildOptions,
                        compatibleCompiler: v.workspace.compatibleCompiler,
                        doc: v.workspace.doc,
                        lockfile: v.workspace.lockfile,
                        originalConfig: v.workspace.originalConfig,
                        packageSet: v.workspace.packageSet
                    },
                    logOptions: v.logOptions,
                    git: v.git,
                    purs: v.purs,
                    selected: v.selected,
                    dependencies: v.dependencies,
                    censorBuildWarnings: Data_Maybe.Nothing.value,
                    censorCodes: Data_Maybe.Nothing.value,
                    filterCodes: Data_Maybe.Nothing.value,
                    statVerbosity: Data_Maybe.Nothing.value,
                    showSource: Data_Maybe.Nothing.value,
                    strict: Data_Maybe.Nothing.value,
                    persistWarnings: Data_Maybe.Nothing.value
                })(Spago_Command_Build.run({
                    depsOnly: false,
                    pursArgs: [  ],
                    jsonErrors: false
                })))(function () {
                    var globs = Spago_Command_Build.getBuildGlobs({
                        selected: [ v1 ],
                        withTests: false,
                        dependencies: v.dependencies,
                        depsOnly: false
                    });
                    return bind(Spago_Purs_Graph.runGraphCheck(v1)(globs)([  ]))(function (graphCheckErrors) {
                        return discard(for_1(graphCheckErrors)(addError))(function () {
                            var v2 = Spago_Prelude.partitionEithers(map(function (v3) {
                                if (v3.value1 instanceof Data_Maybe.Nothing) {
                                    return new Data_Either.Left(v3.value0);
                                };
                                if (v3.value1 instanceof Data_Maybe.Just) {
                                    return new Data_Either.Right(new Data_Tuple.Tuple(v3.value0, v3.value1.value0));
                                };
                                throw new Error("Failed pattern match at Spago.Command.Publish (line 134, column 13 - line 136, column 64): " + [ v3.constructor.name ]);
                            })(toUnfoldable(unwrap(v1["package"].dependencies))));
                            var depsRanges = fromFoldable(v2.success);
                            return discard(unless(Data_Array["null"](v2.fail))(addError(toDoc1([ toDoc("The configuration is missing version bounds for some packages. Run `spago fetch --ensure-ranges` to add them:"), Dodo.indent(toDoc2(map(function (p) {
                                return "- " + Registry_PackageName.print(p);
                            })(fromFoldable1(v2.fail)))) ]))))(function () {
                                return bind(Spago_Command_Fetch.getTransitiveDepsFromRegistry(depsRanges)(Data_Map_Internal.empty))(function (buildPlan) {
                                    return discard((function () {
                                        if (v1["package"].publish instanceof Data_Maybe.Nothing) {
                                            return addError(toDoc("Did not find publishing config: add a valid one in package.publish"));
                                        };
                                        if (v1["package"].publish instanceof Data_Maybe.Just) {
                                            if (v1["package"].publish.value0.location instanceof Data_Maybe.Nothing) {
                                                return addError(toDoc("Need to specify a publish.location field."));
                                            };
                                            if (v1["package"].publish.value0.location instanceof Data_Maybe.Just) {
                                                return bind(bind(runSpago({
                                                    logOptions: v.logOptions
                                                })(v.getMetadata(v1["package"].name)))(function (v3) {
                                                    if (v3 instanceof Data_Either.Right) {
                                                        return pure(v3.value0);
                                                    };
                                                    if (v3 instanceof Data_Either.Left) {
                                                        return discard(logDebug1("Got error while reading metadata file: " + v3.value0))(function () {
                                                            return pure({
                                                                location: v1["package"].publish.value0.location.value0,
                                                                owners: Data_Maybe.Nothing.value,
                                                                published: Data_Map_Internal.empty,
                                                                unpublished: Data_Map_Internal.empty
                                                            });
                                                        });
                                                    };
                                                    throw new Error("Failed pattern match at Spago.Command.Publish (line 159, column 68 - line 168, column 16): " + [ v3.constructor.name ]);
                                                }))(function (metadata) {
                                                    var manifest = {
                                                        name: v1["package"].name,
                                                        location: v1["package"].publish.value0.location.value0,
                                                        description: v1["package"].description,
                                                        dependencies: depsRanges,
                                                        version: v1["package"].publish.value0.version,
                                                        license: v1["package"].publish.value0.license,
                                                        owners: Data_Maybe.Nothing.value,
                                                        files: Data_Maybe.Nothing.value
                                                    };
                                                    return discard(unless(Registry_Operation_Validation.locationMatches(manifest)(metadata))(addError(toDoc2([ "The manifest file specifies a location (", Spago_Json.stringifyJson(Registry_Location.codec)(manifest.location), ") that differs from the location in the registry metadata (", Spago_Json.stringifyJson(Registry_Location.codec)(metadata.location), "). If you would like to change the location of your package you should ", "submit a transfer operation." ]))))(function () {
                                                        var v3 = Spago_Prelude.partitionEithers(map(function (v4) {
                                                            if (v4.value1 instanceof Spago_Config.RegistryVersion) {
                                                                return new Data_Either.Right(new Data_Tuple.Tuple(v4.value0, v4.value1.value0));
                                                            };
                                                            return new Data_Either.Left(v4.value0);
                                                        })(toUnfoldable(v.dependencies)));
                                                        var $138 = Data_Array.length(v3.fail) > 0;
                                                        if ($138) {
                                                            return addError(toDoc("Could not find a suitable build plan, the following packages do not point to registry versions: " + Spago_Json.stringifyJson(Data_Codec_Argonaut.array(Registry_PackageName.codec))(v3.fail)));
                                                        };
                                                        var expectedTag = "v" + Registry_Version.print(v1["package"].publish.value0.version);
                                                        return bind(Spago_Git.getCleanTag(Data_Maybe.Nothing.value))(function (v4) {
                                                            if (v4 instanceof Data_Either.Left) {
                                                                return addError(toDoc2([ "The git tree is not clean, or you haven't checked out the tag you want to publish.", "Please commit or stash your changes, and checkout the tag you want to publish.", "To create the tag, you can run:", "", "  git tag " + expectedTag ]));
                                                            };
                                                            if (v4 instanceof Data_Either.Right) {
                                                                return discard((function () {
                                                                    var v5 = v4.value0 !== expectedTag;
                                                                    if (v5) {
                                                                        return addError(toDoc2([ "The tag (" + (v4.value0 + (") does not match the expected tag (" + (expectedTag + ")."))), "Please make sure to tag the correct version before publishing." ]));
                                                                    };
                                                                    if (!v5) {
                                                                        return bind(Spago_Git.pushTag(Data_Maybe.Nothing.value)(v1["package"].publish.value0.version))(function (v6) {
                                                                            if (v6 instanceof Data_Either.Left) {
                                                                                return addError(toDoc1([ v6.value0, toDoc("You can try to push the tag manually by running:"), toDoc(""), toDoc("  git push origin " + expectedTag) ]));
                                                                            };
                                                                            if (v6 instanceof Data_Either.Right) {
                                                                                return pure(Data_Unit.unit);
                                                                            };
                                                                            throw new Error("Failed pattern match at Spago.Command.Publish (line 225, column 72 - line 232, column 39): " + [ v6.constructor.name ]);
                                                                        });
                                                                    };
                                                                    throw new Error("Failed pattern match at Spago.Command.Publish (line 220, column 15 - line 232, column 39): " + [ v5.constructor.name ]);
                                                                })())(function () {
                                                                    return discard(bind(readPursFiles(Node_Path.concat([ v1.path, "src" ])))(function (v5) {
                                                                        if (v5 instanceof Data_Maybe.Nothing) {
                                                                            return addError(toDoc2([ "This package has no PureScript files in its `src` directory. ", "All package sources must be in the `src` directory, with any additional ", "sources indicated by the `files` key in your manifest." ]));
                                                                        };
                                                                        if (v5 instanceof Data_Maybe.Just) {
                                                                            return bind(validatePursModules(v5.value0))(function (v6) {
                                                                                if (v6 instanceof Data_Either.Left) {
                                                                                    return addError(toDoc2([ "This package has either malformed or disallowed PureScript module names ", "in its `src` directory. All package sources must be in the `src` directory, ", "with any additional sources indicated by the `files` key in your manifest.", v6.value0 ]));
                                                                                };
                                                                                if (v6 instanceof Data_Either.Right) {
                                                                                    return pure(Data_Unit.unit);
                                                                                };
                                                                                throw new Error("Failed pattern match at Spago.Command.Publish (line 241, column 70 - line 248, column 41): " + [ v6.constructor.name ]);
                                                                            });
                                                                        };
                                                                        throw new Error("Failed pattern match at Spago.Command.Publish (line 234, column 86 - line 248, column 41): " + [ v5.constructor.name ]);
                                                                    }))(function () {
                                                                        return discard(when(Registry_Operation_Validation.isMetadataPackage(manifest))(addError(toDoc("The `metadata` package cannot be uploaded to the registry because it is a protected package."))))(function () {
                                                                            return discard(for_2(Registry_Operation_Validation.isNotPublished(manifest)(metadata))(function (info) {
                                                                                return addError(toDoc2([ "You tried to upload a version that already exists: " + Registry_Version.print(manifest.version), "Its metadata is:", "```json", Spago_Json.printJson(Registry_Metadata.publishedMetadataCodec)(info), "```" ]));
                                                                            }))(function () {
                                                                                return discard(for_2(Registry_Operation_Validation.isNotUnpublished(manifest)(metadata))(function (info) {
                                                                                    return addError(toDoc2([ "You tried to upload a version that has been unpublished: " + Registry_Version.print(manifest.version), "", "```json", Spago_Json.printJson(Registry_Metadata.unpublishedMetadataCodec)(info), "```" ]));
                                                                                }))(function () {
                                                                                    return setResult({
                                                                                        name: v1["package"].name,
                                                                                        location: new Data_Maybe.Just(v1["package"].publish.value0.location.value0),
                                                                                        ref: v4.value0,
                                                                                        compiler: v.purs.version,
                                                                                        resolutions: buildPlan
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            };
                                                            throw new Error("Failed pattern match at Spago.Command.Publish (line 209, column 39 - line 268, column 119): " + [ v4.constructor.name ]);
                                                        });
                                                    });
                                                });
                                            };
                                            throw new Error("Failed pattern match at Spago.Command.Publish (line 153, column 27 - line 268, column 119): " + [ v1["package"].publish.value0.location.constructor.name ]);
                                        };
                                        throw new Error("Failed pattern match at Spago.Command.Publish (line 151, column 3 - line 268, column 119): " + [ v1["package"].publish.constructor.name ]);
                                    })())(function () {
                                        return bind(liftEffect(Effect_Ref.read(resultRef)))(function (result) {
                                            if (result instanceof Data_Either.Left) {
                                                return discard(logError(append1(Dodo_Ansi.bold(toDoc("Your package " + (strName + (" is not ready for publishing yet, encountered " + (show2(Data_List.length(result.value0)) + " errors:"))))))(Dodo["break"])))(function () {
                                                    return die$prime(fromFoldable2(result.value0));
                                                });
                                            };
                                            if (result instanceof Data_Either.Right) {
                                                return discard(logInfo2("Building again with the build plan from the solver..."))(function () {
                                                    var buildPlanDependencies = map1(Spago_Config.RegistryVersion.create)(result.value0.resolutions);
                                                    return discard(runSpago({
                                                        getManifestFromIndex: v.getManifestFromIndex,
                                                        getMetadata: v.getMetadata,
                                                        workspace: {
                                                            selected: new Data_Maybe.Just(v1),
                                                            backend: v.workspace.backend,
                                                            buildOptions: v.workspace.buildOptions,
                                                            compatibleCompiler: v.workspace.compatibleCompiler,
                                                            doc: v.workspace.doc,
                                                            lockfile: v.workspace.lockfile,
                                                            originalConfig: v.workspace.originalConfig,
                                                            packageSet: v.workspace.packageSet
                                                        },
                                                        logOptions: v.logOptions,
                                                        git: v.git,
                                                        purs: v.purs,
                                                        selected: v.selected,
                                                        dependencies: buildPlanDependencies,
                                                        censorBuildWarnings: Data_Maybe.Nothing.value,
                                                        censorCodes: Data_Maybe.Nothing.value,
                                                        filterCodes: Data_Maybe.Nothing.value,
                                                        statVerbosity: Data_Maybe.Nothing.value,
                                                        showSource: Data_Maybe.Nothing.value,
                                                        strict: Data_Maybe.Nothing.value,
                                                        persistWarnings: Data_Maybe.Nothing.value
                                                    })(Spago_Command_Build.run({
                                                        depsOnly: false,
                                                        pursArgs: [  ],
                                                        jsonErrors: false
                                                    })))(function () {
                                                        return discard(logDebug1(Spago_Prelude.unsafeStringify(result.value0)))(function () {
                                                            return discard(logSuccess("Ready for publishing. Calling the registry.."))(function () {
                                                                var newPublishingData = {
                                                                    name: result.value0.name,
                                                                    location: result.value0.location,
                                                                    ref: result.value0.ref,
                                                                    compiler: result.value0.compiler,
                                                                    resolutions: new Data_Maybe.Just(result.value0.resolutions)
                                                                };
                                                                return bind(callRegistry(baseApi + Routing_Duplex.print(Registry_API_V1.routes)(Registry_API_V1.Publish.value))(Registry_API_V1.jobCreatedResponseCodec)(new Data_Maybe.Just({
                                                                    codec: Registry_Operation.publishCodec,
                                                                    data: newPublishingData
                                                                })))(function (v3) {
                                                                    return discard(logSuccess("Registry accepted the Publish request and is processing..."))(function () {
                                                                        return discard(logDebug1("Job ID: " + unwrap(v3.jobId)))(function () {
                                                                            return discard(logInfo2("Logs from the Registry pipeline:"))(function () {
                                                                                return discard(waitForJobFinish(v3.jobId))(function () {
                                                                                    return pure(newPublishingData);
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            };
                                            throw new Error("Failed pattern match at Spago.Command.Publish (line 271, column 3 - line 325, column 29): " + [ result.constructor.name ]);
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};
export {
    publish
};
