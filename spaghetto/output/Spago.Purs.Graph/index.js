// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Map from "../Data.Map/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Dodo from "../Dodo/index.js";
import * as Record from "../Record/index.js";
import * as Registry_Foreign_FastGlob from "../Registry.Foreign.FastGlob/index.js";
import * as Registry_PackageName from "../Registry.PackageName/index.js";
import * as Spago_Config from "../Spago.Config/index.js";
import * as Spago_Core_Prelude from "../Spago.Core.Prelude/index.js";
import * as Spago_Log from "../Spago.Log/index.js";
import * as Spago_Paths from "../Spago.Paths/index.js";
import * as Spago_Purs from "../Spago.Purs/index.js";
var loggableArray = /* #__PURE__ */ Spago_Log.loggableArray(Spago_Log.loggableDocc);
var toDoc = /* #__PURE__ */ Spago_Log.toDoc(loggableArray);
var toDoc1 = /* #__PURE__ */ Spago_Log.toDoc(Spago_Log.loggableString);
var toDoc2 = /* #__PURE__ */ Spago_Log.toDoc(/* #__PURE__ */ Spago_Log.loggableArray(Spago_Log.loggableString));
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var toUnfoldable = /* #__PURE__ */ Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray);
var fromFoldable = /* #__PURE__ */ Data_Array.fromFoldable(Data_Set.foldableSet);
var toUnfoldable1 = /* #__PURE__ */ Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray);
var bind = /* #__PURE__ */ Control_Bind.bind(Spago_Core_Prelude.bindSpago);
var match = /* #__PURE__ */ Registry_Foreign_FastGlob.match(Spago_Core_Prelude.monadAffSpago);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(Spago_Core_Prelude.bindSpago);
var unless = /* #__PURE__ */ Control_Applicative.unless(Spago_Core_Prelude.applicativeSpago);
var logDebug = /* #__PURE__ */ Spago_Log.logDebug(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(loggableArray);
var pure = /* #__PURE__ */ Control_Applicative.pure(Spago_Core_Prelude.applicativeSpago);
var append1 = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var ask = /* #__PURE__ */ Control_Monad_Reader_Class.ask(Spago_Core_Prelude.monadAskSpago);
var unwrap = /* #__PURE__ */ Data_Newtype.unwrap();
var insert = /* #__PURE__ */ Data_Map_Internal.insert(Registry_PackageName.ordPackageName);
var map1 = /* #__PURE__ */ Data_Functor.map(Spago_Core_Prelude.functorSpago);
var fromFoldable1 = /* #__PURE__ */ Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray);
var fold = /* #__PURE__ */ Data_Array.fold(Data_Monoid.monoidArray);
var $$for = /* #__PURE__ */ Data_Traversable["for"](Spago_Core_Prelude.applicativeSpago)(Data_Traversable.traversableArray);
var eq = /* #__PURE__ */ Data_Eq.eq(Registry_PackageName.eqPackageName);
var traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableArray)(Spago_Core_Prelude.applicativeSpago);
var fromFoldable2 = /* #__PURE__ */ Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordString);
var mapMaybe = /* #__PURE__ */ Data_Map_Internal.mapMaybe(Registry_PackageName.ordPackageName);
var union = /* #__PURE__ */ Data_Map_Internal.union(Registry_PackageName.ordPackageName);
var bind1 = /* #__PURE__ */ Control_Bind.bind(Data_Maybe.bindMaybe);
var lookup = /* #__PURE__ */ Data_Map_Internal.lookup(Data_Ord.ordString);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(Data_Maybe.applicativeMaybe);
var insert1 = /* #__PURE__ */ Data_Map_Internal.insert(Data_Ord.ordString);
var foldl = /* #__PURE__ */ Data_Foldable.foldl(Data_Foldable.foldableArray);
var filterWithKey = /* #__PURE__ */ Data_Map_Internal.filterWithKey(Data_Ord.ordString);
var member = /* #__PURE__ */ Data_Set.member(Data_Ord.ordString);
var alter = /* #__PURE__ */ Data_Map_Internal.alter(Registry_PackageName.ordPackageName);
var alter1 = /* #__PURE__ */ Data_Map_Internal.alter(Data_Ord.ordString);
var insert2 = /* #__PURE__ */ Data_Set.insert(Data_Ord.ordString);
var difference = /* #__PURE__ */ Data_Map_Internal.difference(Registry_PackageName.ordPackageName);
var logWarn = /* #__PURE__ */ Spago_Log.logWarn(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var runSpago = /* #__PURE__ */ Spago_Core_Prelude.runSpago(Spago_Core_Prelude.monadAffSpago);
var union1 = /* #__PURE__ */ Record.union();
var unusedError = function (isTest) {
    return function (selected) {
        return function (unused) {
            return toDoc([ toDoc1((function () {
                if (isTest) {
                    return "Tests for package '";
                };
                return "Sources for package '";
            })() + (Registry_PackageName.print(selected["package"].name) + "' declares unused dependencies - please remove them from the project config:")), Dodo.indent(toDoc2(map(function (p) {
                return Registry_PackageName.print(p);
            })(toUnfoldable(unused)))) ]);
        };
    };
};
var transitiveError = function (isTest) {
    return function (selected) {
        return function (transitive) {
            return toDoc([ toDoc1((function () {
                if (isTest) {
                    return "Tests for package '";
                };
                return "Sources for package '";
            })() + (Registry_PackageName.print(selected["package"].name) + "' import the following transitive dependencies - please add them to the project dependencies, or remove the imports:")), Dodo.indent(toDoc(map(function (v) {
                return toDoc([ toDoc1(Registry_PackageName.print(v.value0)), Dodo.indent(toDoc(map(function (v1) {
                    return toDoc([ toDoc1("from `" + (v1.value0 + "`, which imports:")), Dodo.indent(toDoc2(fromFoldable(v1.value1))) ]);
                })(toUnfoldable1(v.value1)))) ]);
            })(toUnfoldable1(transitive)))), Dodo["break"], toDoc1("Run the following command to install them all:"), Dodo.indent(toDoc1("spago install " + ((function () {
                if (isTest) {
                    return "--test-deps ";
                };
                return "";
            })() + ("-p " + (Registry_PackageName.print(selected["package"].name) + (" " + Data_String_Common.joinWith(" ")(map(Registry_PackageName.print)(toUnfoldable(Data_Map.keys(transitive)))))))))) ]);
        };
    };
};
var compileGlob = function (sourcePath) {
    return bind(match(Spago_Paths.cwd)([ sourcePath ]))(function (v) {
        return discard(unless(Data_Array["null"](v.failed))(logDebug([ toDoc1("Encountered some globs that are not in cwd, proceeding anyways:"), Dodo.indent(toDoc2(v.failed)) ])))(function () {
            return pure(append1(v.succeeded)(v.failed));
        });
    });
};
var checkImports = /* #__PURE__ */ bind(ask)(function (v) {
    var declaredDependencies = unwrap(v["selected"]["package"].dependencies);
    var declaredTestDependencies = Data_Maybe.maybe(Data_Map_Internal.empty)(function ($137) {
        return unwrap((function (v1) {
            return v1.dependencies;
        })($137));
    })(v["selected"]["package"].test);
    var testPackageName = Registry_PackageName.print(v["selected"]["package"].name) + ":test";
    var allPackages = insert(v["selected"]["package"].name)(new Spago_Config.WorkspacePackage(v.selected))(insert(testPackageName)(new Spago_Config.WorkspacePackage(v.selected))(v.dependencies));
    return bind(map1(function ($138) {
        return fromFoldable1(fold($138));
    })($$for(toUnfoldable1(allPackages))(function (v1) {
        var withTestGlobs = (function () {
            var $87 = eq(v1.value0)(testPackageName);
            if ($87) {
                return Spago_Config.OnlyTestGlobs.value;
            };
            return Spago_Config.NoTestGlobs.value;
        })();
        return bind(map1(fold)(traverse(compileGlob)(Spago_Config.sourceGlob(withTestGlobs)(v1.value0)(v1.value1))))(function (v2) {
            return pure(map(function (p) {
                return new Data_Tuple.Tuple(p, v1.value0);
            })(v2));
        });
    })))(function (v1) {
        return bind(map1(fromFoldable2)(map1(fold)(traverse(compileGlob)(Spago_Config.sourceGlob(Spago_Config.NoTestGlobs.value)(v["selected"]["package"].name)(new Spago_Config.WorkspacePackage(v.selected))))))(function (v2) {
            return bind(map1(fromFoldable2)(map1(fold)(traverse(compileGlob)(Spago_Config.sourceGlob(Spago_Config.OnlyTestGlobs.value)(v["selected"]["package"].name)(new Spago_Config.WorkspacePackage(v.selected))))))(function (v3) {
                var dependencyTestPackages = mapMaybe(Data_Function["const"](new Data_Maybe.Just(Data_Map_Internal.empty)))(union(declaredDependencies)(declaredTestDependencies));
                var dependencyPackages = mapMaybe(Data_Function["const"](new Data_Maybe.Just(Data_Map_Internal.empty)))(declaredDependencies);
                var addPackageInfo = function (pkgGraph) {
                    return function (v4) {
                        var newVal = bind1(lookup(v4.value1.path)(v1))(function ($$package) {
                            return pure1({
                                path: v4.value1.path,
                                depends: v4.value1.depends,
                                "package": $$package
                            });
                        });
                        return Data_Maybe.maybe(pkgGraph)(function (v5) {
                            return insert1(v4.value0)(v5)(pkgGraph);
                        })(newVal);
                    };
                };
                var packageGraph = foldl(addPackageInfo)(Data_Map_Internal.empty)(toUnfoldable1(v.graph));
                var projectGraph = filterWithKey(function (v4) {
                    return function (v5) {
                        return member(v5.path)(v2);
                    };
                })(packageGraph);
                var projectTestsGraph = filterWithKey(function (v4) {
                    return function (v5) {
                        return member(v5.path)(v3);
                    };
                })(packageGraph);
                var accumulateImported = function (importedPkgs$prime) {
                    return function (v4) {
                        var accumulateDep = function (importedPkgs) {
                            return function (importedModule) {
                                var v5 = lookup(importedModule)(packageGraph);
                                if (v5 instanceof Data_Maybe.Nothing) {
                                    return importedPkgs;
                                };
                                if (v5 instanceof Data_Maybe.Just && eq(v5["value0"]["package"])(v["selected"]["package"].name)) {
                                    return importedPkgs;
                                };
                                if (v5 instanceof Data_Maybe.Just && eq(v5["value0"]["package"])(testPackageName)) {
                                    return importedPkgs;
                                };
                                if (v5 instanceof Data_Maybe.Just) {
                                    return alter(function (v6) {
                                        if (v6 instanceof Data_Maybe.Nothing) {
                                            return new Data_Maybe.Just(Data_Map_Internal.singleton(v4.value0)(Data_Set.singleton(importedModule)));
                                        };
                                        if (v6 instanceof Data_Maybe.Just) {
                                            return new Data_Maybe.Just(alter1(function (v7) {
                                                if (v7 instanceof Data_Maybe.Nothing) {
                                                    return new Data_Maybe.Just(Data_Set.singleton(importedModule));
                                                };
                                                if (v7 instanceof Data_Maybe.Just) {
                                                    return new Data_Maybe.Just(insert2(importedModule)(v7.value0));
                                                };
                                                throw new Error("Failed pattern match at Spago.Purs.Graph (line 123, column 21 - line 125, column 71): " + [ v7.constructor.name ]);
                                            })(v4.value0)(v6.value0));
                                        };
                                        throw new Error("Failed pattern match at Spago.Purs.Graph (line 120, column 15 - line 128, column 20): " + [ v6.constructor.name ]);
                                    })(v5["value0"]["package"])(importedPkgs);
                                };
                                throw new Error("Failed pattern match at Spago.Purs.Graph (line 114, column 53 - line 131, column 25): " + [ v5.constructor.name ]);
                            };
                        };
                        return foldl(accumulateDep)(importedPkgs$prime)(v4.value1.depends);
                    };
                };
                var importedPackages = foldl(accumulateImported)(Data_Map_Internal.empty)(toUnfoldable1(projectGraph));
                var transitive = difference(importedPackages)(dependencyPackages);
                var unused = Data_Map.keys(difference(dependencyPackages)(importedPackages));
                var importedTestPackages = foldl(accumulateImported)(Data_Map_Internal.empty)(toUnfoldable1(projectTestsGraph));
                var transitiveTest = (function () {
                    var $120 = Data_Set.isEmpty(v3);
                    if ($120) {
                        return Data_Map_Internal.empty;
                    };
                    return difference(importedTestPackages)(dependencyTestPackages);
                })();
                var unusedTest = (function () {
                    var $121 = Data_Set.isEmpty(v3);
                    if ($121) {
                        return Data_Set.empty;
                    };
                    return Data_Map.keys(difference(difference(dependencyTestPackages)(dependencyPackages))(importedTestPackages));
                })();
                return pure({
                    unused: unused,
                    transitive: transitive,
                    unusedTest: unusedTest,
                    transitiveTest: transitiveTest
                });
            });
        });
    });
});
var runGraphCheck = function (selected) {
    return function (globs) {
        return function (pursArgs) {
            return bind(ask)(function (env) {
                return bind(Spago_Purs.graph(globs)(pursArgs))(function (maybeGraph) {
                    if (maybeGraph instanceof Data_Either.Left) {
                        return discard(logWarn("Could not decode the output of `purs graph`, error: " + Data_Codec_Argonaut.printJsonDecodeError(maybeGraph.value0)))(function () {
                            return pure([  ]);
                        });
                    };
                    if (maybeGraph instanceof Data_Either.Right) {
                        return bind(runSpago(union1({
                            graph: maybeGraph.value0,
                            selected: selected
                        })(env))(checkImports))(function (v) {
                            var result = append1((function () {
                                var $128 = Data_Set.isEmpty(v.unused);
                                if ($128) {
                                    return [  ];
                                };
                                return [ unusedError(false)(selected)(v.unused) ];
                            })())(append1((function () {
                                var $129 = Data_Map_Internal.isEmpty(v.transitive);
                                if ($129) {
                                    return [  ];
                                };
                                return [ transitiveError(false)(selected)(v.transitive) ];
                            })())(append1((function () {
                                var $130 = Data_Set.isEmpty(v.unusedTest);
                                if ($130) {
                                    return [  ];
                                };
                                return [ unusedError(true)(selected)(v.unusedTest) ];
                            })())((function () {
                                var $131 = Data_Map_Internal.isEmpty(v.transitiveTest);
                                if ($131) {
                                    return [  ];
                                };
                                return [ transitiveError(true)(selected)(v.transitiveTest) ];
                            })())));
                            return pure(result);
                        });
                    };
                    throw new Error("Failed pattern match at Spago.Purs.Graph (line 161, column 3 - line 175, column 18): " + [ maybeGraph.constructor.name ]);
                });
            });
        };
    };
};
export {
    checkImports,
    runGraphCheck
};
