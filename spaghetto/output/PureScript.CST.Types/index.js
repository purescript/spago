// Generated by purs version 0.15.10
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
var ASCII = /* #__PURE__ */ (function () {
    function ASCII() {

    };
    ASCII.value = new ASCII();
    return ASCII;
})();
var Unicode = /* #__PURE__ */ (function () {
    function Unicode() {

    };
    Unicode.value = new Unicode();
    return Unicode;
})();
var Nominal = /* #__PURE__ */ (function () {
    function Nominal() {

    };
    Nominal.value = new Nominal();
    return Nominal;
})();
var Representational = /* #__PURE__ */ (function () {
    function Representational() {

    };
    Representational.value = new Representational();
    return Representational;
})();
var Phantom = /* #__PURE__ */ (function () {
    function Phantom() {

    };
    Phantom.value = new Phantom();
    return Phantom;
})();
var Proper = function (x) {
    return x;
};
var Operator = function (x) {
    return x;
};
var ModuleName = function (x) {
    return x;
};
var LF = /* #__PURE__ */ (function () {
    function LF() {

    };
    LF.value = new LF();
    return LF;
})();
var CRLF = /* #__PURE__ */ (function () {
    function CRLF() {

    };
    CRLF.value = new CRLF();
    return CRLF;
})();
var Label = function (x) {
    return x;
};
var SmallInt = /* #__PURE__ */ (function () {
    function SmallInt(value0) {
        this.value0 = value0;
    };
    SmallInt.create = function (value0) {
        return new SmallInt(value0);
    };
    return SmallInt;
})();
var BigInt = /* #__PURE__ */ (function () {
    function BigInt(value0) {
        this.value0 = value0;
    };
    BigInt.create = function (value0) {
        return new BigInt(value0);
    };
    return BigInt;
})();
var BigHex = /* #__PURE__ */ (function () {
    function BigHex(value0) {
        this.value0 = value0;
    };
    BigHex.create = function (value0) {
        return new BigHex(value0);
    };
    return BigHex;
})();
var TokLeftParen = /* #__PURE__ */ (function () {
    function TokLeftParen() {

    };
    TokLeftParen.value = new TokLeftParen();
    return TokLeftParen;
})();
var TokRightParen = /* #__PURE__ */ (function () {
    function TokRightParen() {

    };
    TokRightParen.value = new TokRightParen();
    return TokRightParen;
})();
var TokLeftBrace = /* #__PURE__ */ (function () {
    function TokLeftBrace() {

    };
    TokLeftBrace.value = new TokLeftBrace();
    return TokLeftBrace;
})();
var TokRightBrace = /* #__PURE__ */ (function () {
    function TokRightBrace() {

    };
    TokRightBrace.value = new TokRightBrace();
    return TokRightBrace;
})();
var TokLeftSquare = /* #__PURE__ */ (function () {
    function TokLeftSquare() {

    };
    TokLeftSquare.value = new TokLeftSquare();
    return TokLeftSquare;
})();
var TokRightSquare = /* #__PURE__ */ (function () {
    function TokRightSquare() {

    };
    TokRightSquare.value = new TokRightSquare();
    return TokRightSquare;
})();
var TokLeftArrow = /* #__PURE__ */ (function () {
    function TokLeftArrow(value0) {
        this.value0 = value0;
    };
    TokLeftArrow.create = function (value0) {
        return new TokLeftArrow(value0);
    };
    return TokLeftArrow;
})();
var TokRightArrow = /* #__PURE__ */ (function () {
    function TokRightArrow(value0) {
        this.value0 = value0;
    };
    TokRightArrow.create = function (value0) {
        return new TokRightArrow(value0);
    };
    return TokRightArrow;
})();
var TokRightFatArrow = /* #__PURE__ */ (function () {
    function TokRightFatArrow(value0) {
        this.value0 = value0;
    };
    TokRightFatArrow.create = function (value0) {
        return new TokRightFatArrow(value0);
    };
    return TokRightFatArrow;
})();
var TokDoubleColon = /* #__PURE__ */ (function () {
    function TokDoubleColon(value0) {
        this.value0 = value0;
    };
    TokDoubleColon.create = function (value0) {
        return new TokDoubleColon(value0);
    };
    return TokDoubleColon;
})();
var TokForall = /* #__PURE__ */ (function () {
    function TokForall(value0) {
        this.value0 = value0;
    };
    TokForall.create = function (value0) {
        return new TokForall(value0);
    };
    return TokForall;
})();
var TokEquals = /* #__PURE__ */ (function () {
    function TokEquals() {

    };
    TokEquals.value = new TokEquals();
    return TokEquals;
})();
var TokPipe = /* #__PURE__ */ (function () {
    function TokPipe() {

    };
    TokPipe.value = new TokPipe();
    return TokPipe;
})();
var TokTick = /* #__PURE__ */ (function () {
    function TokTick() {

    };
    TokTick.value = new TokTick();
    return TokTick;
})();
var TokDot = /* #__PURE__ */ (function () {
    function TokDot() {

    };
    TokDot.value = new TokDot();
    return TokDot;
})();
var TokComma = /* #__PURE__ */ (function () {
    function TokComma() {

    };
    TokComma.value = new TokComma();
    return TokComma;
})();
var TokUnderscore = /* #__PURE__ */ (function () {
    function TokUnderscore() {

    };
    TokUnderscore.value = new TokUnderscore();
    return TokUnderscore;
})();
var TokBackslash = /* #__PURE__ */ (function () {
    function TokBackslash() {

    };
    TokBackslash.value = new TokBackslash();
    return TokBackslash;
})();
var TokAt = /* #__PURE__ */ (function () {
    function TokAt() {

    };
    TokAt.value = new TokAt();
    return TokAt;
})();
var TokLowerName = /* #__PURE__ */ (function () {
    function TokLowerName(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TokLowerName.create = function (value0) {
        return function (value1) {
            return new TokLowerName(value0, value1);
        };
    };
    return TokLowerName;
})();
var TokUpperName = /* #__PURE__ */ (function () {
    function TokUpperName(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TokUpperName.create = function (value0) {
        return function (value1) {
            return new TokUpperName(value0, value1);
        };
    };
    return TokUpperName;
})();
var TokOperator = /* #__PURE__ */ (function () {
    function TokOperator(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TokOperator.create = function (value0) {
        return function (value1) {
            return new TokOperator(value0, value1);
        };
    };
    return TokOperator;
})();
var TokSymbolName = /* #__PURE__ */ (function () {
    function TokSymbolName(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TokSymbolName.create = function (value0) {
        return function (value1) {
            return new TokSymbolName(value0, value1);
        };
    };
    return TokSymbolName;
})();
var TokSymbolArrow = /* #__PURE__ */ (function () {
    function TokSymbolArrow(value0) {
        this.value0 = value0;
    };
    TokSymbolArrow.create = function (value0) {
        return new TokSymbolArrow(value0);
    };
    return TokSymbolArrow;
})();
var TokHole = /* #__PURE__ */ (function () {
    function TokHole(value0) {
        this.value0 = value0;
    };
    TokHole.create = function (value0) {
        return new TokHole(value0);
    };
    return TokHole;
})();
var TokChar = /* #__PURE__ */ (function () {
    function TokChar(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TokChar.create = function (value0) {
        return function (value1) {
            return new TokChar(value0, value1);
        };
    };
    return TokChar;
})();
var TokString = /* #__PURE__ */ (function () {
    function TokString(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TokString.create = function (value0) {
        return function (value1) {
            return new TokString(value0, value1);
        };
    };
    return TokString;
})();
var TokRawString = /* #__PURE__ */ (function () {
    function TokRawString(value0) {
        this.value0 = value0;
    };
    TokRawString.create = function (value0) {
        return new TokRawString(value0);
    };
    return TokRawString;
})();
var TokInt = /* #__PURE__ */ (function () {
    function TokInt(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TokInt.create = function (value0) {
        return function (value1) {
            return new TokInt(value0, value1);
        };
    };
    return TokInt;
})();
var TokNumber = /* #__PURE__ */ (function () {
    function TokNumber(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TokNumber.create = function (value0) {
        return function (value1) {
            return new TokNumber(value0, value1);
        };
    };
    return TokNumber;
})();
var TokLayoutStart = /* #__PURE__ */ (function () {
    function TokLayoutStart(value0) {
        this.value0 = value0;
    };
    TokLayoutStart.create = function (value0) {
        return new TokLayoutStart(value0);
    };
    return TokLayoutStart;
})();
var TokLayoutSep = /* #__PURE__ */ (function () {
    function TokLayoutSep(value0) {
        this.value0 = value0;
    };
    TokLayoutSep.create = function (value0) {
        return new TokLayoutSep(value0);
    };
    return TokLayoutSep;
})();
var TokLayoutEnd = /* #__PURE__ */ (function () {
    function TokLayoutEnd(value0) {
        this.value0 = value0;
    };
    TokLayoutEnd.create = function (value0) {
        return new TokLayoutEnd(value0);
    };
    return TokLayoutEnd;
})();
var Ident = function (x) {
    return x;
};
var Infix = /* #__PURE__ */ (function () {
    function Infix() {

    };
    Infix.value = new Infix();
    return Infix;
})();
var Infixl = /* #__PURE__ */ (function () {
    function Infixl() {

    };
    Infixl.value = new Infixl();
    return Infixl;
})();
var Infixr = /* #__PURE__ */ (function () {
    function Infixr() {

    };
    Infixr.value = new Infixr();
    return Infixr;
})();
var Comment = /* #__PURE__ */ (function () {
    function Comment(value0) {
        this.value0 = value0;
    };
    Comment.create = function (value0) {
        return new Comment(value0);
    };
    return Comment;
})();
var Space = /* #__PURE__ */ (function () {
    function Space(value0) {
        this.value0 = value0;
    };
    Space.create = function (value0) {
        return new Space(value0);
    };
    return Space;
})();
var Line = /* #__PURE__ */ (function () {
    function Line(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Line.create = function (value0) {
        return function (value1) {
            return new Line(value0, value1);
        };
    };
    return Line;
})();
var Labeled = function (x) {
    return x;
};
var Name = function (x) {
    return x;
};
var QualifiedName = function (x) {
    return x;
};
var FixityValue = /* #__PURE__ */ (function () {
    function FixityValue(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    FixityValue.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new FixityValue(value0, value1, value2);
            };
        };
    };
    return FixityValue;
})();
var FixityType = /* #__PURE__ */ (function () {
    function FixityType(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    FixityType.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new FixityType(value0, value1, value2, value3);
                };
            };
        };
    };
    return FixityType;
})();
var RecordPun = /* #__PURE__ */ (function () {
    function RecordPun(value0) {
        this.value0 = value0;
    };
    RecordPun.create = function (value0) {
        return new RecordPun(value0);
    };
    return RecordPun;
})();
var RecordField = /* #__PURE__ */ (function () {
    function RecordField(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    RecordField.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new RecordField(value0, value1, value2);
            };
        };
    };
    return RecordField;
})();
var Separated = function (x) {
    return x;
};
var Wrapped = function (x) {
    return x;
};
var DataAll = /* #__PURE__ */ (function () {
    function DataAll(value0) {
        this.value0 = value0;
    };
    DataAll.create = function (value0) {
        return new DataAll(value0);
    };
    return DataAll;
})();
var DataEnumerated = /* #__PURE__ */ (function () {
    function DataEnumerated(value0) {
        this.value0 = value0;
    };
    DataEnumerated.create = function (value0) {
        return new DataEnumerated(value0);
    };
    return DataEnumerated;
})();
var ExportValue = /* #__PURE__ */ (function () {
    function ExportValue(value0) {
        this.value0 = value0;
    };
    ExportValue.create = function (value0) {
        return new ExportValue(value0);
    };
    return ExportValue;
})();
var ExportOp = /* #__PURE__ */ (function () {
    function ExportOp(value0) {
        this.value0 = value0;
    };
    ExportOp.create = function (value0) {
        return new ExportOp(value0);
    };
    return ExportOp;
})();
var ExportType = /* #__PURE__ */ (function () {
    function ExportType(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExportType.create = function (value0) {
        return function (value1) {
            return new ExportType(value0, value1);
        };
    };
    return ExportType;
})();
var ExportTypeOp = /* #__PURE__ */ (function () {
    function ExportTypeOp(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExportTypeOp.create = function (value0) {
        return function (value1) {
            return new ExportTypeOp(value0, value1);
        };
    };
    return ExportTypeOp;
})();
var ExportClass = /* #__PURE__ */ (function () {
    function ExportClass(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExportClass.create = function (value0) {
        return function (value1) {
            return new ExportClass(value0, value1);
        };
    };
    return ExportClass;
})();
var ExportModule = /* #__PURE__ */ (function () {
    function ExportModule(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExportModule.create = function (value0) {
        return function (value1) {
            return new ExportModule(value0, value1);
        };
    };
    return ExportModule;
})();
var ExportError = /* #__PURE__ */ (function () {
    function ExportError(value0) {
        this.value0 = value0;
    };
    ExportError.create = function (value0) {
        return new ExportError(value0);
    };
    return ExportError;
})();
var ImportValue = /* #__PURE__ */ (function () {
    function ImportValue(value0) {
        this.value0 = value0;
    };
    ImportValue.create = function (value0) {
        return new ImportValue(value0);
    };
    return ImportValue;
})();
var ImportOp = /* #__PURE__ */ (function () {
    function ImportOp(value0) {
        this.value0 = value0;
    };
    ImportOp.create = function (value0) {
        return new ImportOp(value0);
    };
    return ImportOp;
})();
var ImportType = /* #__PURE__ */ (function () {
    function ImportType(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ImportType.create = function (value0) {
        return function (value1) {
            return new ImportType(value0, value1);
        };
    };
    return ImportType;
})();
var ImportTypeOp = /* #__PURE__ */ (function () {
    function ImportTypeOp(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ImportTypeOp.create = function (value0) {
        return function (value1) {
            return new ImportTypeOp(value0, value1);
        };
    };
    return ImportTypeOp;
})();
var ImportClass = /* #__PURE__ */ (function () {
    function ImportClass(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ImportClass.create = function (value0) {
        return function (value1) {
            return new ImportClass(value0, value1);
        };
    };
    return ImportClass;
})();
var ImportError = /* #__PURE__ */ (function () {
    function ImportError(value0) {
        this.value0 = value0;
    };
    ImportError.create = function (value0) {
        return new ImportError(value0);
    };
    return ImportError;
})();
var ImportDecl = function (x) {
    return x;
};
var ModuleHeader = function (x) {
    return x;
};
var One = /* #__PURE__ */ (function () {
    function One(value0) {
        this.value0 = value0;
    };
    One.create = function (value0) {
        return new One(value0);
    };
    return One;
})();
var Many = /* #__PURE__ */ (function () {
    function Many(value0) {
        this.value0 = value0;
    };
    Many.create = function (value0) {
        return new Many(value0);
    };
    return Many;
})();
var TypeVarKinded = /* #__PURE__ */ (function () {
    function TypeVarKinded(value0) {
        this.value0 = value0;
    };
    TypeVarKinded.create = function (value0) {
        return new TypeVarKinded(value0);
    };
    return TypeVarKinded;
})();
var TypeVarName = /* #__PURE__ */ (function () {
    function TypeVarName(value0) {
        this.value0 = value0;
    };
    TypeVarName.create = function (value0) {
        return new TypeVarName(value0);
    };
    return TypeVarName;
})();
var TypeVar = /* #__PURE__ */ (function () {
    function TypeVar(value0) {
        this.value0 = value0;
    };
    TypeVar.create = function (value0) {
        return new TypeVar(value0);
    };
    return TypeVar;
})();
var TypeConstructor = /* #__PURE__ */ (function () {
    function TypeConstructor(value0) {
        this.value0 = value0;
    };
    TypeConstructor.create = function (value0) {
        return new TypeConstructor(value0);
    };
    return TypeConstructor;
})();
var TypeWildcard = /* #__PURE__ */ (function () {
    function TypeWildcard(value0) {
        this.value0 = value0;
    };
    TypeWildcard.create = function (value0) {
        return new TypeWildcard(value0);
    };
    return TypeWildcard;
})();
var TypeHole = /* #__PURE__ */ (function () {
    function TypeHole(value0) {
        this.value0 = value0;
    };
    TypeHole.create = function (value0) {
        return new TypeHole(value0);
    };
    return TypeHole;
})();
var TypeString = /* #__PURE__ */ (function () {
    function TypeString(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TypeString.create = function (value0) {
        return function (value1) {
            return new TypeString(value0, value1);
        };
    };
    return TypeString;
})();
var TypeInt = /* #__PURE__ */ (function () {
    function TypeInt(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TypeInt.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TypeInt(value0, value1, value2);
            };
        };
    };
    return TypeInt;
})();
var TypeRow = /* #__PURE__ */ (function () {
    function TypeRow(value0) {
        this.value0 = value0;
    };
    TypeRow.create = function (value0) {
        return new TypeRow(value0);
    };
    return TypeRow;
})();
var TypeRecord = /* #__PURE__ */ (function () {
    function TypeRecord(value0) {
        this.value0 = value0;
    };
    TypeRecord.create = function (value0) {
        return new TypeRecord(value0);
    };
    return TypeRecord;
})();
var TypeForall = /* #__PURE__ */ (function () {
    function TypeForall(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    TypeForall.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new TypeForall(value0, value1, value2, value3);
                };
            };
        };
    };
    return TypeForall;
})();
var TypeKinded = /* #__PURE__ */ (function () {
    function TypeKinded(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TypeKinded.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TypeKinded(value0, value1, value2);
            };
        };
    };
    return TypeKinded;
})();
var TypeApp = /* #__PURE__ */ (function () {
    function TypeApp(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TypeApp.create = function (value0) {
        return function (value1) {
            return new TypeApp(value0, value1);
        };
    };
    return TypeApp;
})();
var TypeOp = /* #__PURE__ */ (function () {
    function TypeOp(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TypeOp.create = function (value0) {
        return function (value1) {
            return new TypeOp(value0, value1);
        };
    };
    return TypeOp;
})();
var TypeOpName = /* #__PURE__ */ (function () {
    function TypeOpName(value0) {
        this.value0 = value0;
    };
    TypeOpName.create = function (value0) {
        return new TypeOpName(value0);
    };
    return TypeOpName;
})();
var TypeArrow = /* #__PURE__ */ (function () {
    function TypeArrow(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TypeArrow.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TypeArrow(value0, value1, value2);
            };
        };
    };
    return TypeArrow;
})();
var TypeArrowName = /* #__PURE__ */ (function () {
    function TypeArrowName(value0) {
        this.value0 = value0;
    };
    TypeArrowName.create = function (value0) {
        return new TypeArrowName(value0);
    };
    return TypeArrowName;
})();
var TypeConstrained = /* #__PURE__ */ (function () {
    function TypeConstrained(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TypeConstrained.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TypeConstrained(value0, value1, value2);
            };
        };
    };
    return TypeConstrained;
})();
var TypeParens = /* #__PURE__ */ (function () {
    function TypeParens(value0) {
        this.value0 = value0;
    };
    TypeParens.create = function (value0) {
        return new TypeParens(value0);
    };
    return TypeParens;
})();
var $$TypeError = /* #__PURE__ */ (function () {
    function $$TypeError(value0) {
        this.value0 = value0;
    };
    $$TypeError.create = function (value0) {
        return new $$TypeError(value0);
    };
    return $$TypeError;
})();
var Row = function (x) {
    return x;
};
var DataCtor = function (x) {
    return x;
};
var ForeignValue = /* #__PURE__ */ (function () {
    function ForeignValue(value0) {
        this.value0 = value0;
    };
    ForeignValue.create = function (value0) {
        return new ForeignValue(value0);
    };
    return ForeignValue;
})();
var ForeignData = /* #__PURE__ */ (function () {
    function ForeignData(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ForeignData.create = function (value0) {
        return function (value1) {
            return new ForeignData(value0, value1);
        };
    };
    return ForeignData;
})();
var ForeignKind = /* #__PURE__ */ (function () {
    function ForeignKind(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ForeignKind.create = function (value0) {
        return function (value1) {
            return new ForeignKind(value0, value1);
        };
    };
    return ForeignKind;
})();
var FundepDetermined = /* #__PURE__ */ (function () {
    function FundepDetermined(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    FundepDetermined.create = function (value0) {
        return function (value1) {
            return new FundepDetermined(value0, value1);
        };
    };
    return FundepDetermined;
})();
var FundepDetermines = /* #__PURE__ */ (function () {
    function FundepDetermines(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    FundepDetermines.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new FundepDetermines(value0, value1, value2);
            };
        };
    };
    return FundepDetermines;
})();
var BinderWildcard = /* #__PURE__ */ (function () {
    function BinderWildcard(value0) {
        this.value0 = value0;
    };
    BinderWildcard.create = function (value0) {
        return new BinderWildcard(value0);
    };
    return BinderWildcard;
})();
var BinderVar = /* #__PURE__ */ (function () {
    function BinderVar(value0) {
        this.value0 = value0;
    };
    BinderVar.create = function (value0) {
        return new BinderVar(value0);
    };
    return BinderVar;
})();
var BinderNamed = /* #__PURE__ */ (function () {
    function BinderNamed(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    BinderNamed.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new BinderNamed(value0, value1, value2);
            };
        };
    };
    return BinderNamed;
})();
var BinderConstructor = /* #__PURE__ */ (function () {
    function BinderConstructor(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    BinderConstructor.create = function (value0) {
        return function (value1) {
            return new BinderConstructor(value0, value1);
        };
    };
    return BinderConstructor;
})();
var BinderBoolean = /* #__PURE__ */ (function () {
    function BinderBoolean(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    BinderBoolean.create = function (value0) {
        return function (value1) {
            return new BinderBoolean(value0, value1);
        };
    };
    return BinderBoolean;
})();
var BinderChar = /* #__PURE__ */ (function () {
    function BinderChar(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    BinderChar.create = function (value0) {
        return function (value1) {
            return new BinderChar(value0, value1);
        };
    };
    return BinderChar;
})();
var BinderString = /* #__PURE__ */ (function () {
    function BinderString(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    BinderString.create = function (value0) {
        return function (value1) {
            return new BinderString(value0, value1);
        };
    };
    return BinderString;
})();
var BinderInt = /* #__PURE__ */ (function () {
    function BinderInt(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    BinderInt.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new BinderInt(value0, value1, value2);
            };
        };
    };
    return BinderInt;
})();
var BinderNumber = /* #__PURE__ */ (function () {
    function BinderNumber(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    BinderNumber.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new BinderNumber(value0, value1, value2);
            };
        };
    };
    return BinderNumber;
})();
var BinderArray = /* #__PURE__ */ (function () {
    function BinderArray(value0) {
        this.value0 = value0;
    };
    BinderArray.create = function (value0) {
        return new BinderArray(value0);
    };
    return BinderArray;
})();
var BinderRecord = /* #__PURE__ */ (function () {
    function BinderRecord(value0) {
        this.value0 = value0;
    };
    BinderRecord.create = function (value0) {
        return new BinderRecord(value0);
    };
    return BinderRecord;
})();
var BinderParens = /* #__PURE__ */ (function () {
    function BinderParens(value0) {
        this.value0 = value0;
    };
    BinderParens.create = function (value0) {
        return new BinderParens(value0);
    };
    return BinderParens;
})();
var BinderTyped = /* #__PURE__ */ (function () {
    function BinderTyped(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    BinderTyped.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new BinderTyped(value0, value1, value2);
            };
        };
    };
    return BinderTyped;
})();
var BinderOp = /* #__PURE__ */ (function () {
    function BinderOp(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    BinderOp.create = function (value0) {
        return function (value1) {
            return new BinderOp(value0, value1);
        };
    };
    return BinderOp;
})();
var BinderError = /* #__PURE__ */ (function () {
    function BinderError(value0) {
        this.value0 = value0;
    };
    BinderError.create = function (value0) {
        return new BinderError(value0);
    };
    return BinderError;
})();
var DoLet = /* #__PURE__ */ (function () {
    function DoLet(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DoLet.create = function (value0) {
        return function (value1) {
            return new DoLet(value0, value1);
        };
    };
    return DoLet;
})();
var DoDiscard = /* #__PURE__ */ (function () {
    function DoDiscard(value0) {
        this.value0 = value0;
    };
    DoDiscard.create = function (value0) {
        return new DoDiscard(value0);
    };
    return DoDiscard;
})();
var DoBind = /* #__PURE__ */ (function () {
    function DoBind(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    DoBind.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new DoBind(value0, value1, value2);
            };
        };
    };
    return DoBind;
})();
var DoError = /* #__PURE__ */ (function () {
    function DoError(value0) {
        this.value0 = value0;
    };
    DoError.create = function (value0) {
        return new DoError(value0);
    };
    return DoError;
})();
var LetBindingSignature = /* #__PURE__ */ (function () {
    function LetBindingSignature(value0) {
        this.value0 = value0;
    };
    LetBindingSignature.create = function (value0) {
        return new LetBindingSignature(value0);
    };
    return LetBindingSignature;
})();
var LetBindingName = /* #__PURE__ */ (function () {
    function LetBindingName(value0) {
        this.value0 = value0;
    };
    LetBindingName.create = function (value0) {
        return new LetBindingName(value0);
    };
    return LetBindingName;
})();
var LetBindingPattern = /* #__PURE__ */ (function () {
    function LetBindingPattern(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    LetBindingPattern.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new LetBindingPattern(value0, value1, value2);
            };
        };
    };
    return LetBindingPattern;
})();
var LetBindingError = /* #__PURE__ */ (function () {
    function LetBindingError(value0) {
        this.value0 = value0;
    };
    LetBindingError.create = function (value0) {
        return new LetBindingError(value0);
    };
    return LetBindingError;
})();
var Unconditional = /* #__PURE__ */ (function () {
    function Unconditional(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Unconditional.create = function (value0) {
        return function (value1) {
            return new Unconditional(value0, value1);
        };
    };
    return Unconditional;
})();
var Guarded = /* #__PURE__ */ (function () {
    function Guarded(value0) {
        this.value0 = value0;
    };
    Guarded.create = function (value0) {
        return new Guarded(value0);
    };
    return Guarded;
})();
var Where = function (x) {
    return x;
};
var ExprHole = /* #__PURE__ */ (function () {
    function ExprHole(value0) {
        this.value0 = value0;
    };
    ExprHole.create = function (value0) {
        return new ExprHole(value0);
    };
    return ExprHole;
})();
var ExprSection = /* #__PURE__ */ (function () {
    function ExprSection(value0) {
        this.value0 = value0;
    };
    ExprSection.create = function (value0) {
        return new ExprSection(value0);
    };
    return ExprSection;
})();
var ExprIdent = /* #__PURE__ */ (function () {
    function ExprIdent(value0) {
        this.value0 = value0;
    };
    ExprIdent.create = function (value0) {
        return new ExprIdent(value0);
    };
    return ExprIdent;
})();
var ExprConstructor = /* #__PURE__ */ (function () {
    function ExprConstructor(value0) {
        this.value0 = value0;
    };
    ExprConstructor.create = function (value0) {
        return new ExprConstructor(value0);
    };
    return ExprConstructor;
})();
var ExprBoolean = /* #__PURE__ */ (function () {
    function ExprBoolean(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExprBoolean.create = function (value0) {
        return function (value1) {
            return new ExprBoolean(value0, value1);
        };
    };
    return ExprBoolean;
})();
var ExprChar = /* #__PURE__ */ (function () {
    function ExprChar(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExprChar.create = function (value0) {
        return function (value1) {
            return new ExprChar(value0, value1);
        };
    };
    return ExprChar;
})();
var ExprString = /* #__PURE__ */ (function () {
    function ExprString(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExprString.create = function (value0) {
        return function (value1) {
            return new ExprString(value0, value1);
        };
    };
    return ExprString;
})();
var ExprInt = /* #__PURE__ */ (function () {
    function ExprInt(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExprInt.create = function (value0) {
        return function (value1) {
            return new ExprInt(value0, value1);
        };
    };
    return ExprInt;
})();
var ExprNumber = /* #__PURE__ */ (function () {
    function ExprNumber(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExprNumber.create = function (value0) {
        return function (value1) {
            return new ExprNumber(value0, value1);
        };
    };
    return ExprNumber;
})();
var ExprArray = /* #__PURE__ */ (function () {
    function ExprArray(value0) {
        this.value0 = value0;
    };
    ExprArray.create = function (value0) {
        return new ExprArray(value0);
    };
    return ExprArray;
})();
var ExprRecord = /* #__PURE__ */ (function () {
    function ExprRecord(value0) {
        this.value0 = value0;
    };
    ExprRecord.create = function (value0) {
        return new ExprRecord(value0);
    };
    return ExprRecord;
})();
var ExprParens = /* #__PURE__ */ (function () {
    function ExprParens(value0) {
        this.value0 = value0;
    };
    ExprParens.create = function (value0) {
        return new ExprParens(value0);
    };
    return ExprParens;
})();
var ExprTyped = /* #__PURE__ */ (function () {
    function ExprTyped(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    ExprTyped.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new ExprTyped(value0, value1, value2);
            };
        };
    };
    return ExprTyped;
})();
var ExprInfix = /* #__PURE__ */ (function () {
    function ExprInfix(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExprInfix.create = function (value0) {
        return function (value1) {
            return new ExprInfix(value0, value1);
        };
    };
    return ExprInfix;
})();
var ExprOp = /* #__PURE__ */ (function () {
    function ExprOp(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExprOp.create = function (value0) {
        return function (value1) {
            return new ExprOp(value0, value1);
        };
    };
    return ExprOp;
})();
var ExprOpName = /* #__PURE__ */ (function () {
    function ExprOpName(value0) {
        this.value0 = value0;
    };
    ExprOpName.create = function (value0) {
        return new ExprOpName(value0);
    };
    return ExprOpName;
})();
var ExprNegate = /* #__PURE__ */ (function () {
    function ExprNegate(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExprNegate.create = function (value0) {
        return function (value1) {
            return new ExprNegate(value0, value1);
        };
    };
    return ExprNegate;
})();
var ExprRecordAccessor = /* #__PURE__ */ (function () {
    function ExprRecordAccessor(value0) {
        this.value0 = value0;
    };
    ExprRecordAccessor.create = function (value0) {
        return new ExprRecordAccessor(value0);
    };
    return ExprRecordAccessor;
})();
var ExprRecordUpdate = /* #__PURE__ */ (function () {
    function ExprRecordUpdate(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExprRecordUpdate.create = function (value0) {
        return function (value1) {
            return new ExprRecordUpdate(value0, value1);
        };
    };
    return ExprRecordUpdate;
})();
var ExprApp = /* #__PURE__ */ (function () {
    function ExprApp(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExprApp.create = function (value0) {
        return function (value1) {
            return new ExprApp(value0, value1);
        };
    };
    return ExprApp;
})();
var ExprLambda = /* #__PURE__ */ (function () {
    function ExprLambda(value0) {
        this.value0 = value0;
    };
    ExprLambda.create = function (value0) {
        return new ExprLambda(value0);
    };
    return ExprLambda;
})();
var ExprIf = /* #__PURE__ */ (function () {
    function ExprIf(value0) {
        this.value0 = value0;
    };
    ExprIf.create = function (value0) {
        return new ExprIf(value0);
    };
    return ExprIf;
})();
var ExprCase = /* #__PURE__ */ (function () {
    function ExprCase(value0) {
        this.value0 = value0;
    };
    ExprCase.create = function (value0) {
        return new ExprCase(value0);
    };
    return ExprCase;
})();
var ExprLet = /* #__PURE__ */ (function () {
    function ExprLet(value0) {
        this.value0 = value0;
    };
    ExprLet.create = function (value0) {
        return new ExprLet(value0);
    };
    return ExprLet;
})();
var ExprDo = /* #__PURE__ */ (function () {
    function ExprDo(value0) {
        this.value0 = value0;
    };
    ExprDo.create = function (value0) {
        return new ExprDo(value0);
    };
    return ExprDo;
})();
var ExprAdo = /* #__PURE__ */ (function () {
    function ExprAdo(value0) {
        this.value0 = value0;
    };
    ExprAdo.create = function (value0) {
        return new ExprAdo(value0);
    };
    return ExprAdo;
})();
var ExprError = /* #__PURE__ */ (function () {
    function ExprError(value0) {
        this.value0 = value0;
    };
    ExprError.create = function (value0) {
        return new ExprError(value0);
    };
    return ExprError;
})();
var RecordUpdateLeaf = /* #__PURE__ */ (function () {
    function RecordUpdateLeaf(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    RecordUpdateLeaf.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new RecordUpdateLeaf(value0, value1, value2);
            };
        };
    };
    return RecordUpdateLeaf;
})();
var RecordUpdateBranch = /* #__PURE__ */ (function () {
    function RecordUpdateBranch(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    RecordUpdateBranch.create = function (value0) {
        return function (value1) {
            return new RecordUpdateBranch(value0, value1);
        };
    };
    return RecordUpdateBranch;
})();
var GuardedExpr = function (x) {
    return x;
};
var PatternGuard = function (x) {
    return x;
};
var InstanceBindingSignature = /* #__PURE__ */ (function () {
    function InstanceBindingSignature(value0) {
        this.value0 = value0;
    };
    InstanceBindingSignature.create = function (value0) {
        return new InstanceBindingSignature(value0);
    };
    return InstanceBindingSignature;
})();
var InstanceBindingName = /* #__PURE__ */ (function () {
    function InstanceBindingName(value0) {
        this.value0 = value0;
    };
    InstanceBindingName.create = function (value0) {
        return new InstanceBindingName(value0);
    };
    return InstanceBindingName;
})();
var Instance = function (x) {
    return x;
};
var DeclData = /* #__PURE__ */ (function () {
    function DeclData(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DeclData.create = function (value0) {
        return function (value1) {
            return new DeclData(value0, value1);
        };
    };
    return DeclData;
})();
var DeclType = /* #__PURE__ */ (function () {
    function DeclType(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    DeclType.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new DeclType(value0, value1, value2);
            };
        };
    };
    return DeclType;
})();
var DeclNewtype = /* #__PURE__ */ (function () {
    function DeclNewtype(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    DeclNewtype.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new DeclNewtype(value0, value1, value2, value3);
                };
            };
        };
    };
    return DeclNewtype;
})();
var DeclClass = /* #__PURE__ */ (function () {
    function DeclClass(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DeclClass.create = function (value0) {
        return function (value1) {
            return new DeclClass(value0, value1);
        };
    };
    return DeclClass;
})();
var DeclInstanceChain = /* #__PURE__ */ (function () {
    function DeclInstanceChain(value0) {
        this.value0 = value0;
    };
    DeclInstanceChain.create = function (value0) {
        return new DeclInstanceChain(value0);
    };
    return DeclInstanceChain;
})();
var DeclDerive = /* #__PURE__ */ (function () {
    function DeclDerive(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    DeclDerive.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new DeclDerive(value0, value1, value2);
            };
        };
    };
    return DeclDerive;
})();
var DeclKindSignature = /* #__PURE__ */ (function () {
    function DeclKindSignature(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DeclKindSignature.create = function (value0) {
        return function (value1) {
            return new DeclKindSignature(value0, value1);
        };
    };
    return DeclKindSignature;
})();
var DeclSignature = /* #__PURE__ */ (function () {
    function DeclSignature(value0) {
        this.value0 = value0;
    };
    DeclSignature.create = function (value0) {
        return new DeclSignature(value0);
    };
    return DeclSignature;
})();
var DeclValue = /* #__PURE__ */ (function () {
    function DeclValue(value0) {
        this.value0 = value0;
    };
    DeclValue.create = function (value0) {
        return new DeclValue(value0);
    };
    return DeclValue;
})();
var DeclFixity = /* #__PURE__ */ (function () {
    function DeclFixity(value0) {
        this.value0 = value0;
    };
    DeclFixity.create = function (value0) {
        return new DeclFixity(value0);
    };
    return DeclFixity;
})();
var DeclForeign = /* #__PURE__ */ (function () {
    function DeclForeign(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    DeclForeign.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new DeclForeign(value0, value1, value2);
            };
        };
    };
    return DeclForeign;
})();
var DeclRole = /* #__PURE__ */ (function () {
    function DeclRole(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    DeclRole.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new DeclRole(value0, value1, value2, value3);
                };
            };
        };
    };
    return DeclRole;
})();
var DeclError = /* #__PURE__ */ (function () {
    function DeclError(value0) {
        this.value0 = value0;
    };
    DeclError.create = function (value0) {
        return new DeclError(value0);
    };
    return DeclError;
})();
var ModuleBody = function (x) {
    return x;
};
var Module = function (x) {
    return x;
};
var ordProper = Data_Ord.ordString;
var ordOperator = Data_Ord.ordString;
var ordModuleName = Data_Ord.ordString;
var ordLabel = Data_Ord.ordString;
var ordIdent = Data_Ord.ordString;
var newtypeWrapped = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeWhere = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeSeparated = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeRow = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeQualifiedName = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeProper = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypePatternGuard = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeOperator = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeName = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeModuleName = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeModuleHeader = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeModuleBody = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeModule = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeLabeled = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeLabel = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeInstance = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeImportDecl = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeIdent = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeGuardedExpr = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeDataCtor = {
    Coercible0: function () {
        return undefined;
    }
};
var eqSourceStyle = {
    eq: function (x) {
        return function (y) {
            if (x instanceof ASCII && y instanceof ASCII) {
                return true;
            };
            if (x instanceof Unicode && y instanceof Unicode) {
                return true;
            };
            return false;
        };
    }
};
var eq4 = /* #__PURE__ */ Data_Eq.eq(eqSourceStyle);
var eqProper = Data_Eq.eqString;
var eqOperator = Data_Eq.eqString;
var eqModuleName = Data_Eq.eqString;
var eq5 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Maybe.eqMaybe(eqModuleName));
var eqLabel = Data_Eq.eqString;
var eqIntValue = {
    eq: function (x) {
        return function (y) {
            if (x instanceof SmallInt && y instanceof SmallInt) {
                return x.value0 === y.value0;
            };
            if (x instanceof BigInt && y instanceof BigInt) {
                return x.value0 === y.value0;
            };
            if (x instanceof BigHex && y instanceof BigHex) {
                return x.value0 === y.value0;
            };
            return false;
        };
    }
};
var eq6 = /* #__PURE__ */ Data_Eq.eq(eqIntValue);
var eqToken = {
    eq: function (x) {
        return function (y) {
            if (x instanceof TokLeftParen && y instanceof TokLeftParen) {
                return true;
            };
            if (x instanceof TokRightParen && y instanceof TokRightParen) {
                return true;
            };
            if (x instanceof TokLeftBrace && y instanceof TokLeftBrace) {
                return true;
            };
            if (x instanceof TokRightBrace && y instanceof TokRightBrace) {
                return true;
            };
            if (x instanceof TokLeftSquare && y instanceof TokLeftSquare) {
                return true;
            };
            if (x instanceof TokRightSquare && y instanceof TokRightSquare) {
                return true;
            };
            if (x instanceof TokLeftArrow && y instanceof TokLeftArrow) {
                return eq4(x.value0)(y.value0);
            };
            if (x instanceof TokRightArrow && y instanceof TokRightArrow) {
                return eq4(x.value0)(y.value0);
            };
            if (x instanceof TokRightFatArrow && y instanceof TokRightFatArrow) {
                return eq4(x.value0)(y.value0);
            };
            if (x instanceof TokDoubleColon && y instanceof TokDoubleColon) {
                return eq4(x.value0)(y.value0);
            };
            if (x instanceof TokForall && y instanceof TokForall) {
                return eq4(x.value0)(y.value0);
            };
            if (x instanceof TokEquals && y instanceof TokEquals) {
                return true;
            };
            if (x instanceof TokPipe && y instanceof TokPipe) {
                return true;
            };
            if (x instanceof TokTick && y instanceof TokTick) {
                return true;
            };
            if (x instanceof TokDot && y instanceof TokDot) {
                return true;
            };
            if (x instanceof TokComma && y instanceof TokComma) {
                return true;
            };
            if (x instanceof TokUnderscore && y instanceof TokUnderscore) {
                return true;
            };
            if (x instanceof TokBackslash && y instanceof TokBackslash) {
                return true;
            };
            if (x instanceof TokAt && y instanceof TokAt) {
                return true;
            };
            if (x instanceof TokLowerName && y instanceof TokLowerName) {
                return eq5(x.value0)(y.value0) && x.value1 === y.value1;
            };
            if (x instanceof TokUpperName && y instanceof TokUpperName) {
                return eq5(x.value0)(y.value0) && x.value1 === y.value1;
            };
            if (x instanceof TokOperator && y instanceof TokOperator) {
                return eq5(x.value0)(y.value0) && x.value1 === y.value1;
            };
            if (x instanceof TokSymbolName && y instanceof TokSymbolName) {
                return eq5(x.value0)(y.value0) && x.value1 === y.value1;
            };
            if (x instanceof TokSymbolArrow && y instanceof TokSymbolArrow) {
                return eq4(x.value0)(y.value0);
            };
            if (x instanceof TokHole && y instanceof TokHole) {
                return x.value0 === y.value0;
            };
            if (x instanceof TokChar && y instanceof TokChar) {
                return x.value0 === y.value0 && x.value1 === y.value1;
            };
            if (x instanceof TokString && y instanceof TokString) {
                return x.value0 === y.value0 && x.value1 === y.value1;
            };
            if (x instanceof TokRawString && y instanceof TokRawString) {
                return x.value0 === y.value0;
            };
            if (x instanceof TokInt && y instanceof TokInt) {
                return x.value0 === y.value0 && eq6(x.value1)(y.value1);
            };
            if (x instanceof TokNumber && y instanceof TokNumber) {
                return x.value0 === y.value0 && x.value1 === y.value1;
            };
            if (x instanceof TokLayoutStart && y instanceof TokLayoutStart) {
                return x.value0 === y.value0;
            };
            if (x instanceof TokLayoutSep && y instanceof TokLayoutSep) {
                return x.value0 === y.value0;
            };
            if (x instanceof TokLayoutEnd && y instanceof TokLayoutEnd) {
                return x.value0 === y.value0;
            };
            return false;
        };
    }
};
var eqIdent = Data_Eq.eqString;
export {
    ModuleName,
    Comment,
    Space,
    Line,
    LF,
    CRLF,
    ASCII,
    Unicode,
    SmallInt,
    BigInt,
    BigHex,
    TokLeftParen,
    TokRightParen,
    TokLeftBrace,
    TokRightBrace,
    TokLeftSquare,
    TokRightSquare,
    TokLeftArrow,
    TokRightArrow,
    TokRightFatArrow,
    TokDoubleColon,
    TokForall,
    TokEquals,
    TokPipe,
    TokTick,
    TokDot,
    TokComma,
    TokUnderscore,
    TokBackslash,
    TokAt,
    TokLowerName,
    TokUpperName,
    TokOperator,
    TokSymbolName,
    TokSymbolArrow,
    TokHole,
    TokChar,
    TokString,
    TokRawString,
    TokInt,
    TokNumber,
    TokLayoutStart,
    TokLayoutSep,
    TokLayoutEnd,
    Ident,
    Proper,
    Label,
    Operator,
    Name,
    QualifiedName,
    Wrapped,
    Separated,
    Labeled,
    One,
    Many,
    TypeVar,
    TypeConstructor,
    TypeWildcard,
    TypeHole,
    TypeString,
    TypeInt,
    TypeRow,
    TypeRecord,
    TypeForall,
    TypeKinded,
    TypeApp,
    TypeOp,
    TypeOpName,
    TypeArrow,
    TypeArrowName,
    TypeConstrained,
    TypeParens,
    $$TypeError as TypeError,
    TypeVarKinded,
    TypeVarName,
    Row,
    Module,
    ModuleHeader,
    ModuleBody,
    ExportValue,
    ExportOp,
    ExportType,
    ExportTypeOp,
    ExportClass,
    ExportModule,
    ExportError,
    DataAll,
    DataEnumerated,
    DeclData,
    DeclType,
    DeclNewtype,
    DeclClass,
    DeclInstanceChain,
    DeclDerive,
    DeclKindSignature,
    DeclSignature,
    DeclValue,
    DeclFixity,
    DeclForeign,
    DeclRole,
    DeclError,
    Instance,
    InstanceBindingSignature,
    InstanceBindingName,
    ImportDecl,
    ImportValue,
    ImportOp,
    ImportType,
    ImportTypeOp,
    ImportClass,
    ImportError,
    DataCtor,
    FundepDetermined,
    FundepDetermines,
    Infix,
    Infixl,
    Infixr,
    FixityValue,
    FixityType,
    Unconditional,
    Guarded,
    GuardedExpr,
    PatternGuard,
    ForeignValue,
    ForeignData,
    ForeignKind,
    Nominal,
    Representational,
    Phantom,
    ExprHole,
    ExprSection,
    ExprIdent,
    ExprConstructor,
    ExprBoolean,
    ExprChar,
    ExprString,
    ExprInt,
    ExprNumber,
    ExprArray,
    ExprRecord,
    ExprParens,
    ExprTyped,
    ExprInfix,
    ExprOp,
    ExprOpName,
    ExprNegate,
    ExprRecordAccessor,
    ExprRecordUpdate,
    ExprApp,
    ExprLambda,
    ExprIf,
    ExprCase,
    ExprLet,
    ExprDo,
    ExprAdo,
    ExprError,
    RecordPun,
    RecordField,
    RecordUpdateLeaf,
    RecordUpdateBranch,
    Where,
    LetBindingSignature,
    LetBindingName,
    LetBindingPattern,
    LetBindingError,
    DoLet,
    DoDiscard,
    DoBind,
    DoError,
    BinderWildcard,
    BinderVar,
    BinderNamed,
    BinderConstructor,
    BinderBoolean,
    BinderChar,
    BinderString,
    BinderInt,
    BinderNumber,
    BinderArray,
    BinderRecord,
    BinderParens,
    BinderTyped,
    BinderOp,
    BinderError,
    eqModuleName,
    ordModuleName,
    newtypeModuleName,
    eqSourceStyle,
    eqIntValue,
    eqToken,
    eqIdent,
    ordIdent,
    newtypeIdent,
    eqProper,
    ordProper,
    newtypeProper,
    eqLabel,
    ordLabel,
    newtypeLabel,
    eqOperator,
    ordOperator,
    newtypeOperator,
    newtypeName,
    newtypeQualifiedName,
    newtypeWrapped,
    newtypeSeparated,
    newtypeLabeled,
    newtypeRow,
    newtypeModule,
    newtypeModuleHeader,
    newtypeModuleBody,
    newtypeInstance,
    newtypeImportDecl,
    newtypeDataCtor,
    newtypeGuardedExpr,
    newtypePatternGuard,
    newtypeWhere
};
//# sourceMappingURL=index.js.map
