// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad from "../Control.Monad/index.js";
import * as Data_Argonaut_Core from "../Data.Argonaut.Core/index.js";
import * as Data_Argonaut_Parser from "../Data.Argonaut.Parser/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_NonEmpty from "../Data.Array.NonEmpty/index.js";
import * as Data_Array_NonEmpty_Internal from "../Data.Array.NonEmpty.Internal/index.js";
import * as Data_Bifunctor from "../Data.Bifunctor/index.js";
import * as Data_Codec from "../Data.Codec/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Graph from "../Data.Graph/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_Set_NonEmpty from "../Data.Set.NonEmpty/index.js";
import * as Data_String_CodePoints from "../Data.String.CodePoints/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Node_Encoding from "../Node.Encoding/index.js";
import * as Node_FS_Aff from "../Node.FS.Aff/index.js";
import * as Node_FS_Perms from "../Node.FS.Perms/index.js";
import * as Node_FS_Sync from "../Node.FS.Sync/index.js";
import * as Node_Path from "../Node.Path/index.js";
import * as Partial_Unsafe from "../Partial.Unsafe/index.js";
import * as Registry_Manifest from "../Registry.Manifest/index.js";
import * as Registry_PackageName from "../Registry.PackageName/index.js";
import * as Registry_Version from "../Registry.Version/index.js";
var eq = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Map_Internal.eqMap(Registry_PackageName.eqPackageName)(/* #__PURE__ */ Data_Map_Internal.eqMap(Registry_Version.eqVersion)(Registry_Manifest.eqManifest)));
var fromFoldableWith = /* #__PURE__ */ Data_Map_Internal.fromFoldableWith(Registry_PackageName.ordPackageName)(Data_Set.foldableSet);
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var ordTuple = /* #__PURE__ */ Data_Tuple.ordTuple(Registry_PackageName.ordPackageName);
var map = /* #__PURE__ */ Data_Set.map(/* #__PURE__ */ ordTuple(/* #__PURE__ */ Data_Ord.ordArray(Registry_Version.ordVersion)));
var fromFoldable = /* #__PURE__ */ Data_List.fromFoldable(Data_Foldable.foldableArray);
var bind = /* #__PURE__ */ Control_Bind.bind(Control_Bind.bindArray);
var toUnfoldable = /* #__PURE__ */ Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray);
var lookup1 = /* #__PURE__ */ Data_Map_Internal.lookup(Registry_PackageName.ordPackageName);
var ordTuple1 = /* #__PURE__ */ ordTuple(Registry_Version.ordVersion);
var fromFoldable1 = /* #__PURE__ */ Data_Map_Internal.fromFoldable(ordTuple1)(Data_Foldable.foldableArray);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var fromFoldable2 = /* #__PURE__ */ Data_Array.fromFoldable(Data_Set.foldableSet);
var fromFoldable3 = /* #__PURE__ */ Data_Array.fromFoldable(Data_List_Types.foldableList);
var lookup2 = /* #__PURE__ */ Data_Graph.lookup(ordTuple1);
var topologicalSort1 = /* #__PURE__ */ Data_Graph.topologicalSort(ordTuple1);
var fromFoldable4 = /* #__PURE__ */ Data_Set.fromFoldable(Data_Foldable.foldableArray)(Registry_Manifest.ordManifest);
var toUnfoldableUnordered = /* #__PURE__ */ Data_Map_Internal.toUnfoldableUnordered(Data_Unfoldable.unfoldableArray);
var un = /* #__PURE__ */ Data_Newtype.un();
var fromFoldable5 = /* #__PURE__ */ Data_Array.fromFoldable(Data_Set_NonEmpty.foldableNonEmptySet);
var bind1 = /* #__PURE__ */ Control_Bind.bind(Data_Either.bindEither);
var traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither);
var lmap = /* #__PURE__ */ Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither);
var pure = /* #__PURE__ */ Control_Applicative.pure(Data_Either.applicativeEither);
var map2 = /* #__PURE__ */ Data_Set_NonEmpty.map(Registry_PackageName.ordPackageName);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var fold = /* #__PURE__ */ Data_Array.fold(Data_Monoid.monoidString);
var fromFoldable6 = /* #__PURE__ */ Data_Set_NonEmpty.fromFoldable(Data_Foldable.foldableArray)(Registry_Manifest.ordManifest);
var notEq = /* #__PURE__ */ Data_Eq.notEq(Registry_Version.eqVersion);
var bind2 = /* #__PURE__ */ Control_Bind.bind(Data_Maybe.bindMaybe);
var lookup3 = /* #__PURE__ */ Data_Map_Internal.lookup(Registry_Version.ordVersion);
var fromFoldable11 = /* #__PURE__ */ Data_Set_NonEmpty.fromFoldable1(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)(Registry_Manifest.ordManifest);
var insert1 = /* #__PURE__ */ Data_Set_NonEmpty.insert(Registry_Manifest.ordManifest);
var eq1 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Set_NonEmpty.eqNonEmptySet(Registry_Manifest.eqManifest));
var fromFoldable7 = /* #__PURE__ */ Data_Map_Internal.fromFoldable(Registry_PackageName.ordPackageName)(Data_Foldable.foldableArray);
var insertWith = /* #__PURE__ */ Data_Map_Internal.insertWith(Registry_PackageName.ordPackageName);
var union = /* #__PURE__ */ Data_Map_Internal.union(Registry_Version.ordVersion);
var delete1 = /* #__PURE__ */ Data_Map_Internal["delete"](Registry_PackageName.ordPackageName);
var update = /* #__PURE__ */ Data_Map_Internal.update(Registry_PackageName.ordPackageName);
var delete2 = /* #__PURE__ */ Data_Map_Internal["delete"](Registry_Version.ordVersion);
var ManifestIndex = function (x) {
    return x;
};
var eqManifestIndex = {
    eq: function (x) {
        return function (y) {
            return eq(x)(y);
        };
    }
};
var topologicalSort = function (manifests) {
    var allPackageVersions = fromFoldableWith(append)(map(function (v) {
        return new Data_Tuple.Tuple(v.name, [ v.version ]);
    })(manifests));
    var resolveDependencies = function (v) {
        return new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.name, v.version), new Data_Tuple.Tuple(v, fromFoldable(bind(toUnfoldable(v.dependencies))(function (v1) {
            var versions = Data_Maybe.fromMaybe([  ])(lookup1(v1.value0)(allPackageVersions));
            return bind(versions)(function (included) {
                return [ new Data_Tuple.Tuple(v1.value0, included) ];
            });
        }))));
    };
    var graph = Data_Graph.fromMap(fromFoldable1(map1(resolveDependencies)(fromFoldable2(manifests))));
    return fromFoldable3(Data_List.reverse(Data_List.mapMaybe(Data_Function.flip(lookup2)(graph))(topologicalSort1(graph))));
};
var toSortedArray = function (v) {
    return topologicalSort(fromFoldable4(bind(toUnfoldableUnordered(v))(function (v1) {
        return bind(toUnfoldableUnordered(v1.value1))(function (v2) {
            return [ v2.value1 ];
        });
    })));
};
var toMap = function (v) {
    return v;
};
var printEntry = /* #__PURE__ */ (function () {
    var $227 = Data_Array.foldMap(Data_Monoid.monoidString)((function () {
        var $230 = Data_Codec.encode(Registry_Manifest.codec);
        return function ($231) {
            return (function (v) {
                return v + "\x0a";
            })(Data_Argonaut_Core.stringify($230($231)));
        };
    })());
    var $228 = Data_Array.sortBy(Data_Ord.comparing(Registry_Version.ordVersion)((function () {
        var $232 = un(Registry_Manifest.Manifest);
        return function ($233) {
            return (function (v) {
                return v.version;
            })($232($233));
        };
    })()));
    return function ($229) {
        return $227($228(fromFoldable5($229)));
    };
})();
var parseEntry = function (entry) {
    var split = (function () {
        var $234 = Data_String_Common.split("\x0a");
        return function ($235) {
            return $234(Data_String_Common.trim($235));
        };
    })();
    return bind1(traverse(Data_Argonaut_Parser.jsonParser)(split(entry)))(function (jsonArray) {
        return bind1(traverse((function () {
            var $236 = lmap(Data_Codec_Argonaut.printJsonDecodeError);
            var $237 = Data_Codec.decode(Registry_Manifest.codec);
            return function ($238) {
                return $236($237($238));
            };
        })())(jsonArray))(function (entries) {
            var v = Data_Array_NonEmpty.fromArray(entries);
            if (v instanceof Data_Maybe.Nothing) {
                return new Data_Either.Left("No entries exist.");
            };
            if (v instanceof Data_Maybe.Just) {
                return pure(v.value0);
            };
            throw new Error("Failed pattern match at Registry.ManifestIndex (line 246, column 3 - line 248, column 35): " + [ v.constructor.name ]);
        });
    });
};
var packageEntryDirectory = function ($239) {
    return (function (name) {
        var v = Data_String_CodePoints.length(name);
        if (v === 0) {
            return Partial_Unsafe.unsafeCrashWith("Unexpected empty PackageName");
        };
        if (v === 1) {
            return "1";
        };
        if (v === 2) {
            return "2";
        };
        if (v === 3) {
            return Node_Path.concat([ "3", Data_String_CodePoints.take(1)(name) ]);
        };
        return Node_Path.concat([ Data_String_CodePoints.take(2)(name), Data_String_CodePoints.take(2)(Data_String_CodePoints.drop(2)(name)) ]);
    })(Registry_PackageName.print($239));
};
var packageEntryFilePath = function (name) {
    return Node_Path.concat([ packageEntryDirectory(name), Registry_PackageName.print(name) ]);
};
var readEntryFile = function (dictMonadAff) {
    var Monad0 = (dictMonadAff.MonadEffect0()).Monad0();
    var bind3 = Control_Bind.bind(Monad0.Bind1());
    var liftAff = Effect_Aff_Class.liftAff(dictMonadAff);
    var pure1 = Control_Applicative.pure(Monad0.Applicative0());
    return function (indexPath) {
        return function ($$package) {
            var entryPath = Node_Path.concat([ indexPath, packageEntryFilePath($$package) ]);
            return bind3(liftAff(Effect_Aff.attempt(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(entryPath))))(function (v) {
                if (v instanceof Data_Either.Left) {
                    return pure1(new Data_Either.Left("Failed to read entry: " + Effect_Exception.message(v.value0)));
                };
                if (v instanceof Data_Either.Right) {
                    return pure1(parseEntry(v.value0));
                };
                throw new Error("Failed pattern match at Registry.ManifestIndex (line 264, column 66 - line 266, column 49): " + [ v.constructor.name ]);
            });
        };
    };
};
var writeEntryFile = function (dictMonadAff) {
    var MonadEffect0 = dictMonadAff.MonadEffect0();
    var Monad0 = MonadEffect0.Monad0();
    var Bind1 = Monad0.Bind1();
    var discard1 = discard(Bind1);
    var unlessM = Control_Monad.unlessM(Monad0);
    var liftEffect = Effect_Class.liftEffect(MonadEffect0);
    var liftAff = Effect_Aff_Class.liftAff(dictMonadAff);
    var bind3 = Control_Bind.bind(Bind1);
    var pure1 = Control_Applicative.pure(Monad0.Applicative0());
    return function (indexPath) {
        return function (manifests) {
            var names = map2((function () {
                var $240 = un(Registry_Manifest.Manifest);
                return function ($241) {
                    return (function (v) {
                        return v.name;
                    })($240($241));
                };
            })())(manifests);
            var v = Data_Set_NonEmpty.size(names);
            if (v === 1) {
                var v1 = Data_Set_NonEmpty.min(manifests);
                var entryDirectory = Node_Path.concat([ indexPath, packageEntryDirectory(v1.name) ]);
                var entryPath = Node_Path.concat([ indexPath, packageEntryFilePath(v1.name) ]);
                return discard1(unlessM(liftEffect(Node_FS_Sync.exists(entryDirectory)))(liftAff(Node_FS_Aff["mkdir$prime"](entryDirectory)({
                    recursive: true,
                    mode: Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all)
                }))))(function () {
                    var entry = printEntry(manifests);
                    return bind3(liftAff(Effect_Aff.attempt(Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(entryPath)(entry))))(function (v2) {
                        if (v2 instanceof Data_Either.Left) {
                            return pure1(new Data_Either.Left(Effect_Exception.message(v2.value0)));
                        };
                        if (v2 instanceof Data_Either.Right) {
                            return pure1(new Data_Either.Right(Data_Unit.unit));
                        };
                        throw new Error("Failed pattern match at Registry.ManifestIndex (line 282, column 77 - line 284, column 37): " + [ v2.constructor.name ]);
                    });
                });
            };
            return pure1(new Data_Either.Left(fold([ "Package entries can only contain one package, but ", Data_Int.toStringAs(Data_Int.decimal)(v), " were provided: ", Data_String_Common.joinWith(", ")(map1(Registry_PackageName.print)(fromFoldable5(names))) ])));
        };
    };
};
var removeFromEntryFile = function (dictMonadAff) {
    var Monad0 = (dictMonadAff.MonadEffect0()).Monad0();
    var bind3 = Control_Bind.bind(Monad0.Bind1());
    var readEntryFile1 = readEntryFile(dictMonadAff);
    var pure1 = Control_Applicative.pure(Monad0.Applicative0());
    var liftAff = Effect_Aff_Class.liftAff(dictMonadAff);
    var writeEntryFile1 = writeEntryFile(dictMonadAff);
    return function (indexPath) {
        return function (name) {
            return function (version) {
                return bind3(readEntryFile1(indexPath)(name))(function (v) {
                    if (v instanceof Data_Either.Left) {
                        return pure1(new Data_Either.Left(v.value0));
                    };
                    if (v instanceof Data_Either.Right) {
                        var entryPath = Node_Path.concat([ indexPath, packageEntryFilePath(name) ]);
                        var v1 = fromFoldable6(Data_Array_NonEmpty.filter(function (v2) {
                            return notEq(v2.version)(version);
                        })(v.value0));
                        if (v1 instanceof Data_Maybe.Nothing) {
                            return bind3(liftAff(Effect_Aff.attempt(Node_FS_Aff.unlink(entryPath))))(function (v2) {
                                if (v2 instanceof Data_Either.Left) {
                                    return pure1(new Data_Either.Left("Failed to delete entry:" + Effect_Exception.message(v2.value0)));
                                };
                                if (v2 instanceof Data_Either.Right) {
                                    return pure1(new Data_Either.Right(Data_Unit.unit));
                                };
                                throw new Error("Failed pattern match at Registry.ManifestIndex (line 326, column 63 - line 328, column 41): " + [ v2.constructor.name ]);
                            });
                        };
                        if (v1 instanceof Data_Maybe.Just) {
                            return writeEntryFile1(indexPath)(v1.value0);
                        };
                        throw new Error("Failed pattern match at Registry.ManifestIndex (line 324, column 7 - line 330, column 44): " + [ v1.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Registry.ManifestIndex (line 319, column 36 - line 330, column 44): " + [ v.constructor.name ]);
                });
            };
        };
    };
};
var lookup = function (name) {
    return function (version) {
        return function (v) {
            return bind2(lookup1(name)(v))(lookup3(version));
        };
    };
};
var insertIntoEntryFile = function (dictMonadAff) {
    var Monad0 = (dictMonadAff.MonadEffect0()).Monad0();
    var bind3 = Control_Bind.bind(Monad0.Bind1());
    var readEntryFile1 = readEntryFile(dictMonadAff);
    var pure1 = Control_Applicative.pure(Monad0.Applicative0());
    var writeEntryFile1 = writeEntryFile(dictMonadAff);
    return function (indexPath) {
        return function (v) {
            return bind3(readEntryFile1(indexPath)(v.name))(function (entry) {
                var existing = (function () {
                    if (entry instanceof Data_Either.Left) {
                        return Data_Maybe.Nothing.value;
                    };
                    if (entry instanceof Data_Either.Right) {
                        return new Data_Maybe.Just(fromFoldable11(entry.value0));
                    };
                    throw new Error("Failed pattern match at Registry.ManifestIndex (line 302, column 16 - line 304, column 66): " + [ entry.constructor.name ]);
                })();
                var modified = (function () {
                    if (existing instanceof Data_Maybe.Nothing) {
                        return Data_Set_NonEmpty.singleton(v);
                    };
                    if (existing instanceof Data_Maybe.Just) {
                        return insert1(v)(existing.value0);
                    };
                    throw new Error("Failed pattern match at Registry.ManifestIndex (line 307, column 16 - line 309, column 60): " + [ existing.constructor.name ]);
                })();
                if (existing instanceof Data_Maybe.Just && eq1(existing.value0)(modified)) {
                    return pure1(new Data_Either.Right(Data_Unit.unit));
                };
                return writeEntryFile1(indexPath)(modified);
            });
        };
    };
};
var insert = function (v) {
    return function (v1) {
        var unsatisfied = fromFoldable7(bind(toUnfoldable(v.dependencies))(function (v2) {
            var v3 = lookup1(v2.value0)(v1);
            if (v3 instanceof Data_Maybe.Just) {
                return [  ];
            };
            return [ new Data_Tuple.Tuple(v2.value0, v2.value1) ];
        }));
        var $198 = Data_Map_Internal.isEmpty(unsatisfied);
        if ($198) {
            return new Data_Either.Right(insertWith(Data_Function.flip(union))(v.name)(Data_Map_Internal.singleton(v.version)(v))(v1));
        };
        return new Data_Either.Left(unsatisfied);
    };
};
var empty = Data_Map_Internal.empty;
var maximalIndex = function (manifests) {
    var insertManifest = function (v) {
        return function (v1) {
            var v2 = insert(v1)(v.value1);
            if (v2 instanceof Data_Either.Left) {
                return new Data_Tuple.Tuple(insertWith(union)(v1.name)(Data_Map_Internal.singleton(v1.version)(v2.value0))(v.value0), v.value1);
            };
            if (v2 instanceof Data_Either.Right) {
                return new Data_Tuple.Tuple(v.value0, v2.value0);
            };
            throw new Error("Failed pattern match at Registry.ManifestIndex (line 162, column 81 - line 164, column 46): " + [ v2.constructor.name ]);
        };
    };
    return Data_Array.foldl(insertManifest)(new Data_Tuple.Tuple(Data_Map_Internal.empty, empty))(topologicalSort(manifests));
};
var fromSet = function (manifests) {
    var v = maximalIndex(manifests);
    var $212 = Data_Map_Internal.isEmpty(v.value0);
    if ($212) {
        return new Data_Either.Right(v.value1);
    };
    return new Data_Either.Left(v.value0);
};
var $$delete = function (name) {
    return function (version) {
        return function (v) {
            var v1 = lookup1(name)(v);
            if (v1 instanceof Data_Maybe.Nothing) {
                return pure(v);
            };
            if (v1 instanceof Data_Maybe.Just && Data_Map_Internal.size(v1.value0) === 1) {
                return fromSet(fromFoldable4(bind(toUnfoldableUnordered(delete1(name)(v)))(function (v2) {
                    return bind(toUnfoldableUnordered(v2.value1))(function (v3) {
                        return [ v3.value1 ];
                    });
                })));
            };
            if (v1 instanceof Data_Maybe.Just) {
                return pure(update((function () {
                    var $242 = delete2(version);
                    return function ($243) {
                        return Data_Maybe.Just.create($242($243));
                    };
                })())(name)(v));
            };
            throw new Error("Failed pattern match at Registry.ManifestIndex (line 140, column 3 - line 148, column 81): " + [ v1.constructor.name ]);
        };
    };
};
export {
    empty,
    fromSet,
    insert,
    insertIntoEntryFile,
    $$delete as delete,
    lookup,
    maximalIndex,
    packageEntryDirectory,
    packageEntryFilePath,
    parseEntry,
    printEntry,
    readEntryFile,
    removeFromEntryFile,
    toMap,
    toSortedArray,
    topologicalSort,
    writeEntryFile,
    eqManifestIndex
};
//# sourceMappingURL=index.js.map
