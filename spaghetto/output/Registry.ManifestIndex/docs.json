{"comments":"Implementation of the `ManifestIndex` data type as described in the registry\nspec. The manifest index records all packages in the registry along with the\nmanifests associated with each version of the package.\nhttps://github.com/purescript/registry-dev/blob/master/SPEC.md#36-manifest-index\n\nThe manifest index is published in the registry-index repository:\nhttps://github.com/purescript/registry-index\n","declarations":[{"children":[{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Eq"],"Eq"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","ManifestIndex"],"ManifestIndex"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[78,33],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[78,1]},"title":"<anonymous>"}],"comments":"An index of package manifests, keyed by package name and version. The index\nenforces that manifests only list dependencies on packages also in the\nindex.\n","info":{"dataDeclType":"newtype","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[76,79],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[76,1]},"title":"ManifestIndex"},{"children":[],"comments":"Create an empty `ManifestIndex`\n","info":{"declType":"value","type":{"annotation":[],"contents":[["Registry","ManifestIndex"],"ManifestIndex"],"tag":"TypeConstructor"}},"kind":null,"sourceSpan":{"end":[81,23],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[81,1]},"title":"empty"},{"children":[],"comments":"Convert a set of manifests into a `ManifestIndex`. Reports all failures\nencountered rather than short-circuiting.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Set"],"Set"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Manifest"],"Manifest"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Map","Internal"],"Map"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","PackageName"],"PackageName"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Map","Internal"],"Map"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Version"],"Version"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Map","Internal"],"Map"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","PackageName"],"PackageName"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Registry","ManifestIndex"],"ManifestIndex"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[152,104],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[152,1]},"title":"fromSet"},{"children":[],"comments":"Insert a new manifest into the manifest index, failing if the manifest\nindicates dependencies that cannot be satisfied. Dependencies are not\nsatisfied if the package is not in the index.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Manifest"],"Manifest"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","ManifestIndex"],"ManifestIndex"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Map","Internal"],"Map"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","PackageName"],"PackageName"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Registry","ManifestIndex"],"ManifestIndex"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[104,84],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[104,1]},"title":"insert"},{"children":[],"comments":"Given the root of a manifest index on the file system, insert the specified\nmanifest into the package entry. This will create the package entry if it\ndoes not yet exist.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Aff","Class"],"MonadAff"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Manifest"],"Manifest"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[296,94],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[296,1]},"title":"insertIntoEntryFile"},{"children":[],"comments":"Delete a package version from the manifest index, failing if it produces an\ninvalid manifest index. Since we only verify unsatisfied dependencies wrt\npackage names (and not package versions), it is always acceptable to delete\na package version so long as it has at least 2 versions. However, removing\na package altogether incurs a full validation check.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","PackageName"],"PackageName"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Version"],"Version"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","ManifestIndex"],"ManifestIndex"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Map","Internal"],"Map"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","PackageName"],"PackageName"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Map","Internal"],"Map"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Version"],"Version"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Map","Internal"],"Map"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","PackageName"],"PackageName"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Registry","ManifestIndex"],"ManifestIndex"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[138,130],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[138,1]},"title":"delete"},{"children":[],"comments":"Look up a package version's manifest in the manifest index.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","PackageName"],"PackageName"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Version"],"Version"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","ManifestIndex"],"ManifestIndex"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Manifest"],"Manifest"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[96,68],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[96,1]},"title":"lookup"},{"children":[],"comments":"Produce the maximal `ManifestIndex` possible for the given set of\n`Manifest`s, collecting failures along the way.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Set"],"Set"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Manifest"],"Manifest"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Tuple"],"Tuple"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Map","Internal"],"Map"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","PackageName"],"PackageName"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Map","Internal"],"Map"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Version"],"Version"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Map","Internal"],"Map"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","PackageName"],"PackageName"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Registry","ManifestIndex"],"ManifestIndex"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[159,108],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[159,1]},"title":"maximalIndex"},{"children":[],"comments":"Calculate the directory containing this package in the registry index,\nusing the following format:\n\n* Packages with 1 character names are placed in a directory named 1.\n\n* Packages with 2 character names are placed in a directory named 2.\n\n* Packages with 3 character names are placed in the directory 3/{first-character}\n  where {first-character} is the first character of the package name.\n\n* All other packages are stored in directories named {first-two}/{second-two}\n  where the top directory is the first two characters of the package name,\n  and the next subdirectory is the third and fourth characters of the\n  package name. For example, prelude would be stored in the 'pr/el'\n  directory.\n\nFormat follows that used by Cargo in crates.io: https://github.com/rust-lang/crates.io-index\nAs documented in the Cargo book: https://doc.rust-lang.org/cargo/reference/registries.html#index-format\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","PackageName"],"PackageName"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[224,49],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[224,1]},"title":"packageEntryDirectory"},{"children":[],"comments":"Calculate the full file path for a given package name. For example, the\n'prelude' package would be stored at 'pr/el/prelude'.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","PackageName"],"PackageName"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[236,48],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[236,1]},"title":"packageEntryFilePath"},{"children":[],"comments":"Parse a JSON Lines string listing several manifests in sorted order from\nlowest version to highest version.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Manifest"],"Manifest"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[241,63],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[241,1]},"title":"parseEntry"},{"children":[],"comments":"Print an array of manifests as a JSON Lines string in sorted order from\nlowest version to highest version.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Set","NonEmpty"],"NonEmptySet"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Manifest"],"Manifest"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[252,45],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[252,1]},"title":"printEntry"},{"children":[],"comments":"Given the root of a manifest index on the file system and a package name,\nretrieve the manifests associated with that package, in sorted order from\nlowest to highest version.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Aff","Class"],"MonadAff"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","PackageName"],"PackageName"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Manifest"],"Manifest"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[261,111],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[261,1]},"title":"readEntryFile"},{"children":[],"comments":"Given the root of a manifest index on the file system, remove the specified\npackage version from the package entry.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Aff","Class"],"MonadAff"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","PackageName"],"PackageName"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Version"],"Version"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[317,108],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[317,1]},"title":"removeFromEntryFile"},{"children":[],"comments":"Convert a manifest index into a `Map`\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","ManifestIndex"],"ManifestIndex"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Map","Internal"],"Map"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","PackageName"],"PackageName"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Map","Internal"],"Map"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Version"],"Version"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Registry","Manifest"],"Manifest"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[85,65],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[85,1]},"title":"toMap"},{"children":[],"comments":"Produce an array of manifests topologically sorted by dependencies.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","ManifestIndex"],"ManifestIndex"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Manifest"],"Manifest"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[89,49],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[89,1]},"title":"toSortedArray"},{"children":[],"comments":"Topologically sort a set of manifests so that each manifest in the array\ndepends only on package versions that have already been encountered.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Set"],"Set"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Manifest"],"Manifest"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Manifest"],"Manifest"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[170,50],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[170,1]},"title":"topologicalSort"},{"children":[],"comments":"Given the root of a manifest index on the file system, encode the provided\nlist of manifests as a package entry in the JSON Lines format. This will\nfail if the manifests do not all share the same package name.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Aff","Class"],"MonadAff"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Set","NonEmpty"],"NonEmptySet"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Manifest"],"Manifest"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[271,101],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/ManifestIndex.purs","start":[271,1]},"title":"writeEntryFile"}],"name":"Registry.ManifestIndex","reExports":[]}