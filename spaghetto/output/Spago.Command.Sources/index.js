// Generated by purs version 0.15.10
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Registry_PackageName from "../Registry.PackageName/index.js";
import * as Spago_Command_Fetch from "../Spago.Command.Fetch/index.js";
import * as Spago_Config from "../Spago.Config/index.js";
import * as Spago_Core_Config from "../Spago.Core.Config/index.js";
import * as Spago_Core_Prelude from "../Spago.Core.Prelude/index.js";
import * as Spago_Log from "../Spago.Log/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Spago_Core_Prelude.bindSpago);
var ask = /* #__PURE__ */ Control_Monad_Reader_Class.ask(Spago_Core_Prelude.monadAskSpago);
var foldMap = /* #__PURE__ */ Data_Foldable.foldMap(Data_Foldable.foldableArray)(Spago_Core_Config.monoidDependencies);
var union = /* #__PURE__ */ Data_Map_Internal.union(Registry_PackageName.ordPackageName);
var fromFoldable = /* #__PURE__ */ Data_Map_Internal.fromFoldable(Registry_PackageName.ordPackageName)(Data_Foldable.foldableArray);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var foldMap1 = /* #__PURE__ */ Data_Array.foldMap(Data_Monoid.monoidArray);
var toUnfoldable = /* #__PURE__ */ Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray);
var output = /* #__PURE__ */ Spago_Log.output(Spago_Core_Prelude.monadEffectSpago);
var run = function (v) {
    return bind(ask)(function (v1) {
        var selectedPackages = (function () {
            if (v1.workspace.selected instanceof Data_Maybe.Just) {
                return [ v1.workspace.selected.value0 ];
            };
            if (v1.workspace.selected instanceof Data_Maybe.Nothing) {
                return Spago_Config.getWorkspacePackages(v1.workspace.packageSet);
            };
            throw new Error("Failed pattern match at Spago.Command.Sources (line 20, column 24 - line 22, column 66): " + [ v1.workspace.selected.constructor.name ]);
        })();
        var deps = foldMap(Spago_Command_Fetch.getWorkspacePackageDeps)(selectedPackages);
        return bind(Spago_Command_Fetch.getTransitiveDeps(deps))(function (transitiveDeps) {
            var transitivePackages = union(fromFoldable(map(function (p) {
                return new Data_Tuple.Tuple(p["package"].name, new Spago_Config.WorkspacePackage(p));
            })(selectedPackages)))(transitiveDeps);
            var globs = foldMap1(function (v2) {
                return Spago_Config.sourceGlob(Spago_Config.WithTestGlobs.value)(v2.value0)(v2.value1);
            })(toUnfoldable(transitivePackages));
            return output((function () {
                if (v.json) {
                    return new Spago_Log.OutputJson(Data_Codec_Argonaut.array(Data_Codec_Argonaut.string), globs);
                };
                if (!v.json) {
                    return new Spago_Log.OutputLines(globs);
                };
                throw new Error("Failed pattern match at Spago.Command.Sources (line 35, column 10 - line 37, column 31): " + [ v.json.constructor.name ]);
            })());
        });
    });
};
export {
    run
};
