// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Node_FS_Perms from "../Node.FS.Perms/index.js";
import * as Node_Path from "../Node.Path/index.js";
import * as Registry_Version from "../Registry.Version/index.js";
import * as Spago_Cmd from "../Spago.Cmd/index.js";
import * as Spago_Command_Build from "../Spago.Command.Build/index.js";
import * as Spago_Core_Prelude from "../Spago.Core.Prelude/index.js";
import * as Spago_FS from "../Spago.FS/index.js";
import * as Spago_Log from "../Spago.Log/index.js";
import * as Spago_Paths from "../Spago.Paths/index.js";
import * as Spago_Prelude from "../Spago.Prelude/index.js";
import * as Spago_Purs from "../Spago.Purs/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Spago_Core_Prelude.bindSpago);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(Spago_Core_Prelude.bindSpago);
var logDebug = /* #__PURE__ */ Spago_Log.logDebug(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var mkdirp = /* #__PURE__ */ Spago_FS.mkdirp(Spago_Core_Prelude.monadAffSpago);
var fold = /* #__PURE__ */ Data_Array.fold(Data_Monoid.monoidString);
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var logWarn = /* #__PURE__ */ Spago_Log.logWarn(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var when = /* #__PURE__ */ Control_Applicative.when(Spago_Core_Prelude.applicativeSpago);
var lookup = /* #__PURE__ */ Data_Map_Internal.lookup(Data_Ord.ordString);
var die = /* #__PURE__ */ Spago_Log.die(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago);
var die1 = /* #__PURE__ */ die(/* #__PURE__ */ Spago_Log.loggableArray(Spago_Log.loggableString));
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showString);
var writeTextFile = /* #__PURE__ */ Spago_FS.writeTextFile(Spago_Core_Prelude.monadAffSpago);
var chmod = /* #__PURE__ */ Spago_FS.chmod(Spago_Core_Prelude.monadAffSpago);
var showArray = /* #__PURE__ */ Data_Show.showArray(Data_Show.showString);
var show1 = /* #__PURE__ */ Data_Show.show(showArray);
var exec = /* #__PURE__ */ Spago_Cmd.exec(Spago_Core_Prelude.monadAffSpago);
var logSuccess = /* #__PURE__ */ Spago_Log.logSuccess(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var pure = /* #__PURE__ */ Control_Applicative.pure(Spago_Core_Prelude.applicativeSpago);
var showRecord = /* #__PURE__ */ Data_Show.showRecord()();
var showMaybe = /* #__PURE__ */ Data_Maybe.showMaybe(Data_Show.showString);
var show2 = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ showRecord(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "escapedCommand";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "exitCode";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "failed";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "isCanceled";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "killed";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "message";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "originalMessage";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "shortMessage";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "signal";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "signalDescription";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "stderr";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "stdout";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil({
    reflectSymbol: function () {
        return "timedOut";
    }
})(Data_Show.showBoolean))(Data_Show.showString))(Data_Show.showString))(showMaybe))(/* #__PURE__ */ Data_Maybe.showMaybe(/* #__PURE__ */ Data_Either.showEither(Data_Show.showInt)(Data_Show.showString))))(Data_Show.showString))(showMaybe))(Data_Show.showString))(Data_Show.showBoolean))(Data_Show.showBoolean))(Data_Show.showBoolean))(/* #__PURE__ */ Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Show.showString)));
var die2 = /* #__PURE__ */ die(Spago_Log.loggableString);
var show3 = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ showRecord(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "args";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil({
    reflectSymbol: function () {
        return "cmd";
    }
})(Data_Show.showString))(/* #__PURE__ */ Data_Maybe.showMaybe(showArray))));
var run = /* #__PURE__ */ bind(/* #__PURE__ */ Control_Monad_Reader_Class.ask(Spago_Core_Prelude.monadAskSpago))(function (v) {
    var execOptions = {
        pipeStdin: Spago_Cmd.StdinPipeParent.value,
        cwd: Spago_Cmd.defaultExecOptions.cwd,
        pipeStderr: Spago_Cmd.defaultExecOptions.pipeStderr,
        pipeStdout: Spago_Cmd.defaultExecOptions.pipeStdout
    };
    if (v.workspace.backend instanceof Data_Maybe.Nothing) {
        return discard(logDebug("Running with backend: nodejs"))(function () {
            var runDir = Node_Path.concat([ Spago_Paths.localCachePath, "run" ]);
            return discard(mkdirp(runDir))(function () {
                var runJsPath = Node_Path.concat([ runDir, "run.js" ]);
                var packageJsonPath = Node_Path.concat([ runDir, "package.json" ]);
                var nodeContents = fold([ "import { main } from 'file://", Data_String_Common.replaceAll("\\")("/")(v.runOptions.sourceDir), "/", Data_Maybe.fromMaybe("output")(v.workspace.buildOptions.output), "/", v.runOptions.moduleName, "/", "index.js", "'\x0a\x0a", "main()" ]);
                var nodeArgs = append([ runJsPath ])(v.runOptions.execArgs);
                var globs = Spago_Command_Build.getBuildGlobs({
                    dependencies: v.dependencies,
                    depsOnly: false,
                    withTests: true,
                    selected: [ v.selected ]
                });
                return discard(bind(Spago_Purs.graph(globs)([  ]))(function (v1) {
                    if (v1 instanceof Data_Either.Left) {
                        return logWarn("Could not decode the output of `purs graph`, error: " + Data_Codec_Argonaut.printJsonDecodeError(v1.value0));
                    };
                    if (v1 instanceof Data_Either.Right) {
                        return when(Data_Maybe.isNothing(lookup(v.runOptions.moduleName)(v1.value0)))(die1([ v.runOptions.failureMessage, "Module " + (v.runOptions.moduleName + " not found! Are you including it in your build?") ]));
                    };
                    throw new Error("Failed pattern match at Spago.Command.Run (line 108, column 31 - line 112, column 123): " + [ v1.constructor.name ]);
                }))(function () {
                    return discard(logDebug("Writing " + show(runJsPath)))(function () {
                        return discard(writeTextFile(runJsPath)(nodeContents))(function () {
                            return discard(chmod(runJsPath)(Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all)))(function () {
                                return discard(logDebug("Writing " + show(packageJsonPath)))(function () {
                                    return discard(writeTextFile(packageJsonPath)("{\"type\":\"module\" }"))(function () {
                                        return discard(logDebug("Executing from: " + show(v.runOptions.executeDir)))(function () {
                                            return discard(logDebug("Running node command with args: `" + (show1(nodeArgs) + "`")))(function () {
                                                return bind(exec(v.node.cmd)(nodeArgs)({
                                                    pipeStdin: execOptions.pipeStdin,
                                                    pipeStdout: execOptions.pipeStdout,
                                                    pipeStderr: execOptions.pipeStderr,
                                                    cwd: new Data_Maybe.Just(v.runOptions.executeDir)
                                                }))(function (v1) {
                                                    if (v1 instanceof Data_Either.Right) {
                                                        if (v.runOptions.successMessage instanceof Data_Maybe.Just) {
                                                            return logSuccess(v.runOptions.successMessage.value0);
                                                        };
                                                        if (v.runOptions.successMessage instanceof Data_Maybe.Nothing) {
                                                            return pure(Data_Unit.unit);
                                                        };
                                                        throw new Error("Failed pattern match at Spago.Command.Run (line 122, column 21 - line 124, column 31): " + [ v.runOptions.successMessage.constructor.name ]);
                                                    };
                                                    if (v1 instanceof Data_Either.Left) {
                                                        return discard(logDebug(show2(v1.value0)))(function () {
                                                            return die2(v.runOptions.failureMessage);
                                                        });
                                                    };
                                                    throw new Error("Failed pattern match at Spago.Command.Run (line 121, column 83 - line 127, column 34): " + [ v1.constructor.name ]);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    };
    if (v.workspace.backend instanceof Data_Maybe.Just) {
        var args = append([ "--run", v.runOptions.moduleName + ".main" ])(v.runOptions.execArgs);
        return discard(logDebug("Running command `" + (v.workspace.backend.value0.cmd + (" " + (show1(args) + "`")))))(function () {
            return bind(exec(v.workspace.backend.value0.cmd)(args)(execOptions))(function (v1) {
                if (v1 instanceof Data_Either.Right) {
                    if (v.runOptions.successMessage instanceof Data_Maybe.Just) {
                        return logSuccess(v.runOptions.successMessage.value0);
                    };
                    if (v.runOptions.successMessage instanceof Data_Maybe.Nothing) {
                        return pure(Data_Unit.unit);
                    };
                    throw new Error("Failed pattern match at Spago.Command.Run (line 132, column 21 - line 134, column 31): " + [ v.runOptions.successMessage.constructor.name ]);
                };
                if (v1 instanceof Data_Either.Left) {
                    return discard(logDebug(show2(v1.value0)))(function () {
                        return die1([ v.runOptions.failureMessage, "Backend " + (show3(v.workspace.backend.value0) + (" exited with error:" + v1.value0.shortMessage)) ]);
                    });
                };
                throw new Error("Failed pattern match at Spago.Command.Run (line 131, column 49 - line 137, column 111): " + [ v1.constructor.name ]);
            });
        });
    };
    throw new Error("Failed pattern match at Spago.Command.Run (line 73, column 3 - line 137, column 111): " + [ v.workspace.backend.constructor.name ]);
});
var nodeVersion = /* #__PURE__ */ (function () {
    return bind(exec("node")([ "--version" ])({
        pipeStdin: Spago_Cmd.defaultExecOptions.pipeStdin,
        pipeStdout: false,
        pipeStderr: false,
        cwd: Spago_Cmd.defaultExecOptions.cwd
    }))(function (v) {
        if (v instanceof Data_Either.Left) {
            return discard(logDebug(show2(v.value0)))(function () {
                return die1([ "Failed to find node. Have you installed it, and is it in your PATH?" ]);
            });
        };
        if (v instanceof Data_Either.Right) {
            var v1 = Spago_Prelude.parseLenientVersion(v.value0.stdout);
            if (v1 instanceof Data_Either.Left) {
                return die2("Failed to parse NodeJS version. Was: " + v.value0.stdout);
            };
            if (v1 instanceof Data_Either.Right) {
                var $136 = Registry_Version.major(v1.value0) >= 13;
                if ($136) {
                    return pure(v1.value0);
                };
                return die1([ "Unsupported Node version " + Registry_Version.print(v1.value0), "Please install a Node v13 or higher." ]);
            };
            throw new Error("Failed pattern match at Spago.Command.Run (line 55, column 16 - line 61, column 105): " + [ v1.constructor.name ]);
        };
        throw new Error("Failed pattern match at Spago.Command.Run (line 51, column 105 - line 61, column 105): " + [ v.constructor.name ]);
    });
})();
var getNode = /* #__PURE__ */ bind(nodeVersion)(function (version) {
    return pure({
        cmd: "node",
        version: version
    });
});
export {
    getNode,
    run
};
