// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as Parsing_String_Basic from "../Parsing.String.Basic/index.js";
import * as Parsing_Token from "../Parsing.Token/index.js";
var alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);
var emptyDef = /* #__PURE__ */ (function () {
    var op$prime = Parsing_String_Basic.oneOf([ ":", "!", "#", "$", "%", "&", "*", "+", ".", "/", "<", "=", ">", "?", "@", "\\", "^", "|", "-", "~" ]);
    return {
        commentStart: "",
        commentEnd: "",
        commentLine: "",
        nestedComments: true,
        identStart: alt(Parsing_String_Basic.letter)(Parsing_String["char"]("_")),
        identLetter: alt(Parsing_String_Basic.alphaNum)(Parsing_String_Basic.oneOf([ "_", "'" ])),
        opStart: op$prime,
        opLetter: op$prime,
        reservedOpNames: [  ],
        reservedNames: [  ],
        caseSensitive: true
    };
})();
var haskellStyle = /* #__PURE__ */ (function () {
    var op$prime = Parsing_String_Basic.oneOf([ ":", "!", "#", "$", "%", "&", "*", "+", ".", "/", "<", "=", ">", "?", "@", "\\", "^", "|", "-", "~" ]);
    var v = Parsing_Token.unGenLanguageDef(emptyDef);
    return {
        commentStart: "{-",
        commentEnd: "-}",
        commentLine: "--",
        nestedComments: true,
        identStart: Parsing_String_Basic.letter,
        identLetter: alt(Parsing_String_Basic.alphaNum)(Parsing_String_Basic.oneOf([ "_", "'" ])),
        opStart: op$prime,
        opLetter: op$prime,
        reservedNames: [  ],
        reservedOpNames: [  ],
        caseSensitive: true
    };
})();
var haskell98Def = /* #__PURE__ */ (function () {
    var v = Parsing_Token.unGenLanguageDef(haskellStyle);
    return {
        commentStart: v.commentStart,
        commentEnd: v.commentEnd,
        commentLine: v.commentLine,
        nestedComments: v.nestedComments,
        identStart: v.identStart,
        identLetter: v.identLetter,
        opStart: v.opStart,
        opLetter: v.opLetter,
        reservedNames: [ "let", "in", "case", "of", "if", "then", "else", "data", "type", "class", "default", "deriving", "do", "import", "infix", "infixl", "infixr", "instance", "module", "newtype", "where", "primitive" ],
        reservedOpNames: [ "::", "..", "=", "\\", "|", "<-", "->", "@", "~", "=>" ],
        caseSensitive: v.caseSensitive
    };
})();
var haskellDef = /* #__PURE__ */ (function () {
    return {
        commentStart: haskell98Def.commentStart,
        commentEnd: haskell98Def.commentEnd,
        commentLine: haskell98Def.commentLine,
        nestedComments: haskell98Def.nestedComments,
        identStart: haskell98Def.identStart,
        identLetter: alt(haskell98Def.identLetter)(Parsing_String["char"]("#")),
        opStart: haskell98Def.opStart,
        opLetter: haskell98Def.opLetter,
        reservedNames: Data_Semigroup.append(Data_Semigroup.semigroupArray)(haskell98Def.reservedNames)([ "foreign", "import", "export", "primitive", "_ccall_", "_casm_", "forall" ]),
        reservedOpNames: haskell98Def.reservedOpNames,
        caseSensitive: haskell98Def.caseSensitive
    };
})();
var haskell = /* #__PURE__ */ Parsing_Token.makeTokenParser(haskellDef);
var javaStyle = /* #__PURE__ */ (function () {
    var v = Parsing_Token.unGenLanguageDef(emptyDef);
    return {
        commentStart: "/*",
        commentEnd: "*/",
        commentLine: "//",
        nestedComments: true,
        identStart: alt(Parsing_String_Basic.letter)(Parsing_String_Basic.oneOf([ "_", "$" ])),
        identLetter: alt(Parsing_String_Basic.alphaNum)(Parsing_String_Basic.oneOf([ "_", "$" ])),
        opStart: v.opStart,
        opLetter: v.opLetter,
        reservedNames: [  ],
        reservedOpNames: [  ],
        caseSensitive: false
    };
})();
export {
    haskellDef,
    haskell,
    emptyDef,
    haskellStyle,
    javaStyle
};
//# sourceMappingURL=index.js.map
