{"comments":"While most of the code in this module is safe, this module does\nexport a few partial functions and the `NonEmptyString` constructor.\nWhile the partial functions are obvious from the `Partial` constraint in\ntheir type signature, the `NonEmptyString` constructor can be overlooked\nwhen searching for issues in one's code. See the constructor's\ndocumentation for more information.\n","declarations":[{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"declType":"dataConstructor"},"sourceSpan":{"end":[29,47],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[29,24]},"title":"NonEmptyString"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Eq"],"Eq"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[31,61],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[31,1]},"title":"eqNonEmptyString"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Ord"],"Ord"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[32,63],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[32,1]},"title":"ordNonEmptyString"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Semigroup"],"Semigroup"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[33,75],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[33,1]},"title":"semigroupNonEmptyString"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Show"],"Show"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[36,81],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[35,1]},"title":"showNonEmptyString"}],"comments":"A string that is known not to be empty.\n\nYou can use this constructor to create a `NonEmptyString` that isn't\nnon-empty, breaking the guarantee behind this newtype. It is\nprovided as an escape hatch mainly for the `Data.NonEmpty.CodeUnits`\nand `Data.NonEmpty.CodePoints` modules. Use this at your own risk\nwhen you know what you are doing.\n","info":{"dataDeclType":"newtype","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[29,47],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[29,1]},"title":"NonEmptyString"},{"children":[{"comments":null,"info":{"declType":"typeClassMember","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Type","Proxy"],"Proxy"],"tag":"TypeConstructor"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[45,35],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[45,3]},"title":"nes"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim","TypeError"],"Text"],"tag":"TypeConstructor"},{"annotation":[],"contents":"Cannot create an NonEmptyString from an empty Symbol","tag":"TypeLevelString"}],"tag":"TypeApp"}],"constraintClass":[["Prim","TypeError"],"Fail"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"MakeNonEmpty"],"tag":"TypeConstructor"},{"annotation":[],"contents":"","tag":"TypeLevelString"}],"tag":"TypeApp"}},"sourceSpan":{"end":[48,28],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[47,1]},"title":"makeNonEmptyBad"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"s","tag":"TypeVar"}],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"MakeNonEmpty"],"tag":"TypeConstructor"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"}},"sourceSpan":{"end":[51,43],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[50,6]},"title":"nonEmptyNonEmpty"}],"comments":"A helper class for defining non-empty string values at compile time.\n\n``` purescript\nsomething :: NonEmptyString\nsomething = nes (Proxy :: Proxy \"something\")\n```\n","info":{"arguments":[["s",{"annotation":[],"contents":[["Prim"],"Symbol"],"tag":"TypeConstructor"}]],"declType":"typeClass","fundeps":[],"superclasses":[]},"kind":{"keyword":"class","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Symbol"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Constraint"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[45,35],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[44,1]},"title":"MakeNonEmpty"},{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"declType":"dataConstructor"},"sourceSpan":{"end":[54,65],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[54,29]},"title":"NonEmptyReplacement"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Eq"],"Eq"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyReplacement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[56,72],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[56,1]},"title":"eqNonEmptyReplacement"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Ord"],"Ord"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyReplacement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[57,74],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[57,1]},"title":"ordNonEmptyReplacement"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Semigroup"],"Semigroup"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyReplacement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[58,85],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[58,1]},"title":"semigroupNonEmptyReplacement"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Show"],"Show"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyReplacement"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[61,74],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[60,1]},"title":"showNonEmptyReplacement"}],"comments":"A newtype used in cases to specify a non-empty replacement for a pattern.\n","info":{"dataDeclType":"newtype","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[54,65],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[54,1]},"title":"NonEmptyReplacement"},{"children":[],"comments":"Creates a `NonEmptyString` from a `String`, returning `Nothing` if the\ninput is empty.\n\n```purescript\nfromString \"\" = Nothing\nfromString \"hello\" = Just (NES.unsafeFromString \"hello\")\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[70,45],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[70,1]},"title":"fromString"},{"children":[],"comments":"A partial version of `fromString`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[],"constraintClass":[["Prim"],"Partial"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}},"kind":null,"sourceSpan":{"end":[76,56],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[76,1]},"title":"unsafeFromString"},{"children":[],"comments":"Converts a `NonEmptyString` back into a standard `String`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[80,37],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[80,1]},"title":"toString"},{"children":[],"comments":"Appends a string to this non-empty string. Since one of the strings is\nnon-empty we know the result will be too.\n\n```purescript\nappendString (NonEmptyString \"Hello\") \" world\" == NonEmptyString \"Hello world\"\nappendString (NonEmptyString \"Hello\") \"\" == NonEmptyString \"Hello\"\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[90,59],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[90,1]},"title":"appendString"},{"children":[],"comments":"Prepends a string to this non-empty string. Since one of the strings is\nnon-empty we know the result will be too.\n\n```purescript\nprependString \"be\" (NonEmptyString \"fore\") == NonEmptyString \"before\"\nprependString \"\" (NonEmptyString \"fore\") == NonEmptyString \"fore\"\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[100,60],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[100,1]},"title":"prependString"},{"children":[],"comments":"If the string starts with the given prefix, return the portion of the\nstring left after removing it. If the prefix does not match or there is no\nremainder, the result will be `Nothing`.\n\n```purescript\nstripPrefix (Pattern \"http:\") (NonEmptyString \"http://purescript.org\") == Just (NonEmptyString \"//purescript.org\")\nstripPrefix (Pattern \"http:\") (NonEmptyString \"https://purescript.org\") == Nothing\nstripPrefix (Pattern \"Hello!\") (NonEmptyString \"Hello!\") == Nothing\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","Pattern"],"Pattern"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[112,65],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[112,1]},"title":"stripPrefix"},{"children":[],"comments":"If the string ends with the given suffix, return the portion of the\nstring left after removing it. If the suffix does not match or there is no\nremainder, the result will be `Nothing`.\n\n```purescript\nstripSuffix (Pattern \".exe\") (NonEmptyString \"purs.exe\") == Just (NonEmptyString \"purs\")\nstripSuffix (Pattern \".exe\") (NonEmptyString \"purs\") == Nothing\nstripSuffix (Pattern \"Hello!\") (NonEmptyString \"Hello!\") == Nothing\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","Pattern"],"Pattern"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[124,65],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[124,1]},"title":"stripSuffix"},{"children":[],"comments":"Checks whether the pattern appears in the given string.\n\n```purescript\ncontains (Pattern \"needle\") (NonEmptyString \"haystack with needle\") == true\ncontains (Pattern \"needle\") (NonEmptyString \"haystack\") == false\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","Pattern"],"Pattern"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[133,49],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[133,1]},"title":"contains"},{"children":[],"comments":"Compare two strings in a locale-aware fashion. This is in contrast to\nthe `Ord` instance on `String` which treats strings as arrays of code\nunits:\n\n```purescript\nNonEmptyString \"ä\" `localeCompare` NonEmptyString \"b\" == LT\nNonEmptyString \"ä\" `compare` NonEmptyString \"b\" == GT\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Ordering"],"Ordering"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[144,62],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[144,1]},"title":"localeCompare"},{"children":[],"comments":"Replaces the first occurence of the pattern with the replacement string.\n\n```purescript\nreplace (Pattern \"<=\") (NonEmptyReplacement \"≤\") (NonEmptyString \"a <= b <= c\") == NonEmptyString \"a ≤ b <= c\"\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","Pattern"],"Pattern"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyReplacement"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[152,78],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[152,1]},"title":"replace"},{"children":[],"comments":"Replaces all occurences of the pattern with the replacement string.\n\n```purescript\nreplaceAll (Pattern \"<=\") (NonEmptyReplacement \"≤\") (NonEmptyString \"a <= b <= c\") == NonEmptyString \"a ≤ b ≤ c\"\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","Pattern"],"Pattern"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyReplacement"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[161,81],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[161,1]},"title":"replaceAll"},{"children":[],"comments":"Returns the argument converted to lowercase.\n\n```purescript\ntoLower (NonEmptyString \"hElLo\") == NonEmptyString \"hello\"\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[170,44],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[170,1]},"title":"toLower"},{"children":[],"comments":"Returns the argument converted to uppercase.\n\n```purescript\ntoUpper (NonEmptyString \"Hello\") == NonEmptyString \"HELLO\"\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[178,44],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[178,1]},"title":"toUpper"},{"children":[],"comments":"Removes whitespace from the beginning and end of a string, including\n[whitespace characters](http://www.ecma-international.org/ecma-262/5.1/#sec-7.2)\nand [line terminators](http://www.ecma-international.org/ecma-262/5.1/#sec-7.3).\nIf the string is entirely made up of whitespace the result will be Nothing.\n\n```purescript\ntrim (NonEmptyString \"   Hello  \\n World\\n\\t    \") == Just (NonEmptyString \"Hello  \\n World\")\ntrim (NonEmptyString \"   \\n\") == Nothing\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[190,47],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[190,1]},"title":"trim"},{"children":[],"comments":"Joins the strings in a container together as a new string, inserting the\nfirst argument as separator between them. The result is not guaranteed to\nbe non-empty.\n\n```purescript\njoinWith \", \" [NonEmptyString \"apple\", NonEmptyString \"banana\"] == \"apple, banana\"\njoinWith \", \" [] == \"\"\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"f","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"f","tag":"TypeVar"}],"constraintClass":[["Data","Foldable"],"Foldable"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":"f","tag":"TypeVar"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[201,73],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[201,1]},"title":"joinWith"},{"children":[],"comments":"Joins non-empty strings in a non-empty container together as a new\nnon-empty string, inserting a possibly empty string as separator between\nthem. The result is guaranteed to be non-empty.\n\n```purescript\n-- array syntax is used for demonstration here, it would need to be a real `Foldable1`\njoin1With \", \" [NonEmptyString \"apple\", NonEmptyString \"banana\"] == NonEmptyString \"apple, banana\"\njoin1With \"\" [NonEmptyString \"apple\", NonEmptyString \"banana\"] == NonEmptyString \"applebanana\"\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"f","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"f","tag":"TypeVar"}],"constraintClass":[["Data","Semigroup","Foldable"],"Foldable1"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":"f","tag":"TypeVar"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[216,83],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[216,1]},"title":"join1With"},{"children":[],"comments":"Joins possibly empty strings in a non-empty container together as a new\nnon-empty string, inserting a non-empty string as a separator between them.\nThe result is guaranteed to be non-empty.\n\n```purescript\n-- array syntax is used for demonstration here, it would need to be a real `Foldable1`\njoinWith1 (NonEmptyString \", \") [\"apple\", \"banana\"] == NonEmptyString \"apple, banana\"\njoinWith1 (NonEmptyString \"/\") [\"a\", \"b\", \"\", \"c\", \"\"] == NonEmptyString \"a/b//c/\"\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"f","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"f","tag":"TypeVar"}],"constraintClass":[["Data","Semigroup","Foldable"],"Foldable1"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":"f","tag":"TypeVar"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[228,83],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[228,1]},"title":"joinWith1"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"r","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"r","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"r","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[231,56],"name":".spago/packages/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":[231,1]},"title":"liftS"}],"name":"Data.String.NonEmpty.Internal","reExports":[]}