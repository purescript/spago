// Generated by purs version 0.15.10
import * as PureScript_CST_Print from "../PureScript.CST.Print/index.js";
import * as PureScript_CST_Types from "../PureScript.CST.Types/index.js";
var UnexpectedEof = /* #__PURE__ */ (function () {
    function UnexpectedEof() {

    };
    UnexpectedEof.value = new UnexpectedEof();
    return UnexpectedEof;
})();
var ExpectedEof = /* #__PURE__ */ (function () {
    function ExpectedEof(value0) {
        this.value0 = value0;
    };
    ExpectedEof.create = function (value0) {
        return new ExpectedEof(value0);
    };
    return ExpectedEof;
})();
var UnexpectedToken = /* #__PURE__ */ (function () {
    function UnexpectedToken(value0) {
        this.value0 = value0;
    };
    UnexpectedToken.create = function (value0) {
        return new UnexpectedToken(value0);
    };
    return UnexpectedToken;
})();
var ExpectedToken = /* #__PURE__ */ (function () {
    function ExpectedToken(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExpectedToken.create = function (value0) {
        return function (value1) {
            return new ExpectedToken(value0, value1);
        };
    };
    return ExpectedToken;
})();
var ExpectedClass = /* #__PURE__ */ (function () {
    function ExpectedClass(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExpectedClass.create = function (value0) {
        return function (value1) {
            return new ExpectedClass(value0, value1);
        };
    };
    return ExpectedClass;
})();
var LexExpected = /* #__PURE__ */ (function () {
    function LexExpected(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    LexExpected.create = function (value0) {
        return function (value1) {
            return new LexExpected(value0, value1);
        };
    };
    return LexExpected;
})();
var LexInvalidCharEscape = /* #__PURE__ */ (function () {
    function LexInvalidCharEscape(value0) {
        this.value0 = value0;
    };
    LexInvalidCharEscape.create = function (value0) {
        return new LexInvalidCharEscape(value0);
    };
    return LexInvalidCharEscape;
})();
var LexCharEscapeOutOfRange = /* #__PURE__ */ (function () {
    function LexCharEscapeOutOfRange(value0) {
        this.value0 = value0;
    };
    LexCharEscapeOutOfRange.create = function (value0) {
        return new LexCharEscapeOutOfRange(value0);
    };
    return LexCharEscapeOutOfRange;
})();
var LexHexOutOfRange = /* #__PURE__ */ (function () {
    function LexHexOutOfRange(value0) {
        this.value0 = value0;
    };
    LexHexOutOfRange.create = function (value0) {
        return new LexHexOutOfRange(value0);
    };
    return LexHexOutOfRange;
})();
var LexIntOutOfRange = /* #__PURE__ */ (function () {
    function LexIntOutOfRange(value0) {
        this.value0 = value0;
    };
    LexIntOutOfRange.create = function (value0) {
        return new LexIntOutOfRange(value0);
    };
    return LexIntOutOfRange;
})();
var LexNumberOutOfRange = /* #__PURE__ */ (function () {
    function LexNumberOutOfRange(value0) {
        this.value0 = value0;
    };
    LexNumberOutOfRange.create = function (value0) {
        return new LexNumberOutOfRange(value0);
    };
    return LexNumberOutOfRange;
})();
var RecoveredError = function (x) {
    return x;
};
var printTokenError = function (v) {
    if (v instanceof PureScript_CST_Types.TokLeftParen) {
        return "'('";
    };
    if (v instanceof PureScript_CST_Types.TokRightParen) {
        return "')'";
    };
    if (v instanceof PureScript_CST_Types.TokLeftBrace) {
        return "'{'";
    };
    if (v instanceof PureScript_CST_Types.TokRightBrace) {
        return "'}'";
    };
    if (v instanceof PureScript_CST_Types.TokLeftSquare) {
        return "'['";
    };
    if (v instanceof PureScript_CST_Types.TokRightSquare) {
        return "']'";
    };
    if (v instanceof PureScript_CST_Types.TokLeftArrow) {
        if (v.value0 instanceof PureScript_CST_Types.ASCII) {
            return "'<-'";
        };
        if (v.value0 instanceof PureScript_CST_Types.Unicode) {
            return "'\u2190'";
        };
        throw new Error("Failed pattern match at PureScript.CST.Errors (line 72, column 5 - line 74, column 23): " + [ v.value0.constructor.name ]);
    };
    if (v instanceof PureScript_CST_Types.TokRightArrow) {
        if (v.value0 instanceof PureScript_CST_Types.ASCII) {
            return "'->'";
        };
        if (v.value0 instanceof PureScript_CST_Types.Unicode) {
            return "'\u2192'";
        };
        throw new Error("Failed pattern match at PureScript.CST.Errors (line 76, column 5 - line 78, column 23): " + [ v.value0.constructor.name ]);
    };
    if (v instanceof PureScript_CST_Types.TokRightFatArrow) {
        if (v.value0 instanceof PureScript_CST_Types.ASCII) {
            return "'=>'";
        };
        if (v.value0 instanceof PureScript_CST_Types.Unicode) {
            return "'\u21d2'";
        };
        throw new Error("Failed pattern match at PureScript.CST.Errors (line 80, column 5 - line 82, column 23): " + [ v.value0.constructor.name ]);
    };
    if (v instanceof PureScript_CST_Types.TokDoubleColon) {
        if (v.value0 instanceof PureScript_CST_Types.ASCII) {
            return "'::'";
        };
        if (v.value0 instanceof PureScript_CST_Types.Unicode) {
            return "'\u2237'";
        };
        throw new Error("Failed pattern match at PureScript.CST.Errors (line 84, column 5 - line 86, column 23): " + [ v.value0.constructor.name ]);
    };
    if (v instanceof PureScript_CST_Types.TokForall) {
        if (v.value0 instanceof PureScript_CST_Types.ASCII) {
            return "forall";
        };
        if (v.value0 instanceof PureScript_CST_Types.Unicode) {
            return "'\u2200'";
        };
        throw new Error("Failed pattern match at PureScript.CST.Errors (line 88, column 5 - line 90, column 23): " + [ v.value0.constructor.name ]);
    };
    if (v instanceof PureScript_CST_Types.TokEquals) {
        return "'='";
    };
    if (v instanceof PureScript_CST_Types.TokPipe) {
        return "'|'";
    };
    if (v instanceof PureScript_CST_Types.TokTick) {
        return "`";
    };
    if (v instanceof PureScript_CST_Types.TokDot) {
        return ".";
    };
    if (v instanceof PureScript_CST_Types.TokComma) {
        return "','";
    };
    if (v instanceof PureScript_CST_Types.TokUnderscore) {
        return "'_'";
    };
    if (v instanceof PureScript_CST_Types.TokBackslash) {
        return "'\\'";
    };
    if (v instanceof PureScript_CST_Types.TokAt) {
        return "'@'";
    };
    if (v instanceof PureScript_CST_Types.TokLowerName) {
        return "identifier " + PureScript_CST_Print.printQualified(v.value0)(v.value1);
    };
    if (v instanceof PureScript_CST_Types.TokUpperName) {
        return "proper identifier " + PureScript_CST_Print.printQualified(v.value0)(v.value1);
    };
    if (v instanceof PureScript_CST_Types.TokOperator) {
        return "operator " + PureScript_CST_Print.printQualified(v.value0)(v.value1);
    };
    if (v instanceof PureScript_CST_Types.TokSymbolName) {
        return "symbol " + PureScript_CST_Print.printQualified(v.value0)(v.value1);
    };
    if (v instanceof PureScript_CST_Types.TokSymbolArrow) {
        if (v.value0 instanceof PureScript_CST_Types.ASCII) {
            return "(->)";
        };
        if (v.value0 instanceof PureScript_CST_Types.Unicode) {
            return "(\u2192)";
        };
        throw new Error("Failed pattern match at PureScript.CST.Errors (line 116, column 5 - line 118, column 23): " + [ v.value0.constructor.name ]);
    };
    if (v instanceof PureScript_CST_Types.TokHole) {
        return "hole ?" + v.value0;
    };
    if (v instanceof PureScript_CST_Types.TokChar) {
        return "char literal '" + (v.value0 + "'");
    };
    if (v instanceof PureScript_CST_Types.TokString) {
        return "string literal";
    };
    if (v instanceof PureScript_CST_Types.TokRawString) {
        return "raw string literal";
    };
    if (v instanceof PureScript_CST_Types.TokInt) {
        return "int literal " + v.value0;
    };
    if (v instanceof PureScript_CST_Types.TokNumber) {
        return "number literal " + v.value0;
    };
    if (v instanceof PureScript_CST_Types.TokLayoutStart) {
        return "start of indented block";
    };
    if (v instanceof PureScript_CST_Types.TokLayoutSep) {
        return "new indented block item";
    };
    if (v instanceof PureScript_CST_Types.TokLayoutEnd) {
        return "end of indented block";
    };
    throw new Error("Failed pattern match at PureScript.CST.Errors (line 58, column 19 - line 136, column 28): " + [ v.constructor.name ]);
};
var printParseError = function (v) {
    if (v instanceof UnexpectedEof) {
        return "Unexpected end of file";
    };
    if (v instanceof ExpectedEof) {
        return "Expected end of file, saw " + printTokenError(v.value0);
    };
    if (v instanceof UnexpectedToken) {
        return "Unexpected " + printTokenError(v.value0);
    };
    if (v instanceof ExpectedToken) {
        return "Expected " + (printTokenError(v.value0) + (", saw " + printTokenError(v.value1)));
    };
    if (v instanceof ExpectedClass) {
        return "Expected " + (v.value0 + (", saw " + printTokenError(v.value1)));
    };
    if (v instanceof LexExpected) {
        return "Expected " + (v.value0 + (", saw " + v.value1));
    };
    if (v instanceof LexInvalidCharEscape) {
        return "Invalid character escape \\" + v.value0;
    };
    if (v instanceof LexCharEscapeOutOfRange) {
        return "Character escape out of range \\" + v.value0;
    };
    if (v instanceof LexHexOutOfRange) {
        return "Hex integer out of range 0x" + v.value0;
    };
    if (v instanceof LexIntOutOfRange) {
        return "Int out of range " + v.value0;
    };
    if (v instanceof LexNumberOutOfRange) {
        return "Number out of range " + v.value0;
    };
    throw new Error("Failed pattern match at PureScript.CST.Errors (line 33, column 19 - line 55, column 34): " + [ v.constructor.name ]);
};
export {
    RecoveredError,
    UnexpectedEof,
    ExpectedEof,
    UnexpectedToken,
    ExpectedToken,
    ExpectedClass,
    LexExpected,
    LexInvalidCharEscape,
    LexCharEscapeOutOfRange,
    LexHexOutOfRange,
    LexIntOutOfRange,
    LexNumberOutOfRange,
    printParseError,
    printTokenError
};
//# sourceMappingURL=index.js.map
