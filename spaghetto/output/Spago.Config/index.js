// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Affjax from "../Affjax/index.js";
import * as Affjax_Node from "../Affjax.Node/index.js";
import * as Affjax_ResponseFormat from "../Affjax.ResponseFormat/index.js";
import * as Affjax_StatusCode from "../Affjax.StatusCode/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as ConvertableOptions from "../ConvertableOptions/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Codec from "../Data.Codec/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Codec_Argonaut_Record from "../Data.Codec.Argonaut.Record/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Filterable from "../Data.Filterable/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_HTTP_Method from "../Data.HTTP.Method/index.js";
import * as Data_Map from "../Data.Map/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Profunctor from "../Data.Profunctor/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Dodo from "../Dodo/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Uncurried from "../Effect.Uncurried/index.js";
import * as Foreign_Object from "../Foreign.Object/index.js";
import * as Node_Path from "../Node.Path/index.js";
import * as Record from "../Record/index.js";
import * as Registry_Foreign_FastGlob from "../Registry.Foreign.FastGlob/index.js";
import * as Registry_Internal_Codec from "../Registry.Internal.Codec/index.js";
import * as Registry_PackageName from "../Registry.PackageName/index.js";
import * as Registry_Range from "../Registry.Range/index.js";
import * as Registry_Sha256 from "../Registry.Sha256/index.js";
import * as Registry_Version from "../Registry.Version/index.js";
import * as Spago_Core_Config from "../Spago.Core.Config/index.js";
import * as Spago_Core_Prelude from "../Spago.Core.Prelude/index.js";
import * as Spago_FS from "../Spago.FS/index.js";
import * as Spago_Git from "../Spago.Git/index.js";
import * as Spago_Json from "../Spago.Json/index.js";
import * as Spago_Lock from "../Spago.Lock/index.js";
import * as Spago_Log from "../Spago.Log/index.js";
import * as Spago_Paths from "../Spago.Paths/index.js";
import * as Spago_Prelude from "../Spago.Prelude/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var eqRec = /* #__PURE__ */ Data_Eq.eqRec();
var eqRowCons = /* #__PURE__ */ Data_Eq.eqRowCons(Data_Eq.eqRowNil)();
var versionIsSymbol = {
    reflectSymbol: function () {
        return "version";
    }
};
var packagesIsSymbol = {
    reflectSymbol: function () {
        return "packages";
    }
};
var eqMap = /* #__PURE__ */ Data_Map_Internal.eqMap(Registry_PackageName.eqPackageName);
var compilerIsSymbol = {
    reflectSymbol: function () {
        return "compiler";
    }
};
var eq = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ eqMap(Spago_Lock.eqLockEntry));
var eq1 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ eqMap(Spago_Core_Config.eqExtraPackage));
var eq2 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Maybe.eqMaybe(Spago_Core_Config.eqSetAddress));
var dependenciesIsSymbol = {
    reflectSymbol: function () {
        return "dependencies";
    }
};
var eq3 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ eqMap(/* #__PURE__ */ eqRec(/* #__PURE__ */ Data_Eq.eqRowCons(/* #__PURE__ */ Data_Eq.eqRowCons(/* #__PURE__ */ eqRowCons({
    reflectSymbol: function () {
        return "test_dependencies";
    }
})(Spago_Core_Config.eqDependencies))()({
    reflectSymbol: function () {
        return "path";
    }
})(Data_Eq.eqString))()(dependenciesIsSymbol)(Spago_Core_Config.eqDependencies))));
var wrapIso = /* #__PURE__ */ Data_Profunctor.wrapIso(/* #__PURE__ */ Data_Codec.profunctorCodec(Data_Either.functorEither))();
var object = /* #__PURE__ */ Data_Codec_Argonaut_Record.object();
var rowListCodecCons = /* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(Data_Codec_Argonaut_Record.rowListCodecNil)()();
var bind = /* #__PURE__ */ Control_Bind.bind(Spago_Core_Prelude.bindSpago);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Spago_Core_Prelude.monadEffectSpago);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(Spago_Core_Prelude.bindSpago);
var logDebug = /* #__PURE__ */ Spago_Log.logDebug(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago);
var logDebug1 = /* #__PURE__ */ logDebug(Spago_Log.loggableString);
var exists = /* #__PURE__ */ Spago_FS.exists(Spago_Core_Prelude.monadEffectSpago);
var pure = /* #__PURE__ */ Control_Applicative.pure(Spago_Core_Prelude.applicativeSpago);
var liftAff = /* #__PURE__ */ Effect_Aff_Class.liftAff(Spago_Core_Prelude.monadAffSpago);
var hashString = /* #__PURE__ */ Registry_Sha256.hashString(Effect_Class.monadEffectEffect);
var mkdirp = /* #__PURE__ */ Spago_FS.mkdirp(Spago_Core_Prelude.monadAffSpago);
var writeTextFile = /* #__PURE__ */ Spago_FS.writeTextFile(Spago_Core_Prelude.monadAffSpago);
var toUnfoldable = /* #__PURE__ */ Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var fromFoldable = /* #__PURE__ */ Data_Map_Internal.fromFoldable(Registry_PackageName.ordPackageName)(Data_Foldable.foldableArray);
var logInfo = /* #__PURE__ */ Spago_Log.logInfo(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var die = /* #__PURE__ */ Spago_Log.die(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago);
var die1 = /* #__PURE__ */ die(Spago_Log.loggableString);
var eq4 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Maybe.eqMaybe(Data_Eq.eqBoolean));
var match$prime = /* #__PURE__ */ Registry_Foreign_FastGlob["match$prime"](Effect_Aff_Class.monadAffAff)(/* #__PURE__ */ ConvertableOptions.defaultsRecord()());
var map1 = /* #__PURE__ */ Data_Functor.map(Spago_Core_Prelude.functorSpago);
var partitionMap = /* #__PURE__ */ Data_Filterable.partitionMap(Data_Filterable.filterableArray);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableArray)(Spago_Core_Prelude.applicativeSpago);
var unless = /* #__PURE__ */ Control_Applicative.unless(Spago_Core_Prelude.applicativeSpago);
var loggableArray = /* #__PURE__ */ Spago_Log.loggableArray(Spago_Log.loggableDocc);
var logDebug2 = /* #__PURE__ */ logDebug(loggableArray);
var toDoc = /* #__PURE__ */ Spago_Log.toDoc(Spago_Log.loggableString);
var lines = /* #__PURE__ */ Dodo.lines(Data_Foldable.foldableArray);
var show = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Show.showArray(Data_Show.showString));
var logWarn = /* #__PURE__ */ Spago_Log.logWarn(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago);
var loggableArray1 = /* #__PURE__ */ Spago_Log.loggableArray(Spago_Log.loggableString);
var logWarn1 = /* #__PURE__ */ logWarn(loggableArray1);
var append1 = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var voidRight = /* #__PURE__ */ Data_Functor.voidRight(Data_Maybe.functorMaybe);
var mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(Data_Tuple.functorTuple);
var $$delete = /* #__PURE__ */ Record["delete"]({
    reflectSymbol: function () {
        return "configWorkspace";
    }
})()();
var logDebug3 = /* #__PURE__ */ logDebug(loggableArray1);
var sort = /* #__PURE__ */ Data_Array.sort(Data_Ord.ordString);
var lookup = /* #__PURE__ */ Data_Map_Internal.lookup(Registry_PackageName.ordPackageName);
var die2 = /* #__PURE__ */ die(loggableArray);
var fromFoldable1 = /* #__PURE__ */ Data_Array.fromFoldable(Data_Set.foldableSet);
var toDoc1 = /* #__PURE__ */ Spago_Log.toDoc(/* #__PURE__ */ Spago_Log.loggableArray(Spago_Log.loggablePackageName));
var show1 = /* #__PURE__ */ Data_Show.show(Data_Show.showString);
var notEq = /* #__PURE__ */ Data_Eq.notEq(Affjax_StatusCode.eqStatusCode);
var show2 = /* #__PURE__ */ Data_Show.show(Affjax_StatusCode.showStatusCode);
var show3 = /* #__PURE__ */ Data_Show.show(Data_Codec_Argonaut.showJsonDecodeError);
var map2 = /* #__PURE__ */ Data_Functor.map(Data_Map_Internal.functorMap);
var logWarn2 = /* #__PURE__ */ logWarn(Spago_Log.loggableString);
var union = /* #__PURE__ */ Data_Map_Internal.union(Registry_PackageName.ordPackageName);
var logSuccess = /* #__PURE__ */ Spago_Log.logSuccess(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago);
var logSuccess1 = /* #__PURE__ */ logSuccess(Spago_Log.loggableString);
var logSuccess2 = /* #__PURE__ */ logSuccess(loggableArray);
var show4 = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var toUnfoldable1 = /* #__PURE__ */ Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray);
var bindFlipped = /* #__PURE__ */ Control_Bind.bindFlipped(Data_Maybe.bindMaybe);
var ls = /* #__PURE__ */ Spago_FS.ls(Spago_Core_Prelude.monadAffSpago);
var eq5 = /* #__PURE__ */ Data_Eq.eq(Registry_Version.eqVersion);
var sort1 = /* #__PURE__ */ Data_Array.sort(Registry_Version.ordVersion);
var find = /* #__PURE__ */ Data_Foldable.find(Data_Foldable.foldableArray);
var greaterThan = /* #__PURE__ */ Data_Ord.greaterThan(Registry_Version.ordVersion);
var insert = /* #__PURE__ */ Data_Map_Internal.insert(Registry_Version.ordVersion);
var foldM = /* #__PURE__ */ Data_Array.foldM(Spago_Core_Prelude.monadSpago);
var ask = /* #__PURE__ */ Control_Monad_Reader_Class.ask(Spago_Core_Prelude.monadAskSpago);
var lookup1 = /* #__PURE__ */ Data_Map_Internal.lookup(Registry_Version.ordVersion);
var fromFoldable2 = /* #__PURE__ */ Foreign_Object.fromFoldable(Data_Foldable.foldableArray);
var WithTestGlobs = /* #__PURE__ */ (function () {
    function WithTestGlobs() {

    };
    WithTestGlobs.value = new WithTestGlobs();
    return WithTestGlobs;
})();
var NoTestGlobs = /* #__PURE__ */ (function () {
    function NoTestGlobs() {

    };
    NoTestGlobs.value = new NoTestGlobs();
    return NoTestGlobs;
})();
var OnlyTestGlobs = /* #__PURE__ */ (function () {
    function OnlyTestGlobs() {

    };
    OnlyTestGlobs.value = new OnlyTestGlobs();
    return OnlyTestGlobs;
})();
var RemotePackageSet = function (x) {
    return x;
};
var RegistryVersion = /* #__PURE__ */ (function () {
    function RegistryVersion(value0) {
        this.value0 = value0;
    };
    RegistryVersion.create = function (value0) {
        return new RegistryVersion(value0);
    };
    return RegistryVersion;
})();
var GitPackage = /* #__PURE__ */ (function () {
    function GitPackage(value0) {
        this.value0 = value0;
    };
    GitPackage.create = function (value0) {
        return new GitPackage(value0);
    };
    return GitPackage;
})();
var LocalPackage = /* #__PURE__ */ (function () {
    function LocalPackage(value0) {
        this.value0 = value0;
    };
    LocalPackage.create = function (value0) {
        return new LocalPackage(value0);
    };
    return LocalPackage;
})();
var WorkspacePackage = /* #__PURE__ */ (function () {
    function WorkspacePackage(value0) {
        this.value0 = value0;
    };
    WorkspacePackage.create = function (value0) {
        return new WorkspacePackage(value0);
    };
    return WorkspacePackage;
})();
var PackageSet = /* #__PURE__ */ (function () {
    function PackageSet(value0) {
        this.value0 = value0;
    };
    PackageSet.create = function (value0) {
        return new PackageSet(value0);
    };
    return PackageSet;
})();
var Registry = /* #__PURE__ */ (function () {
    function Registry(value0) {
        this.value0 = value0;
    };
    Registry.create = function (value0) {
        return new Registry(value0);
    };
    return Registry;
})();
var UseLockfile = /* #__PURE__ */ (function () {
    function UseLockfile(value0) {
        this.value0 = value0;
    };
    UseLockfile.create = function (value0) {
        return new UseLockfile(value0);
    };
    return UseLockfile;
})();
var GenerateLockfile = /* #__PURE__ */ (function () {
    function GenerateLockfile() {

    };
    GenerateLockfile.value = new GenerateLockfile();
    return GenerateLockfile;
})();
var SkipLockfile = /* #__PURE__ */ (function () {
    function SkipLockfile() {

    };
    SkipLockfile.value = new SkipLockfile();
    return SkipLockfile;
})();
var LegacyPackageSet = function (x) {
    return x;
};
var newtypeRemotePackageSet_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeLegacyPackageSet_ = {
    Coercible0: function () {
        return undefined;
    }
};
var eqLockfileSettings = {
    eq: function (x) {
        return function (y) {
            if (x instanceof UseLockfile && y instanceof UseLockfile) {
                return eq(x.value0.packages)(y.value0.packages) && (eq1(x.value0.workspace.extra_packages)(y.value0.workspace.extra_packages) && eq2(x.value0.workspace.package_set)(y.value0.workspace.package_set) && eq3(x.value0.workspace.packages)(y.value0.workspace.packages));
            };
            if (x instanceof GenerateLockfile && y instanceof GenerateLockfile) {
                return true;
            };
            if (x instanceof SkipLockfile && y instanceof SkipLockfile) {
                return true;
            };
            return false;
        };
    }
};
var updatePackageSetHashInConfig = function (doc) {
    return function (sha) {
        return function () {
            return $foreign.updatePackageSetHashInConfigImpl(doc, Registry_Sha256.print(sha));
        };
    };
};
var testGlob = "test/**/*.purs";
var srcGlob = "src/**/*.purs";
var remotePackageSetCodec = /* #__PURE__ */ wrapIso(RemotePackageSet)(/* #__PURE__ */ object(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ rowListCodecCons(versionIsSymbol))()()(packagesIsSymbol))()()(compilerIsSymbol))("PackageSet")({
    version: Registry_Version.codec,
    compiler: Registry_Version.codec,
    packages: /* #__PURE__ */ Registry_Internal_Codec.packageMap(Spago_Core_Config.remotePackageCodec)
}));
var packageSetsCachePath = /* #__PURE__ */ Node_Path.concat([ Spago_Paths.globalCachePath, "setsCAS" ]);
var packageSetResultCodec = /* #__PURE__ */ object(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ rowListCodecCons({
    reflectSymbol: function () {
        return "remotePackageSet";
    }
}))()()(compilerIsSymbol))("PackageSetResult")({
    compiler: Registry_Version.codec,
    remotePackageSet: /* #__PURE__ */ Registry_Internal_Codec.packageMap(Spago_Core_Config.remotePackageCodec)
});
var packageSetCachePath = function (v) {
    return Node_Path.concat([ packageSetsCachePath, v ]);
};
var readPackageSetFromHash = function (hash) {
    return bind(liftEffect(Spago_Prelude.shaToHex(hash)))(function (hex) {
        var path = packageSetCachePath(hex);
        return discard(logDebug1("Reading cached package set entry from " + path))(function () {
            return bind(exists(path))(function (v) {
                if (!v) {
                    return pure(new Data_Either.Left("Did not find a package set cached with hash " + Registry_Sha256.print(hash)));
                };
                if (v) {
                    return bind(liftAff(Spago_FS.readJsonFile(packageSetResultCodec)(path)))(function (v1) {
                        if (v1 instanceof Data_Either.Left) {
                            return pure(new Data_Either.Left("Error while reading cached package set " + (Registry_Sha256.print(hash) + (": " + v1.value0))));
                        };
                        if (v1 instanceof Data_Either.Right) {
                            return pure(new Data_Either.Right(v1.value0));
                        };
                        throw new Error("Failed pattern match at Spago.Config (line 431, column 72 - line 433, column 36): " + [ v1.constructor.name ]);
                    });
                };
                throw new Error("Failed pattern match at Spago.Config (line 429, column 22 - line 433, column 36): " + [ v.constructor.name ]);
            });
        });
    });
};
var writePackageSetToHash = function (result) {
    var serialised = Spago_Json.printJson(packageSetResultCodec)(result);
    return bind(liftEffect(hashString(serialised)))(function (hash) {
        return bind(liftEffect(Spago_Prelude.shaToHex(hash)))(function (hex) {
            return discard(mkdirp(packageSetsCachePath))(function () {
                return discard(writeTextFile(packageSetCachePath(hex))(serialised))(function () {
                    return pure(hash);
                });
            });
        });
    });
};
var legacyPackageSetCodec = /* #__PURE__ */ wrapIso(LegacyPackageSet)(/* #__PURE__ */ Registry_Internal_Codec.packageMap(Spago_Core_Config.legacyPackageSetEntryCodec));
var getWorkspacePackages = /* #__PURE__ */ (function () {
    var extractWorkspacePackage = function (v) {
        if (v.value1 instanceof WorkspacePackage) {
            return new Data_Maybe.Just(v.value1.value0);
        };
        return Data_Maybe.Nothing.value;
    };
    var $392 = Data_Array.mapMaybe(extractWorkspacePackage);
    return function ($393) {
        return $392(toUnfoldable((function (v) {
            if (v instanceof PackageSet) {
                return v.value0;
            };
            if (v instanceof Registry) {
                return v.value0;
            };
            throw new Error("Failed pattern match at Spago.Config (line 408, column 88 - line 410, column 18): " + [ v.constructor.name ]);
        })($393)));
    };
})();
var getPackageLocation = function (name) {
    return function ($394) {
        return Spago_Paths.mkRelative((function (v) {
            if (v instanceof RegistryVersion) {
                return Node_Path.concat([ Spago_Paths.localCachePackagesPath, Registry_PackageName.print(name) + ("-" + Registry_Version.print(v.value0)) ]);
            };
            if (v instanceof GitPackage) {
                return Node_Path.concat([ Spago_Paths.localCachePackagesPath, Registry_PackageName.print(name), v.value0.ref ]);
            };
            if (v instanceof LocalPackage) {
                return v.value0.path;
            };
            if (v instanceof WorkspacePackage) {
                return v.value0.path;
            };
            throw new Error("Failed pattern match at Spago.Config (line 377, column 48 - line 381, column 36): " + [ v.constructor.name ]);
        })($394));
    };
};
var sourceGlob = function (withTestGlobs) {
    return function (name) {
        return function ($$package) {
            return map(function (p) {
                return Node_Path.concat([ getPackageLocation(name)($$package), p ]);
            })((function () {
                if ($$package instanceof WorkspacePackage) {
                    if (!$$package.value0.hasTests && withTestGlobs instanceof OnlyTestGlobs) {
                        return [  ];
                    };
                    if (!$$package.value0.hasTests) {
                        return [ srcGlob ];
                    };
                    if ($$package.value0.hasTests && withTestGlobs instanceof OnlyTestGlobs) {
                        return [ testGlob ];
                    };
                    if ($$package.value0.hasTests && withTestGlobs instanceof NoTestGlobs) {
                        return [ srcGlob ];
                    };
                    if ($$package.value0.hasTests && withTestGlobs instanceof WithTestGlobs) {
                        return [ srcGlob, testGlob ];
                    };
                    throw new Error("Failed pattern match at Spago.Config (line 392, column 7 - line 397, column 53): " + [ $$package.value0.hasTests.constructor.name, withTestGlobs.constructor.name ]);
                };
                if ($$package instanceof GitPackage && $$package.value0.subdir instanceof Data_Maybe.Just) {
                    return [ Node_Path.concat([ $$package.value0.subdir.value0, srcGlob ]) ];
                };
                return [ srcGlob ];
            })());
        };
    };
};
var fromRemotePackage = function (v) {
    if (v instanceof Spago_Core_Config.RemoteGitPackage) {
        return new GitPackage(v.value0);
    };
    if (v instanceof Spago_Core_Config.RemoteRegistryVersion) {
        return new RegistryVersion(v.value0);
    };
    if (v instanceof Spago_Core_Config.RemoteLegacyPackage) {
        return new GitPackage({
            git: v.value0.repo,
            ref: v.value0.version,
            subdir: Data_Maybe.Nothing.value,
            dependencies: new Data_Maybe.Just(fromFoldable(map(function (p) {
                return new Data_Tuple.Tuple(p, Data_Maybe.Nothing.value);
            })(v.value0.dependencies)))
        });
    };
    throw new Error("Failed pattern match at Spago.Config (line 91, column 21 - line 99, column 6): " + [ v.constructor.name ]);
};
var fromExtraPackage = function (v) {
    if (v instanceof Spago_Core_Config.ExtraLocalPackage) {
        return new LocalPackage(v.value0);
    };
    if (v instanceof Spago_Core_Config.ExtraRemotePackage) {
        return fromRemotePackage(v.value0);
    };
    throw new Error("Failed pattern match at Spago.Config (line 86, column 20 - line 88, column 53): " + [ v.constructor.name ]);
};
var readWorkspace = function (maybeSelectedPackage) {
    return discard(logInfo("Reading Spago workspace configuration..."))(function () {
        return bind(bind(Spago_Core_Config.readConfig("spago.yaml"))(function (v) {
            if (v instanceof Data_Either.Left) {
                return die1("Couldn't parse Spago config, error:\x0a  " + v.value0);
            };
            if (v instanceof Data_Either.Right && v.value0.yaml.workspace instanceof Data_Maybe.Nothing) {
                return die1("Your spago.yaml doesn't contain a workspace section");
            };
            if (v instanceof Data_Either.Right && v.value0.yaml.workspace instanceof Data_Maybe.Just) {
                return pure({
                    workspace: v.value0.yaml.workspace.value0,
                    "package": v["value0"]["yaml"]["package"],
                    workspaceDoc: v.value0.doc
                });
            };
            throw new Error("Failed pattern match at Spago.Config (line 155, column 90 - line 158, column 114): " + [ v.constructor.name ]);
        }))(function (v) {
            return bind(bind(exists("spago.lock"))(function (v1) {
                if (v1) {
                    return bind(liftAff(Spago_FS.readYamlFile(Spago_Lock.lockfileCodec)("spago.lock")))(function (v2) {
                        if (v2 instanceof Data_Either.Left) {
                            return die1("Your project contains a spago.lock file, but it cannot be decoded:\x0a" + v2.value0);
                        };
                        if (v2 instanceof Data_Either.Right) {
                            if (eq4(v.workspace.lock)(new Data_Maybe.Just(false))) {
                                return die1("Your workspace specifies 'lock: false', but there is a spago.lock file in the workspace.");
                            };
                            if (Data_Boolean.otherwise) {
                                return pure(new UseLockfile(v2.value0));
                            };
                        };
                        throw new Error("Failed pattern match at Spago.Config (line 161, column 75 - line 169, column 40): " + [ v2.constructor.name ]);
                    });
                };
                if (!v1) {
                    if (eq4(v.workspace.lock)(new Data_Maybe.Just(true))) {
                        return pure(GenerateLockfile.value);
                    };
                    if (eq4(v.workspace.lock)(new Data_Maybe.Just(false))) {
                        return pure(SkipLockfile.value);
                    };
                    if (Data_Boolean.otherwise) {
                        if (v.workspace.package_set instanceof Data_Maybe.Nothing) {
                            return pure(GenerateLockfile.value);
                        };
                        if (v.workspace.package_set instanceof Data_Maybe.Just) {
                            return pure(SkipLockfile.value);
                        };
                        throw new Error("Failed pattern match at Spago.Config (line 177, column 22 - line 179, column 38): " + [ v.workspace.package_set.constructor.name ]);
                    };
                };
                throw new Error("Failed pattern match at Spago.Config (line 160, column 42 - line 179, column 38): " + [ v1.constructor.name ]);
            }))(function (lockfile) {
                return bind(exists("test"))(function (rootPackageHasTests) {
                    return bind(bind(liftAff(match$prime(Spago_Paths.cwd)([ "**/spago.yaml" ])({
                        ignore: [ ".spago", "spago.yaml" ]
                    })))(function (result) {
                        var filterGitignored = function (path) {
                            return bind(Spago_Git.isIgnored(path))(function (v1) {
                                if (v1) {
                                    return pure(new Data_Either.Left(path));
                                };
                                if (!v1) {
                                    return pure(new Data_Either.Right(path));
                                };
                                throw new Error("Failed pattern match at Spago.Config (line 190, column 32 - line 192, column 37): " + [ v1.constructor.name ]);
                            });
                        };
                        return bind(map1(partitionMap(identity))(traverse(filterGitignored)(result.succeeded)))(function (v1) {
                            return pure({
                                succeeded: v1.right,
                                failed: result.failed,
                                ignored: v1.left
                            });
                        });
                    }))(function (v1) {
                        return discard(unless(Data_Array["null"](v1.succeeded))(logDebug2([ toDoc("Found packages at these paths:"), Dodo.indent(lines(map(toDoc)(v1.succeeded))) ])))(function () {
                            return discard(unless(Data_Array["null"](v1.failed))(logDebug1("Failed to sanitise some of the glob matches: " + show(v1.failed))))(function () {
                                return discard(unless(Data_Array["null"](v1.ignored))(logDebug1("Ignored some of the glob matches as they are gitignored: " + show(v1.ignored))))(function () {
                                    var readWorkspaceConfig = function (path) {
                                        return bind(Spago_Core_Config.readConfig(path))(function (maybeConfig) {
                                            return bind(exists(Node_Path.concat([ Node_Path.dirname(path), "test" ])))(function (hasTests) {
                                                return pure((function () {
                                                    if (maybeConfig instanceof Data_Either.Left) {
                                                        return new Data_Either.Left("Could not read config at path " + (path + ("\x0aError was: " + maybeConfig.value0)));
                                                    };
                                                    if (maybeConfig instanceof Data_Either.Right && maybeConfig["value0"]["yaml"]["package"] instanceof Data_Maybe.Nothing) {
                                                        return new Data_Either.Left("No package found for config at path: " + path);
                                                    };
                                                    if (maybeConfig instanceof Data_Either.Right && maybeConfig["value0"]["yaml"]["package"] instanceof Data_Maybe.Just) {
                                                        return new Data_Either.Right(new Data_Tuple.Tuple(maybeConfig["value0"]["yaml"]["package"].value0.name, {
                                                            path: Node_Path.dirname(path),
                                                            "package": maybeConfig["value0"]["yaml"]["package"].value0,
                                                            configWorkspace: maybeConfig.value0.yaml.workspace,
                                                            doc: maybeConfig.value0.doc,
                                                            hasTests: hasTests
                                                        }));
                                                    };
                                                    throw new Error("Failed pattern match at Spago.Config (line 208, column 14 - line 213, column 106): " + [ maybeConfig.constructor.name ]);
                                                })());
                                            });
                                        });
                                    };
                                    return bind(map1(partitionMap(identity))(traverse(readWorkspaceConfig)(v1.succeeded)))(function (v2) {
                                        return discard(unless(Data_Array["null"](v2.left))(logWarn1(append1([ "Failed to read some configs:" ])(v2.left))))(function () {
                                            var configPathsWithWorkspaces = Data_Array.mapMaybe(function (v3) {
                                                return voidRight(v3.value1.path)(v3.value1.configWorkspace);
                                            })(v2.right);
                                            var v3 = partitionMap(function (config) {
                                                var configPath = (Data_Tuple.snd(config)).path;
                                                var $297 = Data_Array.any(function (p) {
                                                    return Data_Maybe.isJust(Data_String_CodeUnits.stripPrefix(p)(configPath));
                                                })(configPathsWithWorkspaces);
                                                if ($297) {
                                                    return new Data_Either.Left(configPath);
                                                };
                                                return new Data_Either.Right(mapFlipped(config)($$delete(Type_Proxy["Proxy"].value)));
                                            })(v2.right);
                                            return discard(unless(Data_Array["null"](v3.left))(logDebug3(append1([ "Excluding configs that use a different workspace (directly or implicitly via parent directory's config):" ])(sort(v2.left)))))(function () {
                                                var workspacePackages = fromFoldable(append1(v3.right)((function () {
                                                    if (v["package"] instanceof Data_Maybe.Nothing) {
                                                        return [  ];
                                                    };
                                                    if (v["package"] instanceof Data_Maybe.Just) {
                                                        return [ new Data_Tuple.Tuple(v["package"].value0.name, {
                                                            path: "./",
                                                            "package": v["package"].value0,
                                                            doc: v.workspaceDoc,
                                                            hasTests: rootPackageHasTests
                                                        }) ];
                                                    };
                                                    throw new Error("Failed pattern match at Spago.Config (line 234, column 67 - line 236, column 119): " + [ v["package"].constructor.name ]);
                                                })()));
                                                return bind((function () {
                                                    if (maybeSelectedPackage instanceof Data_Maybe.Nothing) {
                                                        var v4 = Data_Array.uncons(toUnfoldable(workspacePackages));
                                                        if (v4 instanceof Data_Maybe.Nothing) {
                                                            return die1("No valid packages found in the current project, halting.");
                                                        };
                                                        if (v4 instanceof Data_Maybe.Just && v4.value0.tail.length === 0) {
                                                            return discard(logDebug1("Selecting package " + (Registry_PackageName.print(v4.value0.head.value0) + (" from " + v4.value0.head.value1.path))))(function () {
                                                                return pure(new Data_Maybe.Just(v4.value0.head.value1));
                                                            });
                                                        };
                                                        return pure(Data_Maybe.Nothing.value);
                                                    };
                                                    if (maybeSelectedPackage instanceof Data_Maybe.Just) {
                                                        var v4 = lookup(maybeSelectedPackage.value0)(workspacePackages);
                                                        if (v4 instanceof Data_Maybe.Nothing) {
                                                            return die2(append1([ toDoc("Selected package " + (Registry_PackageName.print(maybeSelectedPackage.value0) + " was not found in the local packages.")) ])((function () {
                                                                var v5 = fromFoldable1(Data_Map.keys(workspacePackages));
                                                                if (v5.length === 0) {
                                                                    return [ toDoc("No available packages.") ];
                                                                };
                                                                return [ toDoc("Available packages:"), Dodo.indent(toDoc1(v5)) ];
                                                            })()));
                                                        };
                                                        if (v4 instanceof Data_Maybe.Just) {
                                                            return pure(new Data_Maybe.Just(v4.value0));
                                                        };
                                                        throw new Error("Failed pattern match at Spago.Config (line 248, column 18 - line 254, column 30): " + [ v4.constructor.name ]);
                                                    };
                                                    throw new Error("Failed pattern match at Spago.Config (line 239, column 20 - line 254, column 30): " + [ maybeSelectedPackage.constructor.name ]);
                                                })())(function (maybeSelected) {
                                                    return bind((function () {
                                                        if (v.workspace.package_set instanceof Data_Maybe.Nothing) {
                                                            return discard(logDebug1("Did not find a package set in your config, using Registry solver"))(function () {
                                                                return pure({
                                                                    compatibleCompiler: Spago_Core_Config.widestRange,
                                                                    remotePackageSet: Data_Maybe.Nothing.value
                                                                });
                                                            });
                                                        };
                                                        if (v.workspace.package_set instanceof Data_Maybe.Just && v.workspace.package_set.value0 instanceof Spago_Core_Config.SetFromRegistry) {
                                                            return discard(logDebug1("Reading the package set from the Registry repo..."))(function () {
                                                                var packageSetPath = Node_Path.concat([ Spago_Paths.registryPath, "package-sets", Registry_Version.print(v.workspace.package_set.value0.value0.registry) + ".json" ]);
                                                                return bind(liftAff(Spago_FS.readJsonFile(remotePackageSetCodec)(packageSetPath)))(function (v5) {
                                                                    if (v5 instanceof Data_Either.Left) {
                                                                        return die1("Couldn't read the package set: " + v5.value0);
                                                                    };
                                                                    if (v5 instanceof Data_Either.Right) {
                                                                        return discard(logInfo("Read the package set from the registry"))(function () {
                                                                            return pure({
                                                                                compatibleCompiler: Registry_Range.caret(v5.value0.compiler),
                                                                                remotePackageSet: new Data_Maybe.Just(v5.value0.packages)
                                                                            });
                                                                        });
                                                                    };
                                                                    throw new Error("Failed pattern match at Spago.Config (line 267, column 74 - line 274, column 14): " + [ v5.constructor.name ]);
                                                                });
                                                            });
                                                        };
                                                        if (v.workspace.package_set instanceof Data_Maybe.Just && v.workspace.package_set.value0 instanceof Spago_Core_Config.SetFromUrl) {
                                                            var fetchPackageSet = discard(logDebug1("Reading the package set from URL: " + v.workspace.package_set.value0.value0.url))(function () {
                                                                return bind((function () {
                                                                    var v4 = Spago_Prelude.parseUrl(v.workspace.package_set.value0.value0.url);
                                                                    if (v4 instanceof Data_Either.Left) {
                                                                        return die1("Could not parse URL for the package set, error: " + show1(v4.value0));
                                                                    };
                                                                    if (v4 instanceof Data_Either.Right) {
                                                                        return pure(v4.value0.href);
                                                                    };
                                                                    throw new Error("Failed pattern match at Spago.Config (line 280, column 18 - line 282, column 35): " + [ v4.constructor.name ]);
                                                                })())(function (url) {
                                                                    return bind(liftAff(Affjax_Node.request({
                                                                        method: new Data_Either.Left(Data_HTTP_Method.GET.value),
                                                                        url: url,
                                                                        headers: Affjax.defaultRequest.headers,
                                                                        content: Affjax.defaultRequest.content,
                                                                        username: Affjax.defaultRequest.username,
                                                                        password: Affjax.defaultRequest.password,
                                                                        withCredentials: Affjax.defaultRequest.withCredentials,
                                                                        responseFormat: Affjax_ResponseFormat.string,
                                                                        timeout: Affjax.defaultRequest.timeout
                                                                    })))(function (response) {
                                                                        if (response instanceof Data_Either.Left) {
                                                                            return die1("Couldn't fetch package set:\x0a  " + Affjax.printError(response.value0));
                                                                        };
                                                                        if (response instanceof Data_Either.Right && notEq(response.value0.status)(200)) {
                                                                            return die1("Couldn't fetch package set, status was not ok " + (show2(response.value0.status) + (", got answer:\x0a  " + response.value0.body)));
                                                                        };
                                                                        if (response instanceof Data_Either.Right) {
                                                                            return discard(logDebug1("Fetching package set - got status: " + show2(response.value0.status)))(function () {
                                                                                var v4 = Spago_Json.parseJson(remotePackageSetCodec)(response.value0.body);
                                                                                if (v4 instanceof Data_Either.Right) {
                                                                                    return discard(logDebug1("Read a new-format package set from URL"))(function () {
                                                                                        return pure({
                                                                                            compiler: v4.value0.compiler,
                                                                                            remotePackageSet: v4.value0.packages
                                                                                        });
                                                                                    });
                                                                                };
                                                                                if (v4 instanceof Data_Either.Left) {
                                                                                    return discard(logDebug3([ "Couldn't parse remote package set in modern format, error:", "  " + show3(v4.value0), "Trying with the legacy format..." ]))(function () {
                                                                                        var v5 = Spago_Json.parseJson(legacyPackageSetCodec)(response.value0.body);
                                                                                        if (v5 instanceof Data_Either.Left) {
                                                                                            return die1("Couldn't parse remote package set, error: " + show3(v5.value0));
                                                                                        };
                                                                                        if (v5 instanceof Data_Either.Right) {
                                                                                            return discard(logDebug1("Read legacy package set from URL"))(function () {
                                                                                                return bind((function () {
                                                                                                    var v6 = lookup(Spago_Prelude.unsafeFromRight(Registry_PackageName.parse("metadata")))(v5.value0);
                                                                                                    if (v6 instanceof Data_Maybe.Just) {
                                                                                                        return pure(Spago_Prelude.unsafeFromRight(Spago_Prelude.parseLenientVersion(v6.value0.version)));
                                                                                                    };
                                                                                                    if (v6 instanceof Data_Maybe.Nothing) {
                                                                                                        return die1("Couldn't find 'metadata' package in legacy package set.");
                                                                                                    };
                                                                                                    throw new Error("Failed pattern match at Spago.Config (line 300, column 34 - line 302, column 99): " + [ v6.constructor.name ]);
                                                                                                })())(function (version) {
                                                                                                    return pure({
                                                                                                        compiler: version,
                                                                                                        remotePackageSet: map2(Spago_Core_Config.RemoteLegacyPackage.create)(v5.value0)
                                                                                                    });
                                                                                                });
                                                                                            });
                                                                                        };
                                                                                        throw new Error("Failed pattern match at Spago.Config (line 296, column 19 - line 303, column 101): " + [ v5.constructor.name ]);
                                                                                    });
                                                                                };
                                                                                throw new Error("Failed pattern match at Spago.Config (line 290, column 15 - line 303, column 101): " + [ v4.constructor.name ]);
                                                                            });
                                                                        };
                                                                        throw new Error("Failed pattern match at Spago.Config (line 284, column 11 - line 303, column 101): " + [ response.constructor.name ]);
                                                                    });
                                                                });
                                                            });
                                                            return bind((function () {
                                                                if (v.workspace.package_set.value0.value0.hash instanceof Data_Maybe.Just) {
                                                                    return bind(readPackageSetFromHash(v.workspace.package_set.value0.value0.hash.value0))(function (v4) {
                                                                        if (v4 instanceof Data_Either.Left) {
                                                                            return discard(logDebug1(show1(v4.value0)))(function () {
                                                                                return fetchPackageSet;
                                                                            });
                                                                        };
                                                                        if (v4 instanceof Data_Either.Right) {
                                                                            return pure(v4.value0);
                                                                        };
                                                                        throw new Error("Failed pattern match at Spago.Config (line 305, column 54 - line 309, column 28): " + [ v4.constructor.name ]);
                                                                    });
                                                                };
                                                                if (v.workspace.package_set.value0.value0.hash instanceof Data_Maybe.Nothing) {
                                                                    return discard(logWarn2("Did not find a hash for your package set import, adding it to your config..."))(function () {
                                                                        return fetchPackageSet;
                                                                    });
                                                                };
                                                                throw new Error("Failed pattern match at Spago.Config (line 304, column 17 - line 312, column 26): " + [ v.workspace.package_set.value0.value0.hash.constructor.name ]);
                                                            })())(function (result) {
                                                                return bind(writePackageSetToHash(result))(function (newHash) {
                                                                    return discard(logDebug1("Package set hash: " + Registry_Sha256.print(newHash)))(function () {
                                                                        return discard(liftEffect(updatePackageSetHashInConfig(v.workspaceDoc)(newHash)))(function () {
                                                                            return discard(liftAff(Spago_FS.writeYamlDocFile("spago.yaml")(v.workspaceDoc)))(function () {
                                                                                return pure({
                                                                                    compatibleCompiler: Registry_Range.caret(result.compiler),
                                                                                    remotePackageSet: new Data_Maybe.Just(result.remotePackageSet)
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        };
                                                        throw new Error("Failed pattern match at Spago.Config (line 257, column 47 - line 320, column 10): " + [ v.workspace.package_set.constructor.name ]);
                                                    })())(function (v4) {
                                                        var packageSet = (function () {
                                                            var overrides = union(map2(WorkspacePackage.create)(workspacePackages))(map2(fromExtraPackage)(Data_Maybe.fromMaybe(Data_Map_Internal.empty)(v.workspace.extra_packages)));
                                                            if (v4.remotePackageSet instanceof Data_Maybe.Nothing) {
                                                                return new Registry(overrides);
                                                            };
                                                            if (v4.remotePackageSet instanceof Data_Maybe.Just) {
                                                                return new PackageSet(union(overrides)(map2(fromRemotePackage)(v4.remotePackageSet.value0)));
                                                            };
                                                            throw new Error("Failed pattern match at Spago.Config (line 335, column 9 - line 339, column 40): " + [ v4.remotePackageSet.constructor.name ]);
                                                        })();
                                                        return discard((function () {
                                                            if (maybeSelected instanceof Data_Maybe.Just) {
                                                                return discard(logSuccess1("Selecting package to build: " + Registry_PackageName.print(maybeSelected["value0"]["package"].name)))(function () {
                                                                    return logDebug1("Package path: " + maybeSelected.value0.path);
                                                                });
                                                            };
                                                            if (maybeSelected instanceof Data_Maybe.Nothing) {
                                                                return logSuccess2([ toDoc("Selecting " + (show4(Data_Map_Internal.size(workspacePackages)) + " packages to build:")), Spago_Log.indent2(toDoc1(toUnfoldable1(Data_Map.keys(workspacePackages)))) ]);
                                                            };
                                                            throw new Error("Failed pattern match at Spago.Config (line 341, column 3 - line 349, column 10): " + [ maybeSelected.constructor.name ]);
                                                        })())(function () {
                                                            var buildOptions = {
                                                                output: bindFlipped(function (v5) {
                                                                    return v5.output;
                                                                })(v.workspace.build_opts),
                                                                pedanticPackages: Data_Maybe.fromMaybe(false)(bindFlipped(function (v5) {
                                                                    return v5.pedantic_packages;
                                                                })(v.workspace.build_opts)),
                                                                censorBuildWarnings: bindFlipped(function (v5) {
                                                                    return v5.censor_warnings;
                                                                })(v.workspace.build_opts),
                                                                censorCodes: bindFlipped(function (v5) {
                                                                    return v5.censor_codes;
                                                                })(v.workspace.build_opts),
                                                                filterCodes: bindFlipped(function (v5) {
                                                                    return v5.filter_codes;
                                                                })(v.workspace.build_opts),
                                                                statVerbosity: bindFlipped(function (v5) {
                                                                    return v5.stat_verbosity;
                                                                })(v.workspace.build_opts),
                                                                showSource: bindFlipped(function (v5) {
                                                                    return v5.show_source;
                                                                })(v.workspace.build_opts),
                                                                strict: bindFlipped(function (v5) {
                                                                    return v5.strict;
                                                                })(v.workspace.build_opts),
                                                                persistWarnings: bindFlipped(function (v5) {
                                                                    return v5.persist_warnings;
                                                                })(v.workspace.build_opts)
                                                            };
                                                            return pure({
                                                                selected: maybeSelected,
                                                                packageSet: packageSet,
                                                                compatibleCompiler: v4.compatibleCompiler,
                                                                backend: v.workspace.backend,
                                                                buildOptions: buildOptions,
                                                                doc: v.workspaceDoc,
                                                                originalConfig: v.workspace,
                                                                lockfile: lockfile
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};
var findPackageSet = function (maybeSet) {
    var parseSetVersion = function (str) {
        return Registry_Version.parse((function () {
            var v = Data_String_CodeUnits.stripSuffix(".json")(str);
            if (v instanceof Data_Maybe.Nothing) {
                return str;
            };
            if (v instanceof Data_Maybe.Just) {
                return v.value0;
            };
            throw new Error("Failed pattern match at Spago.Config (line 472, column 41 - line 474, column 18): " + [ v.constructor.name ]);
        })());
    };
    var packageSetsPath = Node_Path.concat([ Spago_Paths.registryPath, "package-sets" ]);
    return bind(map1((function () {
        var $395 = map(parseSetVersion);
        return function ($396) {
            return Spago_Prelude.partitionEithers($395($396));
        };
    })())(ls(packageSetsPath)))(function (v) {
        return discard(unless(Data_Array["null"](v.fail))(logDebug2(append1([ toDoc("Failed to parse some package-sets versions:") ])(map(function ($397) {
            return Dodo.indent(toDoc(show1($397)));
        })(v.fail)))))(function () {
            if (maybeSet instanceof Data_Maybe.Just) {
                var v1 = Data_Array.find(function (v2) {
                    return eq5(v2)(maybeSet.value0);
                })(v.success);
                if (v1 instanceof Data_Maybe.Just) {
                    return pure(maybeSet.value0);
                };
                if (v1 instanceof Data_Maybe.Nothing) {
                    return die2(append1([ toDoc("Could not find desired set " + (Registry_Version.print(maybeSet.value0) + " in the list of available set versions:")) ])(map(function ($398) {
                        return Dodo.indent(toDoc(Registry_Version.print($398)));
                    })(sort1(v.success))));
                };
                throw new Error("Failed pattern match at Spago.Config (line 483, column 24 - line 486, column 77): " + [ v1.constructor.name ]);
            };
            if (maybeSet instanceof Data_Maybe.Nothing) {
                var readPackageSet = function (setVersion) {
                    return discard(logDebug1("Reading the package set from the Registry repo..."))(function () {
                        var packageSetPath = Node_Path.concat([ packageSetsPath, Registry_Version.print(setVersion) + ".json" ]);
                        return bind(liftAff(Spago_FS.readJsonFile(remotePackageSetCodec)(packageSetPath)))(function (v1) {
                            if (v1 instanceof Data_Either.Left) {
                                return die1("Couldn't read the package set: " + v1.value0);
                            };
                            if (v1 instanceof Data_Either.Right) {
                                return discard(logDebug1("Read the package set " + (Registry_Version.print(setVersion) + " from the registry")))(function () {
                                    return pure(v1.value0);
                                });
                            };
                            throw new Error("Failed pattern match at Spago.Config (line 495, column 78 - line 499, column 38): " + [ v1.constructor.name ]);
                        });
                    });
                };
                var accVersions = function (index) {
                    return function (newSetVersion) {
                        var maybeResult = find(function (v1) {
                            return Registry_Version.major(v1.value1) === Registry_Version.major(newSetVersion);
                        })(toUnfoldable(index));
                        if (maybeResult instanceof Data_Maybe.Just) {
                            var $378 = greaterThan(newSetVersion)(maybeResult.value0.value1);
                            if ($378) {
                                return discard(logDebug1("Updating to package set " + (Registry_Version.print(newSetVersion) + (" for compiler " + Registry_Version.print(maybeResult.value0.value0)))))(function () {
                                    return pure(insert(maybeResult.value0.value0)(newSetVersion)(index));
                                });
                            };
                            return pure(index);
                        };
                        if (maybeResult instanceof Data_Maybe.Nothing) {
                            return bind(readPackageSet(newSetVersion))(function (packageSet) {
                                return discard(logDebug1("Inserting package set " + (Registry_Version.print(newSetVersion) + (" for compiler " + Registry_Version.print(packageSet.compiler)))))(function () {
                                    return pure(insert(packageSet.compiler)(newSetVersion)(index));
                                });
                            });
                        };
                        throw new Error("Failed pattern match at Spago.Config (line 503, column 11 - line 516, column 72): " + [ maybeResult.constructor.name ]);
                    };
                };
                return bind(foldM(accVersions)(Data_Map_Internal.empty)(v.success))(function (v1) {
                    return discard(logDebug3([ "Package set index", Spago_Json.printJson(Registry_Internal_Codec.versionMap(Registry_Version.codec))(v1) ]))(function () {
                        return bind(ask)(function (v2) {
                            var v3 = lookup1(v2.purs.version)(v1);
                            if (v3 instanceof Data_Maybe.Just) {
                                return pure(v3.value0);
                            };
                            if (v3 instanceof Data_Maybe.Nothing) {
                                return die2(append1([ toDoc("No package set is compatible with your compiler version " + Registry_Version.print(v2.purs.version)), toDoc("Compatible versions:") ])(map(function ($399) {
                                    return Dodo.indent(toDoc(Registry_Version.print($399)));
                                })(fromFoldable1(Data_Map.keys(v1)))));
                            };
                            throw new Error("Failed pattern match at Spago.Config (line 522, column 7 - line 527, column 92): " + [ v3.constructor.name ]);
                        });
                    });
                });
            };
            throw new Error("Failed pattern match at Spago.Config (line 481, column 3 - line 527, column 92): " + [ maybeSet.constructor.name ]);
        });
    });
};
var addRangesToConfig = function (doc) {
    var $400 = Effect_Uncurried.runEffectFn2($foreign.addRangesToConfigImpl)(doc);
    var $401 = map(function (v) {
        return new Data_Tuple.Tuple(Registry_PackageName.print(v.value0), Spago_Core_Config.printSpagoRange(v.value1));
    });
    return function ($402) {
        return $400(fromFoldable2($401(toUnfoldable($402))));
    };
};
var addPackagesToConfig = function (doc) {
    return function (pkgs) {
        return function () {
            return $foreign.addPackagesToConfigImpl(doc, map(Registry_PackageName.print)(pkgs));
        };
    };
};
export {
    UseLockfile,
    GenerateLockfile,
    SkipLockfile,
    RegistryVersion,
    GitPackage,
    LocalPackage,
    WorkspacePackage,
    PackageSet,
    Registry,
    WithTestGlobs,
    NoTestGlobs,
    OnlyTestGlobs,
    addPackagesToConfig,
    addRangesToConfig,
    findPackageSet,
    getPackageLocation,
    getWorkspacePackages,
    readWorkspace,
    sourceGlob,
    eqLockfileSettings
};
export {
    BundleBrowser,
    BundleNode,
    BundleApp,
    BundleModule,
    CensorAllWarnings,
    CensorDependencyWarnings,
    CensorNoWarnings,
    CensorProjectWarnings,
    Dependencies,
    ExtraLocalPackage,
    ExtraRemotePackage,
    RemoteGitPackage,
    RemoteLegacyPackage,
    RemoteRegistryVersion,
    SetFromRegistry,
    SetFromUrl,
    NoSourceCode,
    ShowSourceCode,
    CompactStats,
    NoStats,
    VerboseStats,
    configCodec,
    dependenciesCodec,
    extraPackageCodec,
    gitPackageCodec,
    legacyPackageSetEntryCodec,
    localPackageCodec,
    packageConfigCodec,
    parseBundleType,
    parsePlatform,
    printSpagoRange,
    readConfig,
    remotePackageCodec,
    setAddressCodec,
    widestRange
} from "../Spago.Core.Config/index.js";
