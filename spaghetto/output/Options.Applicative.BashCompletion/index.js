// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_NonEmpty from "../Data.Array.NonEmpty/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Exists from "../Data.Exists/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Generic_Rep from "../Data.Generic.Rep/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Show_Generic from "../Data.Show.Generic/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Effect from "../Effect/index.js";
import * as Options_Applicative_Builder from "../Options.Applicative.Builder/index.js";
import * as Options_Applicative_Builder_Internal from "../Options.Applicative.Builder.Internal/index.js";
import * as Options_Applicative_Common from "../Options.Applicative.Common/index.js";
import * as Options_Applicative_Help_Chunk from "../Options.Applicative.Help.Chunk/index.js";
import * as Options_Applicative_Internal from "../Options.Applicative.Internal/index.js";
import * as Options_Applicative_Internal_Utils from "../Options.Applicative.Internal.Utils/index.js";
import * as Options_Applicative_Types from "../Options.Applicative.Types/index.js";
import * as Text_PrettyPrint_Leijen from "../Text.PrettyPrint.Leijen/index.js";
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect.applicativeEffect);
var genericShowArgsArgument = /* #__PURE__ */ Data_Show_Generic.genericShowArgsArgument(Data_Show.showInt);
var compare = /* #__PURE__ */ Data_Ord.compare(Data_Ord.ordInt);
var un = /* #__PURE__ */ Data_Newtype.un();
var map = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var runParserInfo = /* #__PURE__ */ Options_Applicative_Common.runParserInfo(Options_Applicative_Internal.completionMonadP);
var fromFoldable = /* #__PURE__ */ Data_List.fromFoldable(Data_Foldable.foldableArray);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Maybe.bindMaybe);
var notEq = /* #__PURE__ */ Data_Eq.notEq(Options_Applicative_Types.argPolicyEq);
var map2 = /* #__PURE__ */ Data_Functor.map(Effect.functorEffect);
var fold = /* #__PURE__ */ Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidArray);
var sequence = /* #__PURE__ */ Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect);
var unLines = /* #__PURE__ */ Options_Applicative_Internal_Utils.unLines(Data_Foldable.foldableArray);
var alt = /* #__PURE__ */ Control_Alt.alt(Options_Applicative_Types.parserAlt);
var map3 = /* #__PURE__ */ Data_Functor.map(Options_Applicative_Types.parserFunctor);
var apply = /* #__PURE__ */ Control_Apply.apply(Options_Applicative_Types.parserApply);
var append1 = /* #__PURE__ */ Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup);
var $$long = /* #__PURE__ */ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.flagFieldsHasName);
var long1 = /* #__PURE__ */ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName);
var value = /* #__PURE__ */ Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(Options_Applicative_Types.parserApplicative);
var fromFoldable1 = /* #__PURE__ */ Data_Array.fromFoldable(Data_List_Types.foldableList);
var Standard = /* #__PURE__ */ (function () {
    function Standard() {

    };
    Standard.value = new Standard();
    return Standard;
})();
var Enriched = /* #__PURE__ */ (function () {
    function Enriched(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Enriched.create = function (value0) {
        return function (value1) {
            return new Enriched(value0, value1);
        };
    };
    return Enriched;
})();
var zshCompletionScript = function (prog) {
    return function (progn) {
        return pure([ "#compdef " + progn, "", "local request", "local completions", "local word", "local index=$((CURRENT - 1))", "", "request=(--bash-completion-enriched --bash-completion-index $index)", "for arg in ${words[@]}; do", "  request=(${request[@]} --bash-completion-word $arg)", "done", "", "IFS=$'\\n' completions=($( " + (prog + " \"${request[@]}\" ))"), "", "for word in $completions; do", "  local -a parts", "", "  # Split the line at a tab if there is one.", "  IFS=$'\\t' parts=($( echo $word ))", "", "  if [[ -n $parts[2] ]]; then", "     if [[ $word[1] == \"-\" ]]; then", "       local desc=(\"$parts[1] ($parts[2])\")", "       compadd -d desc -- $parts[1]", "     else", "       local desc=($(print -f  \"%-019s -- %s\" $parts[1] $parts[2]))", "       compadd -l -d desc -- $parts[1]", "     fi", "  else", "    compadd -f -- $word", "  fi", "done" ]);
    };
};
var richnessGeneric = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return Standard.value;
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return new Enriched(x.value0.value0, x.value0.value1);
        };
        throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 46, column 1 - line 46, column 54): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof Standard) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof Enriched) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Product(x.value0, x.value1));
        };
        throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 46, column 1 - line 46, column 54): " + [ x.constructor.name ]);
    }
};
var richnessShow = {
    show: /* #__PURE__ */ Data_Show_Generic.genericShow(richnessGeneric)(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "Standard";
        }
    }))(/* #__PURE__ */ Data_Show_Generic.genericShowConstructor(/* #__PURE__ */ Data_Show_Generic.genericShowArgsProduct(genericShowArgsArgument)(genericShowArgsArgument))({
        reflectSymbol: function () {
            return "Enriched";
        }
    })))
};
var richnessEq = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Standard && y instanceof Standard) {
                return true;
            };
            if (x instanceof Enriched && y instanceof Enriched) {
                return x.value0 === y.value0 && x.value1 === y.value1;
            };
            return false;
        };
    }
};
var richnessOrd = {
    compare: function (x) {
        return function (y) {
            if (x instanceof Standard && y instanceof Standard) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Standard) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Standard) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Enriched && y instanceof Enriched) {
                var v = compare(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return compare(x.value1)(y.value1);
            };
            throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 0, column 0 - line 0, column 0): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return richnessEq;
    }
};
var fishCompletionScript = function (prog) {
    return function (progn) {
        return pure([ " function _" + progn, "    set -l cl (commandline --tokenize --current-process)", "    # Hack around fish issue #3934", "    set -l cn (commandline --tokenize --cut-at-cursor --current-process)", "    set -l cn (count $cn)", "    set -l tmpline --bash-completion-enriched --bash-completion-index $cn", "    for arg in $cl", "      set tmpline $tmpline --bash-completion-word $arg", "    end", "    for opt in (" + (prog + " $tmpline)"), "      if test -d $opt", "        echo -E \"$opt/\"", "      else", "        echo -E \"$opt\"", "      end", "    end", "end", "", "complete --no-files --command " + (progn + (" --arguments '(_" + (progn + ")'"))) ]);
    };
};
var bashCompletionScript = function (prog) {
    return function (progn) {
        return pure([ "_" + (progn + "()"), "{", "    local CMDLINE", "    local IFS=$'\\n'", "    CMDLINE=(--bash-completion-index $COMP_CWORD)", "", "    for arg in ${COMP_WORDS[@]}; do", "        CMDLINE=(${CMDLINE[@]} --bash-completion-word $arg)", "    done", "", "    COMPREPLY=( $(" + (prog + " \"${CMDLINE[@]}\") )"), "}", "", "complete -o filenames -F _" + (progn + (" " + progn)) ]);
    };
};
var arraySplitAt = function (idx) {
    return function (arr) {
        if (idx === 0) {
            return {
                init: [  ],
                rest: arr
            };
        };
        return {
            init: Data_Array.slice(0)(idx)(arr),
            rest: Data_Array.slice(idx)(Data_Array.length(arr))(arr)
        };
    };
};
var bashCompletionQuery = function (pinfo) {
    return function (pprefs) {
        return function (richness) {
            return function (ws) {
                return function (i) {
                    return function (v) {
                        var v1 = arraySplitAt(i)(ws);
                        var run_completer = function (c) {
                            return un(Options_Applicative_Types.Completer)(c)(Data_Maybe.fromMaybe("")(Data_Array.head(v1.rest)));
                        };
                        var render_line = function (len) {
                            return function (doc) {
                                var v2 = map(Data_Array_NonEmpty.uncons)(Data_Array_NonEmpty.fromArray(Options_Applicative_Internal_Utils.lines(Text_PrettyPrint_Leijen.displayS(Text_PrettyPrint_Leijen.renderPretty(1.0)(len)(doc)))));
                                if (v2 instanceof Data_Maybe.Nothing) {
                                    return "";
                                };
                                if (v2 instanceof Data_Maybe.Just && v2.value0.tail.length === 0) {
                                    return v2.value0.head;
                                };
                                if (v2 instanceof Data_Maybe.Just) {
                                    return v2.value0.head + "...";
                                };
                                throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 162, column 27 - line 165, column 43): " + [ v2.constructor.name ]);
                            };
                        };
                        var is_completion = (function () {
                            var v2 = Data_Array.head(v1.rest);
                            if (v2 instanceof Data_Maybe.Just) {
                                return Options_Applicative_Internal_Utils.startsWith(v2.value0);
                            };
                            if (v2 instanceof Data_Maybe.Nothing) {
                                return Data_Function["const"](true);
                            };
                            throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 175, column 7 - line 177, column 30): " + [ v2.constructor.name ]);
                        })();
                        var filter_names = Data_Array.filter(is_completion);
                        var show_names = (function () {
                            var $129 = map1(Options_Applicative_Common.showOption);
                            return function ($130) {
                                return filter_names($129($130));
                            };
                        })();
                        var compl = runParserInfo(pinfo)(fromFoldable(Data_Array.drop(1)(v1.init)));
                        var add_opt_help = function (dictFunctor) {
                            var map4 = Data_Functor.map(dictFunctor);
                            return function (opt) {
                                if (richness instanceof Standard) {
                                    return identity;
                                };
                                if (richness instanceof Enriched) {
                                    return map4(function (o) {
                                        var h = un(Options_Applicative_Help_Chunk.Chunk)(Options_Applicative_Types.optHelp(opt));
                                        return Data_Maybe.maybe(o)(function (h$prime) {
                                            return o + ("\x09" + render_line(richness.value0)(h$prime));
                                        })(h);
                                    });
                                };
                                throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 138, column 24 - line 143, column 79): " + [ richness.constructor.name ]);
                            };
                        };
                        var add_opt_help1 = add_opt_help(Data_Functor.functorArray);
                        var add_cmd_help = function (dictFunctor) {
                            var map4 = Data_Functor.map(dictFunctor);
                            return function (p) {
                                if (richness instanceof Standard) {
                                    return identity;
                                };
                                if (richness instanceof Enriched) {
                                    return map4(function (cmd) {
                                        var h = bind(p(cmd))((function () {
                                            var $131 = un(Options_Applicative_Help_Chunk.Chunk);
                                            var $132 = un(Options_Applicative_Types.ParserInfo);
                                            return function ($133) {
                                                return $131((function (v2) {
                                                    return v2.infoProgDesc;
                                                })($132($133)));
                                            };
                                        })());
                                        return Data_Maybe.maybe(cmd)(function (h$prime) {
                                            return cmd + ("\x09" + render_line(richness.value1)(h$prime));
                                        })(h);
                                    });
                                };
                                throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 148, column 22 - line 153, column 85): " + [ richness.constructor.name ]);
                            };
                        };
                        var add_cmd_help1 = add_cmd_help(Data_Functor.functorArray);
                        var opt_completions = function (argPolicy) {
                            return function (hinfo) {
                                return function (opt) {
                                    var v2 = (un(Options_Applicative_Types.Option)(opt)).optMain;
                                    if (v2 instanceof Options_Applicative_Types.OptReader) {
                                        if (notEq(argPolicy)(Options_Applicative_Types.AllPositionals.value)) {
                                            return pure(add_opt_help1(opt)(show_names(v2.value0)));
                                        };
                                        if (Data_Boolean.otherwise) {
                                            return pure([  ]);
                                        };
                                    };
                                    if (v2 instanceof Options_Applicative_Types.FlagReader) {
                                        if (notEq(argPolicy)(Options_Applicative_Types.AllPositionals.value)) {
                                            return pure(add_opt_help1(opt)(show_names(v2.value0)));
                                        };
                                        if (Data_Boolean.otherwise) {
                                            return pure([  ]);
                                        };
                                    };
                                    if (v2 instanceof Options_Applicative_Types.ArgReader) {
                                        if ((un(Options_Applicative_Types.OptHelpInfo)(hinfo)).hinfoUnreachableArgs) {
                                            return pure([  ]);
                                        };
                                        if (Data_Boolean.otherwise) {
                                            return run_completer((un(Options_Applicative_Types.CReader)(v2.value0)).crCompleter);
                                        };
                                    };
                                    if (v2 instanceof Options_Applicative_Types.CmdReader) {
                                        if ((un(Options_Applicative_Types.OptHelpInfo)(hinfo)).hinfoUnreachableArgs) {
                                            return pure([  ]);
                                        };
                                        if (Data_Boolean.otherwise) {
                                            return pure(add_cmd_help1(v2.value2)(filter_names(v2.value1)));
                                        };
                                    };
                                    throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 113, column 43 - line 133, column 53): " + [ v2.constructor.name ]);
                                };
                            };
                        };
                        var list_options = function (a) {
                            var $134 = map2(fold);
                            var $135 = Options_Applicative_Common.mapParser(opt_completions(a));
                            return function ($136) {
                                return $134(sequence($135($136)));
                            };
                        };
                        var v2 = Options_Applicative_Internal.runCompletion(compl)(pprefs);
                        if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof Data_Either.Left) {
                            return Data_Exists.runExists(function (p) {
                                return list_options(v2.value0.value0.value1)(p);
                            })(v2.value0.value0.value0.value0);
                        };
                        if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof Data_Either.Right) {
                            return run_completer(v2.value0.value0);
                        };
                        if (v2 instanceof Data_Maybe.Nothing) {
                            return pure([  ]);
                        };
                        throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 83, column 52 - line 89, column 15): " + [ v2.constructor.name ]);
                    };
                };
            };
        };
    };
};
var bashCompletionParser = function (pinfo) {
    return function (pprefs) {
        var failure = function (opts) {
            return {
                execCompletion: function (progn) {
                    return map2(unLines)(opts(progn));
                }
            };
        };
        var complParser = alt(map3(failure)(apply(apply(map3(bashCompletionQuery(pinfo)(pprefs))(alt(apply(apply(Options_Applicative_Builder["flag$prime"](Enriched.create)(append1($$long("bash-completion-enriched"))(Options_Applicative_Builder_Internal.internal)))(Options_Applicative_Builder.option(Options_Applicative_Builder["int"])(append1(append1(long1("bash-completion-option-desc-length"))(Options_Applicative_Builder_Internal.internal))(value(40)))))(Options_Applicative_Builder.option(Options_Applicative_Builder["int"])(append1(append1(long1("bash-completion-command-desc-length"))(Options_Applicative_Builder_Internal.internal))(value(40)))))(pure1(Standard.value))))(map3(fromFoldable1)(Options_Applicative_Types.many(Options_Applicative_Builder.strOption(append1(long1("bash-completion-word"))(Options_Applicative_Builder_Internal.internal))))))(Options_Applicative_Builder.option(Options_Applicative_Builder["int"])(append1(long1("bash-completion-index"))(Options_Applicative_Builder_Internal.internal)))))(alt(map3(failure)(map3(bashCompletionScript)(Options_Applicative_Builder.strOption(append1(long1("bash-completion-script"))(Options_Applicative_Builder_Internal.internal)))))(alt(map3(failure)(map3(fishCompletionScript)(Options_Applicative_Builder.strOption(append1(long1("fish-completion-script"))(Options_Applicative_Builder_Internal.internal)))))(map3(failure)(map3(zshCompletionScript)(Options_Applicative_Builder.strOption(append1(long1("zsh-completion-script"))(Options_Applicative_Builder_Internal.internal)))))));
        return complParser;
    };
};
export {
    bashCompletionParser
};
//# sourceMappingURL=index.js.map
