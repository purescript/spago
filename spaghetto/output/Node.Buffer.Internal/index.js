// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Node_Buffer_Immutable from "../Node.Buffer.Immutable/index.js";
import * as Node_Buffer_Types from "../Node.Buffer.Types/index.js";
import * as Node_Encoding from "../Node.Encoding/index.js";
var show = /* #__PURE__ */ Data_Show.show(Node_Buffer_Types.showBufferValueType);
var writeString = function (dictMonad) {
    return function ($43) {
        return $foreign.writeStringInternal(Node_Encoding.encodingToNode($43));
    };
};
var write = function (dictMonad) {
    return function ($44) {
        return $foreign.writeInternal(show($44));
    };
};
var unsafeThaw = function (dictMonad) {
    var $45 = Control_Applicative.pure(dictMonad.Applicative0());
    return function ($46) {
        return $45($46);
    };
};
var usingToImmutable = function (dictMonad) {
    var unsafeThaw1 = unsafeThaw(dictMonad);
    return function (f) {
        return function (x) {
            return unsafeThaw1(f(x));
        };
    };
};
var unsafeFreeze = function (dictMonad) {
    var $47 = Control_Applicative.pure(dictMonad.Applicative0());
    return function ($48) {
        return $47($48);
    };
};
var usingFromImmutable = function (dictMonad) {
    var map = Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0());
    var unsafeFreeze1 = unsafeFreeze(dictMonad);
    return function (f) {
        return function (buf) {
            return map(f)(unsafeFreeze1(buf));
        };
    };
};
var toString = function (dictMonad) {
    var usingFromImmutable1 = usingFromImmutable(dictMonad);
    return function (m) {
        return usingFromImmutable1(Node_Buffer_Immutable.toString(m));
    };
};
var toArrayBuffer = function (dictMonad) {
    return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArrayBuffer);
};
var toArray = function (dictMonad) {
    return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArray);
};
var slice = Node_Buffer_Immutable.slice;
var size = function (dictMonad) {
    return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.size);
};
var readString = function (dictMonad) {
    var usingFromImmutable1 = usingFromImmutable(dictMonad);
    return function (m) {
        return function (o) {
            return function (o$prime) {
                return usingFromImmutable1(Node_Buffer_Immutable.readString(m)(o)(o$prime));
            };
        };
    };
};
var read = function (dictMonad) {
    var usingFromImmutable1 = usingFromImmutable(dictMonad);
    return function (t) {
        return function (o) {
            return usingFromImmutable1(Node_Buffer_Immutable.read(t)(o));
        };
    };
};
var getAtOffset = function (dictMonad) {
    var usingFromImmutable1 = usingFromImmutable(dictMonad);
    return function (o) {
        return usingFromImmutable1(Node_Buffer_Immutable.getAtOffset(o));
    };
};
var fromString = function (dictMonad) {
    var usingToImmutable1 = usingToImmutable(dictMonad);
    return function (s) {
        return usingToImmutable1(Node_Buffer_Immutable.fromString(s));
    };
};
var fromArrayBuffer = function (dictMonad) {
    return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArrayBuffer);
};
var fromArray = function (dictMonad) {
    return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArray);
};
var create = function (dictMonad) {
    return usingToImmutable(dictMonad)(Node_Buffer_Immutable.create);
};
var concat$prime = function (dictMonad) {
    return function (arrs) {
        return function (n) {
            return function (v) {
                return Node_Buffer_Immutable["concat$prime"](arrs)(n);
            };
        };
    };
};
var concat = function (arrs) {
    return function (v) {
        return Node_Buffer_Immutable.concat(arrs);
    };
};
export {
    copyAll,
    setAtOffset,
    copy,
    fill
} from "./foreign.js";
export {
    unsafeFreeze,
    unsafeThaw,
    usingFromImmutable,
    usingToImmutable,
    create,
    fromArray,
    fromString,
    fromArrayBuffer,
    toArrayBuffer,
    read,
    readString,
    toString,
    write,
    writeString,
    toArray,
    getAtOffset,
    slice,
    size,
    concat,
    concat$prime
};
//# sourceMappingURL=index.js.map
