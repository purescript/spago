// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Alternative from "../Control.Alternative/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Monad_Except from "../Control.Monad.Except/index.js";
import * as Control_Monad_Except_Trans from "../Control.Monad.Except.Trans/index.js";
import * as Control_Parallel from "../Control.Parallel/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Generic_Rep from "../Data.Generic.Rep/index.js";
import * as Data_HeytingAlgebra from "../Data.HeytingAlgebra/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Lens_Fold from "../Data.Lens.Fold/index.js";
import * as Data_Lens_Internal_Forget from "../Data.Lens.Internal.Forget/index.js";
import * as Data_Lens_Internal_Market from "../Data.Lens.Internal.Market/index.js";
import * as Data_Lens_Prism from "../Data.Lens.Prism/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Maybe_First from "../Data.Maybe.First/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Nullable from "../Data.Nullable/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Show_Generic from "../Data.Show.Generic/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_String_Regex from "../Data.String.Regex/index.js";
import * as Data_String_Regex_Flags from "../Data.String.Regex.Flags/index.js";
import * as Data_String_Regex_Unsafe from "../Data.String.Regex.Unsafe/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Effect_Timer from "../Effect.Timer/index.js";
import * as Effect_Uncurried from "../Effect.Uncurried/index.js";
import * as Foreign from "../Foreign/index.js";
import * as Foreign_Object from "../Foreign.Object/index.js";
import * as Node_Buffer from "../Node.Buffer/index.js";
import * as Node_Buffer_Class from "../Node.Buffer.Class/index.js";
import * as Node_Buffer_Immutable from "../Node.Buffer.Immutable/index.js";
import * as Node_Buffer_Internal from "../Node.Buffer.Internal/index.js";
import * as Node_Encoding from "../Node.Encoding/index.js";
import * as Node_Library_Execa_CrossSpawn from "../Node.Library.Execa.CrossSpawn/index.js";
import * as Node_Library_Execa_GetStream from "../Node.Library.Execa.GetStream/index.js";
import * as Node_Library_Execa_NpmRunPath from "../Node.Library.Execa.NpmRunPath/index.js";
import * as Node_Library_Execa_ParseCommand from "../Node.Library.Execa.ParseCommand/index.js";
import * as Node_Library_Execa_SignalExit from "../Node.Library.Execa.SignalExit/index.js";
import * as Node_Library_Execa_StripFinalNewline from "../Node.Library.Execa.StripFinalNewline/index.js";
import * as Node_Library_HumanSignals from "../Node.Library.HumanSignals/index.js";
import * as Node_Process from "../Node.Process/index.js";
import * as Node_Stream from "../Node.Stream/index.js";
import * as Partial_Unsafe from "../Partial.Unsafe/index.js";
import * as Record from "../Record/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
import * as Unsafe_Coerce from "../Unsafe.Coerce/index.js";
var genericShowConstructor = /* #__PURE__ */ Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments);
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var map = /* #__PURE__ */ Data_Functor.map(Effect.functorEffect);
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Maybe.bindMaybe);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var lookup = /* #__PURE__ */ Data_Map_Internal.lookup(Data_Ord.ordInt);
var append1 = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupString);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var show1 = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Either.showEither(Data_Show.showInt)(Data_Show.showString));
var show2 = /* #__PURE__ */ Data_Show.show(Data_Show.showNumber);
var bindFlipped = /* #__PURE__ */ Control_Bind.bindFlipped(Data_Maybe.bindMaybe);
var intercalate = /* #__PURE__ */ Data_Array.intercalate(Data_Monoid.monoidString);
var alt = /* #__PURE__ */ Control_Alt.alt(Data_Maybe.altMaybe);
var bind1 = /* #__PURE__ */ Control_Bind.bind(Effect.bindEffect);
var unsafeThaw = /* #__PURE__ */ Node_Buffer_Class.unsafeThaw(Node_Buffer.mutableBufferEffect);
var stripFinalNewlineBuf = /* #__PURE__ */ Node_Library_Execa_StripFinalNewline.stripFinalNewlineBuf(Node_Buffer.mutableBufferEffect);
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect.applicativeEffect);
var intercalate1 = /* #__PURE__ */ Data_Foldable.intercalate(Data_List_Types.foldableNonEmptyList)(Data_Monoid.monoidString);
var map2 = /* #__PURE__ */ Data_Functor.map(Data_List_Types.functorNonEmptyList);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var alt1 = /* #__PURE__ */ Control_Alt.alt(/* #__PURE__ */ Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity));
var map3 = /* #__PURE__ */ Data_Functor.map(/* #__PURE__ */ Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity));
var readInt = /* #__PURE__ */ Foreign.readInt(Data_Identity.monadIdentity);
var readString = /* #__PURE__ */ Foreign.readString(Data_Identity.monadIdentity);
var eq = /* #__PURE__ */ Data_Eq.eq(Data_Eq.eqString);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var discard1 = /* #__PURE__ */ discard(Data_Maybe.bindMaybe);
var guard = /* #__PURE__ */ Control_Alternative.guard(Data_Maybe.alternativeMaybe);
var for_ = /* #__PURE__ */ Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe);
var $$void = /* #__PURE__ */ Data_Functor["void"](Effect.functorEffect);
var map4 = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var $$delete = /* #__PURE__ */ Record["delete"]({
    reflectSymbol: function () {
        return "input";
    }
})()();
var eq1 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Maybe.eqMaybe(Data_Eq.eqString));
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Class.monadEffectEffect);
var show3 = /* #__PURE__ */ Data_Show.show(Data_Show.showString);
var bind2 = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var liftEffect1 = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
var parOneOf = /* #__PURE__ */ Control_Parallel.parOneOf(Effect_Aff.parallelAff)(Effect_Aff.alternativeParAff)(Data_Foldable.foldableArray)(Data_Functor.functorArray);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(Effect_Aff.applicativeAff);
var sequence_ = /* #__PURE__ */ Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe);
var discard3 = /* #__PURE__ */ discard(Effect_Aff.bindAff);
var when = /* #__PURE__ */ Control_Applicative.when(Effect.applicativeEffect);
var apply = /* #__PURE__ */ Control_Apply.apply(Effect_Aff.applyAff);
var map5 = /* #__PURE__ */ Data_Functor.map(Effect_Aff.functorAff);
var choiceForget = /* #__PURE__ */ Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst);
var is = /* #__PURE__ */ Data_Lens_Prism.is(Data_HeytingAlgebra.heytingAlgebraBoolean);
var fromString = /* #__PURE__ */ Node_Buffer_Internal.fromString(Effect.monadEffect);
var mempty = /* #__PURE__ */ Data_Monoid.mempty(/* #__PURE__ */ Data_Monoid.monoidFn(/* #__PURE__ */ Effect.monoidEffect(Data_Monoid.monoidUnit)));
var SerializeJson = /* #__PURE__ */ (function () {
    function SerializeJson() {

    };
    SerializeJson.value = new SerializeJson();
    return SerializeJson;
})();
var SerializeAdvanced = /* #__PURE__ */ (function () {
    function SerializeAdvanced() {

    };
    SerializeAdvanced.value = new SerializeAdvanced();
    return SerializeAdvanced;
})();
var ExitCode = /* #__PURE__ */ (function () {
    function ExitCode(value0) {
        this.value0 = value0;
    };
    ExitCode.create = function (value0) {
        return new ExitCode(value0);
    };
    return ExitCode;
})();
var Killed = /* #__PURE__ */ (function () {
    function Killed(value0) {
        this.value0 = value0;
    };
    Killed.create = function (value0) {
        return new Killed(value0);
    };
    return Killed;
})();
var SpawnError = /* #__PURE__ */ (function () {
    function SpawnError(value0) {
        this.value0 = value0;
    };
    SpawnError.create = function (value0) {
        return new SpawnError(value0);
    };
    return SpawnError;
})();
var StdinError = /* #__PURE__ */ (function () {
    function StdinError(value0) {
        this.value0 = value0;
    };
    StdinError.create = function (value0) {
        return new StdinError(value0);
    };
    return StdinError;
})();
var TimedOut = /* #__PURE__ */ (function () {
    function TimedOut(value0) {
        this.value0 = value0;
    };
    TimedOut.create = function (value0) {
        return new TimedOut(value0);
    };
    return TimedOut;
})();
var genericSerializationOptio = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return SerializeJson.value;
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return SerializeAdvanced.value;
        };
        throw new Error("Failed pattern match at Node.Library.Execa (line 1107, column 1 - line 1107, column 46): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof SerializeJson) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof SerializeAdvanced) {
            return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
        };
        throw new Error("Failed pattern match at Node.Library.Execa (line 1107, column 1 - line 1107, column 46): " + [ x.constructor.name ]);
    }
};
var genericShow = /* #__PURE__ */ Data_Show_Generic.genericShow(genericSerializationOptio)(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ genericShowConstructor({
    reflectSymbol: function () {
        return "SerializeJson";
    }
}))(/* #__PURE__ */ genericShowConstructor({
    reflectSymbol: function () {
        return "SerializeAdvanced";
    }
})));
var showSerializationOption = {
    show: function (x) {
        return genericShow(x);
    }
};
var eqSerializationOption = {
    eq: function (x) {
        return function (y) {
            if (x instanceof SerializeJson && y instanceof SerializeJson) {
                return true;
            };
            if (x instanceof SerializeAdvanced && y instanceof SerializeAdvanced) {
                return true;
            };
            return false;
        };
    }
};
var unref = function (cp) {
    return function () {
        return $foreign.unrefImpl(cp);
    };
};
var toJsSerialization = function (v) {
    if (v instanceof SerializeJson) {
        return "json";
    };
    if (v instanceof SerializeAdvanced) {
        return "advanced";
    };
    throw new Error("Failed pattern match at Node.Library.Execa (line 1112, column 21 - line 1114, column 34): " + [ v.constructor.name ]);
};
var stringKillSignal = Unsafe_Coerce.unsafeCoerce;
var stdio = function (cp) {
    return function () {
        return $foreign.stdioImpl(cp);
    };
};
var spawn = function (cmd) {
    return function (args) {
        return function (options) {
            var pipe = Foreign.unsafeToForeign("pipe");
            var ipc = Foreign.unsafeToForeign("ipc");
            return function () {
                return $foreign.spawnImpl(cmd, args, {
                    cwd: Data_Maybe.fromMaybe($foreign["undefined"])(options.cwd),
                    env: Data_Maybe.fromMaybe($foreign["undefined"])(options.env),
                    argv0: Data_Maybe.fromMaybe($foreign["undefined"])(options.argv0),
                    detached: Data_Maybe.fromMaybe($foreign["undefined"])(options.detached),
                    uid: Data_Maybe.fromMaybe($foreign["undefined"])(options.uid),
                    gid: Data_Maybe.fromMaybe($foreign["undefined"])(options.gid),
                    serialization: Data_Maybe.maybe($foreign["undefined"])(toJsSerialization)(options.serialization),
                    stdio: append([ pipe, pipe, pipe, ipc ])(Data_Maybe.fromMaybe([  ])(options.stdioExtra)),
                    shell: Data_Maybe.fromMaybe($foreign["undefined"])(options.shell),
                    windowsHide: Data_Maybe.fromMaybe($foreign["undefined"])(options.windowsHide),
                    windowsVerbatimArguments: Data_Maybe.fromMaybe($foreign["undefined"])(options.windowsVerbatimArguments)
                });
            };
        };
    };
};
var signalCode = function (cp) {
    return map(Data_Nullable.toMaybe)(function () {
        return $foreign.signalCodeImpl(cp);
    });
};
var send = function (cp) {
    return function (msg) {
        return function (handle) {
            return function (buildOptions) {
                return function (cb) {
                    var options = buildOptions({
                        keepOpen: Data_Maybe.Nothing.value
                    });
                    var jsOptions = {
                        keepOpen: Data_Maybe.fromMaybe($foreign["undefined"])(options.keepOpen)
                    };
                    return function () {
                        return $foreign.sendImpl(cp, msg, handle, jsOptions, cb);
                    };
                };
            };
        };
    };
};
var ref = function (cp) {
    return function () {
        return $foreign.refImpl(cp);
    };
};
var pidExists = function (cp) {
    return function () {
        return $foreign.pidExistsImpl(cp);
    };
};
var pid = function (cp) {
    return map(Data_Nullable.toMaybe)(function () {
        return $foreign.pidImpl(cp);
    });
};
var onSpawn = function (cp) {
    return function (cb) {
        return function () {
            return $foreign.onSpawnImpl(cp, cb);
        };
    };
};
var onMessage = function (cp) {
    return function (cb) {
        return function () {
            return $foreign.onMessageImpl(cp, function (a, b) {
                return cb(a)(Data_Nullable.toMaybe(b))();
            });
        };
    };
};
var onExit = function (cp) {
    return function (cb) {
        return function () {
            return $foreign.onExitImpl(cp, function (e, s) {
                return cb(Data_Nullable.toMaybe(e))(Data_Nullable.toMaybe(s))();
            });
        };
    };
};
var onError = function (cp) {
    return function (cb) {
        return function () {
            return $foreign.onErrorImpl(cp, Effect_Uncurried.mkEffectFn1(cb));
        };
    };
};
var onDisconnect = function (cp) {
    return function (cb) {
        return function () {
            return $foreign.onDisconnectImpl(cp, cb);
        };
    };
};
var onClose = function (cp) {
    return function (cb) {
        return function () {
            return $foreign.onCloseImpl(cp, function (a, b) {
                return cb(Data_Nullable.toMaybe(a))(Data_Nullable.toMaybe(b))();
            });
        };
    };
};
var noEscapeRegex = /* #__PURE__ */ Data_String_Regex_Unsafe.unsafeRegex("^[\\w.-]+$")(Data_String_Regex_Flags.noFlags);
var mkError = function (r) {
    var signalDescription = bind(r.signal)(function (v) {
        if (v instanceof Data_Either.Left) {
            return map1(function (v1) {
                return v1.description;
            })(lookup(v.value0)(Node_Library_HumanSignals.signals.byNumber));
        };
        if (v instanceof Data_Either.Right) {
            return map1(function (v1) {
                return v1.description;
            })(Foreign_Object.lookup(v.value0)(Node_Library_HumanSignals.signals.byString));
        };
        throw new Error("Failed pattern match at Node.Library.Execa (line 832, column 36 - line 834, column 68): " + [ v.constructor.name ]);
    });
    var errorCode = map1(function (v) {
        return v.code;
    })(r.error);
    var prefix = (function () {
        var v = function (v1) {
            if (r.isCanceled) {
                return "was canceled";
            };
            var v2 = function (v3) {
                var v4 = function (v5) {
                    var v6 = function (v7) {
                        var v8 = function (v9) {
                            var v10 = function (v11) {
                                var v12 = function (v13) {
                                    if (Data_Boolean.otherwise) {
                                        return "failed";
                                    };
                                    throw new Error("Failed pattern match at Node.Library.Execa (line 799, column 1 - line 815, column 16): " + [  ]);
                                };
                                if (r.stderrErr instanceof Data_Maybe.Just) {
                                    return "had error in `stderr`: " + Effect_Exception.message(r.stderrErr.value0);
                                };
                                return v12(true);
                            };
                            if (r.stdoutErr instanceof Data_Maybe.Just) {
                                return "had error in `stdout`: " + Effect_Exception.message(r.stdoutErr.value0);
                            };
                            return v10(true);
                        };
                        if (r.stdinErr instanceof Data_Maybe.Just) {
                            return "had error in `stdin`: " + Effect_Exception.message(r.stdinErr.value0);
                        };
                        return v8(true);
                    };
                    if (r.exitCode instanceof Data_Maybe.Just) {
                        return "failed with exit code " + show(r.exitCode.value0);
                    };
                    return v6(true);
                };
                if (r.signal instanceof Data_Maybe.Just) {
                    if (signalDescription instanceof Data_Maybe.Just) {
                        return "was killed with " + (show1(r.signal.value0) + (" (" + (signalDescription.value0 + ")")));
                    };
                    return v4(true);
                };
                return v4(true);
            };
            if (errorCode instanceof Data_Maybe.Just) {
                return "failed with " + errorCode.value0;
            };
            return v2(true);
        };
        if (r.timedOut) {
            if (r.parsed.options.timeout instanceof Data_Maybe.Just) {
                return "timed out after " + (show2(r.parsed.options.timeout.value0) + "milliseconds");
            };
            return v(true);
        };
        return v(true);
    })();
    var execaMessage = "Command " + (prefix + (": " + r.command));
    var shortMessage = execaMessage + Data_Maybe.maybe("")(append1("\x0a"))(bindFlipped(function ($219) {
        return Data_Nullable.toMaybe((function (v) {
            return v.message;
        })($219));
    })(r.error));
    var message = intercalate("\x0a")([ shortMessage, r.stderr, r.stdout ]);
    return {
        originalMessage: alt(bind(r.error)(function ($220) {
            return Data_Nullable.toMaybe((function (v) {
                return v.message;
            })($220));
        }))(map1(Effect_Exception.message)(alt(r.stdinErr)(alt(r.stdoutErr)(r.stderrErr)))),
        message: message,
        shortMessage: shortMessage,
        escapedCommand: r.escapedCommand,
        exitCode: r.exitCode,
        signal: r.signal,
        signalDescription: signalDescription,
        stdout: r.stdout,
        stderr: r.stderr,
        failed: true,
        timedOut: r.timedOut,
        isCanceled: r.isCanceled,
        killed: r.killed && !r.timedOut
    };
};
var killed = function (cp) {
    return function () {
        return $foreign.killedImpl(cp);
    };
};
var kill$prime$prime = function (sig) {
    return function (forceKillAfterTimeout) {
        return function (cp) {
            return function () {
                return $foreign.killImpl(cp, sig, Data_Nullable.toNullable(forceKillAfterTimeout));
            };
        };
    };
};
var kill$prime = function (sig) {
    return function (cp) {
        return kill$prime$prime(sig)(Data_Maybe.Nothing.value)(cp);
    };
};
var kill = /* #__PURE__ */ kill$prime(/* #__PURE__ */ stringKillSignal("SIGTERM"));
var joinCommand = function (file) {
    return function (args) {
        return file + (" " + intercalate(" ")(args));
    };
};
var intKillSignal = Unsafe_Coerce.unsafeCoerce;
var spawnSync = function (file) {
    return function (args) {
        return function (options) {
            var pipe = Foreign.unsafeToForeign("pipe");
            var ignore = Foreign.unsafeToForeign("ignore");
            var jsOptions = {
                cwd: Data_Maybe.fromMaybe($foreign["undefined"])(options.cwd),
                argv0: Data_Maybe.fromMaybe($foreign["undefined"])(options.argv0),
                input: Data_Maybe.fromMaybe($foreign["undefined"])(options.input),
                stdio: append([ pipe, pipe, pipe, ignore ])(Data_Maybe.fromMaybe([  ])(options.stdioExtra)),
                env: Data_Maybe.fromMaybe($foreign["undefined"])(options.env),
                uid: Data_Maybe.fromMaybe($foreign["undefined"])(options.uid),
                gid: Data_Maybe.fromMaybe($foreign["undefined"])(options.gid),
                timeout: Data_Maybe.fromMaybe($foreign["undefined"])(options.timeout),
                killSignal: Data_Maybe.fromMaybe($foreign["undefined"])(map1(Data_Either.either(intKillSignal)(stringKillSignal))(options.killSignal)),
                maxBuffer: Data_Maybe.fromMaybe($foreign["undefined"])(options.maxBuffer),
                encoding: "buffer",
                shell: Data_Maybe.fromMaybe($foreign["undefined"])(options.shell),
                windowsHide: Data_Maybe.fromMaybe($foreign["undefined"])(options.windowsHide),
                windowsVerbatimArguments: Data_Maybe.fromMaybe($foreign["undefined"])(options.windowsVerbatimArguments)
            };
            return function () {
                return $foreign.spawnSyncImpl(file, args, jsOptions);
            };
        };
    };
};
var toKillSignal = /* #__PURE__ */ Data_Either.either(intKillSignal)(stringKillSignal);
var handleOutput = function (options) {
    return function (value) {
        if (options.stripFinalNewline) {
            return bind1(unsafeThaw(value))(stripFinalNewlineBuf);
        };
        if (Data_Boolean.otherwise) {
            return pure(value);
        };
        throw new Error("Failed pattern match at Node.Library.Execa (line 663, column 1 - line 663, column 108): " + [ options.constructor.name, value.constructor.name ]);
    };
};
var getEnv = function (r) {
    return function __do() {
        var processEnv = Node_Process.getEnv();
        var env = (function () {
            if (r.extendEnv) {
                return Foreign_Object.union(r.env)(processEnv);
            };
            return r.env;
        })();
        if (r.preferLocal instanceof Data_Maybe.Nothing) {
            return env;
        };
        if (r.preferLocal instanceof Data_Maybe.Just) {
            return Node_Library_Execa_NpmRunPath.npmRunPathEnv(env)({
                cwd: r.preferLocal.value0.localDir,
                path: Node_Library_Execa_NpmRunPath.defaultNpmRunPathOptions.path,
                execPath: r.preferLocal.value0.execPath
            })();
        };
        throw new Error("Failed pattern match at Node.Library.Execa (line 90, column 3 - line 94, column 107): " + [ r.preferLocal.constructor.name ]);
    };
};
var fromKillSignal = function (ks) {
    var renderError = function (errs) {
        return Partial_Unsafe.unsafeCrashWith("Unexpected kill signal. Value should be String or Int but got these errors: " + intercalate1("; ")(map2(Foreign.renderForeignError)(errs)));
    };
    return Data_Either.either(renderError)(identity)(Control_Monad_Except.runExcept(alt1(map3(Data_Either.Left.create)(readInt(ks)))(map3(Data_Either.Right.create)(readString(ks)))));
};
var spawnedKill = /* #__PURE__ */ (function () {
    var isSigTerm = function (v) {
        if (v instanceof Data_Either.Left) {
            return Data_Maybe.maybe(false)((function () {
                var $221 = eq("SIGTERM");
                return function ($222) {
                    return $221(Data_String_Common.toUpper((function (v1) {
                        return v1.name;
                    })($222)));
                };
            })())(lookup(v.value0)(Node_Library_HumanSignals.signals.byNumber));
        };
        if (v instanceof Data_Either.Right) {
            return "SIGTERM" === Data_String_Common.toUpper(v.value0);
        };
        throw new Error("Failed pattern match at Node.Library.Execa (line 744, column 15 - line 746, column 47): " + [ v.constructor.name ]);
    };
    return function (killFn, numOrStringSignal, forceKillAfterTimeout) {
        var signal = (function () {
            var v = Data_Nullable.toMaybe(numOrStringSignal);
            if (v instanceof Data_Maybe.Nothing) {
                return new Data_Either.Right("SIGTERM");
            };
            if (v instanceof Data_Maybe.Just) {
                return fromKillSignal(v.value0);
            };
            throw new Error("Failed pattern match at Node.Library.Execa (line 728, column 14 - line 730, column 47): " + [ v.constructor.name ]);
        })();
        var killSignalSucceeded = killFn(Data_Either.either(intKillSignal)(stringKillSignal)(signal));
        var mbTimeout = discard1(guard(isSigTerm(signal)))(function () {
            return discard1(guard(killSignalSucceeded))(function () {
                return Data_Nullable.toMaybe(forceKillAfterTimeout);
            });
        });
        for_(mbTimeout)(function (v) {
            return function __do() {
                var t = $foreign.setTimeoutImpl(Data_Int.floor(v), $$void(function () {
                    return killFn(stringKillSignal("SIGKILL"));
                }));
                return t.unref();
            };
        })();
        return killSignalSucceeded;
    };
})();
var exitCode = function (cp) {
    return map(Data_Nullable.toMaybe)(function () {
        return $foreign.exitCodeImpl(cp);
    });
};
var doubleQuotesregex = /* #__PURE__ */ Data_String_Regex_Unsafe.unsafeRegex("\"")(Data_String_Regex_Flags.global);
var getEscapedCommand = function (file) {
    return function (args) {
        var escapeArg = function (arg) {
            if (Data_String_Regex.test(noEscapeRegex)(arg)) {
                return arg;
            };
            if (Data_Boolean.otherwise) {
                return "\"" + (Data_String_Regex.replace(doubleQuotesregex)("\\" + "\"")(arg) + "\"");
            };
            throw new Error("Failed pattern match at Node.Library.Execa (line 676, column 3 - line 678, column 87): " + [ arg.constructor.name ]);
        };
        return intercalate(" ")(map4(escapeArg)(Data_Array.cons(file)(args)));
    };
};
var disconnect = function (cp) {
    return function () {
        return $foreign.disconnectImpl(cp);
    };
};
var defaultOptions = /* #__PURE__ */ (function () {
    return {
        cleanup: true,
        preferLocal: new Data_Maybe.Just({
            localDir: Data_Maybe.Nothing.value,
            execPath: Data_Maybe.Nothing.value
        }),
        stripFinalNewline: true,
        extendEnv: true,
        maxBuffer: Data_Int.toNumber((1000 * 1000 | 0) * 100 | 0),
        encoding: Node_Encoding.UTF8.value,
        windowsVerbatimArguments: false,
        windowsHide: true,
        windowsEnableCmdEcho: false
    };
})();
var handleArguments = function (file) {
    return function (args) {
        return function (initOptions) {
            return function __do() {
                var parsed = Node_Library_Execa_CrossSpawn.parse(file)(args)({
                    shell: initOptions.shell,
                    env: initOptions.env,
                    cwd: initOptions.cwd,
                    windowsVerbatimArguments: Data_Maybe.Nothing.value,
                    windowsEnableCmdEcho: Data_Maybe.fromMaybe(defaultOptions.windowsEnableCmdEcho)(initOptions.windowsEnableCmdEcho)
                })();
                var processCwd = Node_Process.cwd();
                var env = getEnv({
                    env: Data_Maybe.fromMaybe(Foreign_Object.empty)(initOptions.env),
                    extendEnv: Data_Maybe.fromMaybe(defaultOptions.extendEnv)(initOptions.extendEnv),
                    preferLocal: initOptions.preferLocal
                })();
                var v = (function () {
                    if (initOptions.timeout instanceof Data_Maybe.Just && initOptions.timeout.value0.milliseconds > 0.0) {
                        return {
                            timeout: new Data_Maybe.Just(initOptions.timeout.value0.milliseconds),
                            killSignal: new Data_Maybe.Just(initOptions.timeout.value0.killSignal),
                            timeoutWithKillSignal: new Data_Maybe.Just(initOptions.timeout.value0)
                        };
                    };
                    return {
                        timeout: Data_Maybe.Nothing.value,
                        killSignal: Data_Maybe.Nothing.value,
                        timeoutWithKillSignal: Data_Maybe.Nothing.value
                    };
                })();
                var options = {
                    cleanup: Data_Maybe.fromMaybe(defaultOptions.cleanup)(initOptions.cleanup),
                    stdioExtra: Data_Maybe.fromMaybe([  ])(initOptions.stdioExtra),
                    maxBuffer: Data_Maybe.fromMaybe(defaultOptions.maxBuffer)(initOptions.maxBuffer),
                    stripFinalNewline: Data_Maybe.fromMaybe(defaultOptions.stripFinalNewline)(initOptions.stripFinalNewline),
                    cwd: Data_Maybe.fromMaybe(processCwd)(initOptions.cwd),
                    encoding: Data_Maybe.fromMaybe(defaultOptions.encoding)(initOptions.encoding),
                    env: env,
                    argv0: initOptions.argv0,
                    detached: Data_Maybe.fromMaybe(false)(initOptions.detached),
                    uid: initOptions.uid,
                    gid: initOptions.gid,
                    shell: initOptions.shell,
                    timeout: v.timeout,
                    killSignal: v.killSignal,
                    timeoutWithKillSignal: v.timeoutWithKillSignal,
                    windowsHide: Data_Maybe.fromMaybe(defaultOptions.windowsHide)(initOptions.windowsHide),
                    windowsVerbatimArguments: Data_Maybe.fromMaybe(defaultOptions.windowsVerbatimArguments)(parsed.options.windowsVerbatimArguments)
                };
                return {
                    file: parsed.command,
                    args: parsed.args,
                    options: options,
                    parsed: parsed
                };
            };
        };
    };
};
var defaultExecaSyncOptions = /* #__PURE__ */ (function () {
    return {
        cleanup: Data_Maybe.Nothing.value,
        preferLocal: Data_Maybe.Nothing.value,
        stripFinalNewline: Data_Maybe.Nothing.value,
        extendEnv: Data_Maybe.Nothing.value,
        cwd: Data_Maybe.Nothing.value,
        env: Data_Maybe.Nothing.value,
        argv0: Data_Maybe.Nothing.value,
        input: Data_Maybe.Nothing.value,
        stdioExtra: Data_Maybe.Nothing.value,
        detached: Data_Maybe.Nothing.value,
        uid: Data_Maybe.Nothing.value,
        gid: Data_Maybe.Nothing.value,
        shell: Data_Maybe.Nothing.value,
        timeout: Data_Maybe.Nothing.value,
        maxBuffer: Data_Maybe.Nothing.value,
        encoding: Data_Maybe.Nothing.value,
        windowsVerbatimArguments: Data_Maybe.Nothing.value,
        windowsHide: Data_Maybe.Nothing.value,
        windowsEnableCmdEcho: Data_Maybe.Nothing.value
    };
})();
var execaSync = function (file) {
    return function (args) {
        return function (buildOptions) {
            var options = buildOptions(defaultExecaSyncOptions);
            return function __do() {
                var parsed = handleArguments(file)(args)($$delete(Type_Proxy["Proxy"].value)(options))();
                var escapedCommand = getEscapedCommand(file)(args);
                var command = joinCommand(file)(args);
                var result = spawnSync(parsed.file)(parsed.args)({
                    cwd: new Data_Maybe.Just(parsed.options.cwd),
                    input: options.input,
                    argv0: parsed.options.argv0,
                    stdioExtra: new Data_Maybe.Just(parsed.options.stdioExtra),
                    env: new Data_Maybe.Just(parsed.options.env),
                    uid: parsed.options.uid,
                    gid: parsed.options.gid,
                    timeout: parsed.options.timeout,
                    killSignal: parsed.options.killSignal,
                    maxBuffer: new Data_Maybe.Just(parsed.options.maxBuffer),
                    shell: parsed.options.shell,
                    windowsVerbatimArguments: new Data_Maybe.Just(parsed.options.windowsVerbatimArguments),
                    windowsHide: new Data_Maybe.Just(parsed.options.windowsHide)
                })();
                var stripOption = Data_Maybe.fromMaybe(true)(options.stripFinalNewline);
                var encoding = Data_Maybe.fromMaybe(defaultOptions.encoding)(options.encoding);
                var bufferToString = Node_Buffer_Immutable.toString(encoding);
                var stdout$prime = map(bufferToString)(handleOutput({
                    stripFinalNewline: stripOption
                })(result.stdout))();
                var stderr$prime = map(bufferToString)(handleOutput({
                    stripFinalNewline: stripOption
                })(result.stderr))();
                var resultSignal = map1(fromKillSignal)(Data_Nullable.toMaybe(result.signal));
                var resultError = Data_Nullable.toMaybe(result.error);
                var hasNonZeroExit = (function () {
                    var v = Data_Nullable.toMaybe(result.status);
                    if (v instanceof Data_Maybe.Just && v.value0 !== 0) {
                        return true;
                    };
                    return false;
                })();
                var $187 = Data_Maybe.isJust(resultError) || (hasNonZeroExit || Data_Maybe.isJust(resultSignal));
                if ($187) {
                    return new Data_Either.Left(mkError({
                        command: command,
                        escapedCommand: escapedCommand,
                        stdout: stdout$prime,
                        stderr: stderr$prime,
                        stdinErr: Data_Maybe.Nothing.value,
                        stdoutErr: Data_Maybe.Nothing.value,
                        stderrErr: Data_Maybe.Nothing.value,
                        error: resultError,
                        signal: resultSignal,
                        exitCode: Data_Nullable.toMaybe(result.status),
                        parsed: parsed,
                        timedOut: eq1(new Data_Maybe.Just("ETIMEDOUT"))(map1(function (v) {
                            return v.code;
                        })(resultError)),
                        isCanceled: false,
                        killed: Data_Maybe.isJust(resultSignal)
                    }));
                };
                return new Data_Either.Right({
                    command: command,
                    escapedCommand: escapedCommand,
                    stdout: stdout$prime,
                    stderr: stderr$prime,
                    exitCode: 0
                });
            };
        };
    };
};
var execaCommandSync = function (s) {
    return function (buildOptions) {
        var v = Node_Library_Execa_ParseCommand.parseCommand(s);
        if (v instanceof Data_Maybe.Just) {
            return execaSync(v.value0.file)(v.value0.args)(buildOptions);
        };
        if (v instanceof Data_Maybe.Nothing) {
            return liftEffect(Effect_Exception["throw"]("Command " + (show3(s) + " could not be parsed into `{ file :: String, args :: Array String }` value.")));
        };
        throw new Error("Failed pattern match at Node.Library.Execa (line 895, column 3 - line 899, column 129): " + [ v.constructor.name ]);
    };
};
var defaultExecaOptions = /* #__PURE__ */ (function () {
    return {
        cleanup: Data_Maybe.Nothing.value,
        preferLocal: Data_Maybe.Nothing.value,
        stdioExtra: Data_Maybe.Nothing.value,
        stripFinalNewline: Data_Maybe.Nothing.value,
        extendEnv: Data_Maybe.Nothing.value,
        encoding: Data_Maybe.Nothing.value,
        cwd: Data_Maybe.Nothing.value,
        env: Data_Maybe.Nothing.value,
        argv0: Data_Maybe.Nothing.value,
        detached: Data_Maybe.Nothing.value,
        uid: Data_Maybe.Nothing.value,
        gid: Data_Maybe.Nothing.value,
        shell: Data_Maybe.Nothing.value,
        timeout: Data_Maybe.Nothing.value,
        maxBuffer: Data_Maybe.Nothing.value,
        windowsVerbatimArguments: Data_Maybe.Nothing.value,
        windowsHide: Data_Maybe.Nothing.value,
        windowsEnableCmdEcho: Data_Maybe.Nothing.value
    };
})();
var connected = function (cp) {
    return function () {
        return $foreign.connectedImpl(cp);
    };
};
var channel = function (cp) {
    return map(Data_Nullable.toMaybe)(function () {
        return $foreign.channelImpl(cp);
    });
};
var _TimedOut = function (dictChoice) {
    return Data_Lens_Prism.prism(TimedOut.create)(function (v) {
        if (v instanceof TimedOut) {
            return new Data_Either.Right(v.value0);
        };
        return new Data_Either.Left(v);
    })(dictChoice);
};
var _TimedOut1 = /* #__PURE__ */ _TimedOut(choiceForget);
var _TimedOut2 = /* #__PURE__ */ _TimedOut(Data_Lens_Internal_Market.choiceMarket);
var _StdinError = function (dictChoice) {
    return Data_Lens_Prism.prism(StdinError.create)(function (v) {
        if (v instanceof StdinError) {
            return new Data_Either.Right(v.value0);
        };
        return new Data_Either.Left(v);
    })(dictChoice);
};
var _StdinError1 = /* #__PURE__ */ _StdinError(choiceForget);
var _SpawnError = function (dictChoice) {
    return Data_Lens_Prism.prism(SpawnError.create)(function (v) {
        if (v instanceof SpawnError) {
            return new Data_Either.Right(v.value0);
        };
        return new Data_Either.Left(v);
    })(dictChoice);
};
var _SpawnError1 = /* #__PURE__ */ _SpawnError(choiceForget);
var _Killed = function (dictChoice) {
    return Data_Lens_Prism.prism(Killed.create)(function (v) {
        if (v instanceof Killed) {
            return new Data_Either.Right(v.value0);
        };
        return new Data_Either.Left(v);
    })(dictChoice);
};
var _Killed1 = /* #__PURE__ */ _Killed(choiceForget);
var _ExitCode = function (dictChoice) {
    return Data_Lens_Prism.prism(ExitCode.create)(function (v) {
        if (v instanceof ExitCode) {
            return new Data_Either.Right(v.value0);
        };
        return new Data_Either.Left(v);
    })(dictChoice);
};
var _ExitCode1 = /* #__PURE__ */ _ExitCode(choiceForget);
var execa = function (file) {
    return function (args) {
        return function (buildOptions) {
            var options = buildOptions(defaultExecaOptions);
            return bind2(liftEffect1(handleArguments(file)(args)(options)))(function (parsed) {
                var escapedCommand = getEscapedCommand(file)(args);
                var command = joinCommand(file)(args);
                return bind2(liftEffect1(spawn(parsed.file)(parsed.args)({
                    cwd: options.cwd,
                    env: options.env,
                    argv0: options.argv0,
                    stdioExtra: options.stdioExtra,
                    detached: options.detached,
                    uid: options.uid,
                    gid: options.gid,
                    serialization: Data_Maybe.Nothing.value,
                    shell: options.shell,
                    windowsVerbatimArguments: options.windowsVerbatimArguments,
                    windowsHide: options.windowsHide
                })))(function (spawned) {
                    return bind2(Effect_Aff.suspendAff(Effect_Aff.makeAff(function (cb) {
                        return function __do() {
                            onExit(spawned)(function (e) {
                                return function (s) {
                                    if (e instanceof Data_Maybe.Just) {
                                        return cb(new Data_Either.Right(new ExitCode(e.value0)));
                                    };
                                    if (s instanceof Data_Maybe.Just) {
                                        return cb(new Data_Either.Right(new Killed(fromKillSignal(s.value0))));
                                    };
                                    return Partial_Unsafe.unsafeCrashWith("Impossible: either exit code or signal code must be non-null");
                                };
                            })();
                            onError(spawned)(function (error) {
                                return cb(new Data_Either.Right(new SpawnError(error)));
                            })();
                            Node_Stream.onError($foreign.stdin(spawned))(function (error) {
                                return cb(new Data_Either.Right(new StdinError(error)));
                            })();
                            return Effect_Aff.nonCanceler;
                        };
                    })))(function (spawnedFiber) {
                        return bind2(Effect_Aff.suspendAff((function () {
                            if (parsed.options.timeoutWithKillSignal instanceof Data_Maybe.Just) {
                                return Effect_Aff.makeAff(function (cb) {
                                    return function __do() {
                                        var tid = Effect_Timer.setTimeout(parsed.options.timeoutWithKillSignal.value0.milliseconds)(function __do() {
                                            $$void(kill$prime$prime(toKillSignal(parsed.options.timeoutWithKillSignal.value0.killSignal))(Data_Maybe.Nothing.value)(spawned))();
                                            $$void(Node_Stream.destroy($foreign.stdin(spawned)))();
                                            $$void(Node_Stream.destroy($foreign.stdout(spawned)))();
                                            $$void(Node_Stream.destroy($foreign.stderr(spawned)))();
                                            return cb(new Data_Either.Right(new TimedOut(parsed.options.timeoutWithKillSignal.value0.killSignal)))();
                                        })();
                                        return Effect_Aff.effectCanceler(Effect_Timer.clearTimeout(tid));
                                    };
                                });
                            };
                            return Effect_Aff.never;
                        })()))(function (timeoutFiber) {
                            return bind2(Effect_Aff.suspendAff(parOneOf([ Effect_Aff.joinFiber(spawnedFiber), Effect_Aff.joinFiber(timeoutFiber) ])))(function (mainFiber) {
                                return bind2((function () {
                                    var $210 = !parsed.options.cleanup || parsed.options.detached;
                                    if ($210) {
                                        return pure1(mainFiber);
                                    };
                                    return Effect_Aff.suspendAff(bind2(liftEffect1(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (removeHandlerRef) {
                                        return Effect_Aff["finally"](liftEffect1(bind1(Effect_Ref.read(removeHandlerRef))(sequence_)))(discard3(liftEffect1(function __do() {
                                            var removal = Node_Library_Execa_SignalExit.onExit(function (v) {
                                                return function (v1) {
                                                    return $$void(kill$prime$prime(stringKillSignal("SIGTERM"))(Data_Maybe.Nothing.value)(spawned));
                                                };
                                            })();
                                            return Effect_Ref.write(new Data_Maybe.Just(removal))(removeHandlerRef)();
                                        }))(function () {
                                            return Effect_Aff.joinFiber(mainFiber);
                                        }));
                                    }));
                                })())(function (processDoneFiber) {
                                    return discard3(liftEffect1(function () {
                                        return $foreign.monkeyPatchKill(spawned, spawnedKill);
                                    }))(function () {
                                        return bind2(liftEffect1(Effect_Ref["new"](false)))(function (isCanceledRef) {
                                            var cancel = liftEffect1(function __do() {
                                                var killSucceeded = kill(spawned)();
                                                return when(killSucceeded)(Effect_Ref.write(true)(isCanceledRef))();
                                            });
                                            var bufferToString = Node_Buffer_Immutable.toString(parsed.options.encoding);
                                            var mkStdIoFiber = function (stream) {
                                                return Effect_Aff.forkAff(bind2(Node_Library_Execa_GetStream.getStreamBuffer(stream)({
                                                    maxBuffer: new Data_Maybe.Just(parsed.options.maxBuffer)
                                                }))(function (streamResult) {
                                                    return bind2(liftEffect1(function __do() {
                                                        var text = map(bufferToString)(handleOutput({
                                                            stripFinalNewline: parsed.options.stripFinalNewline
                                                        })(streamResult.buffer))();
                                                        when(Data_Maybe.isJust(streamResult.inputError))(Node_Stream.destroy(stream))();
                                                        return text;
                                                    }))(function (text) {
                                                        return pure1({
                                                            text: text,
                                                            error: streamResult.inputError
                                                        });
                                                    });
                                                }));
                                            };
                                            return bind2(Effect_Aff.forkAff(Effect_Aff.joinFiber(processDoneFiber)))(function (runFiber) {
                                                return bind2(mkStdIoFiber($foreign.stdout(spawned)))(function (stdoutFiber) {
                                                    return bind2(mkStdIoFiber($foreign.stderr(spawned)))(function (stderrFiber) {
                                                        var getSpawnResult = apply(apply(map5(function (v) {
                                                            return function (v1) {
                                                                return function (v2) {
                                                                    return {
                                                                        main: v,
                                                                        stdout: v1,
                                                                        stderr: v2
                                                                    };
                                                                };
                                                            };
                                                        })(Effect_Aff.joinFiber(runFiber)))(Effect_Aff.joinFiber(stdoutFiber)))(Effect_Aff.joinFiber(stderrFiber));
                                                        return bind2(Effect_Aff.forkAff(bind2(getSpawnResult)(function (result) {
                                                            if (result.main instanceof ExitCode && (result.main.value0 === 0 && (result.stdout.error instanceof Data_Maybe.Nothing && result.stderr.error instanceof Data_Maybe.Nothing))) {
                                                                return pure1(new Data_Either.Right({
                                                                    command: command,
                                                                    escapedCommand: escapedCommand,
                                                                    exitCode: 0,
                                                                    stdout: result.stdout.text,
                                                                    stderr: result.stderr.text
                                                                }));
                                                            };
                                                            return liftEffect1(function __do() {
                                                                var isCanceled = Effect_Ref.read(isCanceledRef)();
                                                                var killed$prime = killed(spawned)();
                                                                return new Data_Either.Left(mkError({
                                                                    error: Data_Lens_Fold.preview(_SpawnError1)(result.main),
                                                                    stdinErr: Data_Lens_Fold.preview(_StdinError1)(result.main),
                                                                    stdoutErr: result.stdout.error,
                                                                    stderrErr: result.stderr.error,
                                                                    exitCode: Data_Lens_Fold.preview(_ExitCode1)(result.main),
                                                                    signal: alt(Data_Lens_Fold.preview(_Killed1)(result.main))(Data_Lens_Fold.preview(_TimedOut1)(result.main)),
                                                                    stdout: result.stdout.text,
                                                                    stderr: result.stderr.text,
                                                                    command: command,
                                                                    escapedCommand: escapedCommand,
                                                                    parsed: parsed,
                                                                    timedOut: is(_TimedOut2)(result.main),
                                                                    isCanceled: isCanceled,
                                                                    killed: killed$prime
                                                                }));
                                                            });
                                                        })))(function (run) {
                                                            return pure1({
                                                                channel: liftEffect1(channel(spawned)),
                                                                connected: liftEffect1(connected(spawned)),
                                                                disconnect: liftEffect1(disconnect(spawned)),
                                                                exitCode: liftEffect1(exitCode(spawned)),
                                                                kill: liftEffect1(kill(spawned)),
                                                                killWithSignal: function (signal) {
                                                                    return liftEffect1(kill$prime(toKillSignal(signal))(spawned));
                                                                },
                                                                killForced: function (forceKillAfterTimeout) {
                                                                    return liftEffect1(kill$prime$prime(stringKillSignal("SIGTERM"))(new Data_Maybe.Just(forceKillAfterTimeout))(spawned));
                                                                },
                                                                killForcedWithSignal: function (signal) {
                                                                    return function (forceKillAfterTimeout) {
                                                                        return liftEffect1(kill$prime$prime(toKillSignal(signal))(new Data_Maybe.Just(forceKillAfterTimeout))(spawned));
                                                                    };
                                                                },
                                                                pidExists: liftEffect1(pidExists(spawned)),
                                                                killed: liftEffect1(killed(spawned)),
                                                                pid: liftEffect1(pid(spawned)),
                                                                unref: liftEffect1(unref(spawned)),
                                                                ref: liftEffect1(ref(spawned)),
                                                                send: function (foreignData) {
                                                                    return function (handle) {
                                                                        return function (mkOptions) {
                                                                            return function (cb) {
                                                                                return liftEffect1(send(spawned)(foreignData)(handle)(mkOptions)(cb));
                                                                            };
                                                                        };
                                                                    };
                                                                },
                                                                signalCode: liftEffect1(signalCode(spawned)),
                                                                spawnArgs: $foreign.spawnArgs(spawned),
                                                                spawnFile: $foreign.spawnFile(spawned),
                                                                onClose: function (cb) {
                                                                    return liftEffect1(onClose(spawned)(cb));
                                                                },
                                                                onDisconnect: function (cb) {
                                                                    return liftEffect1(onDisconnect(spawned)(cb));
                                                                },
                                                                onError: function (cb) {
                                                                    return liftEffect1(onError(spawned)(cb));
                                                                },
                                                                onMessage: function (cb) {
                                                                    return liftEffect1(onMessage(spawned)(cb));
                                                                },
                                                                onSpawn: function (cb) {
                                                                    return liftEffect1(onSpawn(spawned)(cb));
                                                                },
                                                                stdin: {
                                                                    stream: $foreign.stdin(spawned),
                                                                    writeUtf8: function (string) {
                                                                        return liftEffect1(function __do() {
                                                                            var buf = fromString(string)(Node_Encoding.UTF8.value)();
                                                                            return $$void(Node_Stream.write($foreign.stdin(spawned))(buf)(mempty))();
                                                                        });
                                                                    },
                                                                    writeUtf8End: function (string) {
                                                                        return liftEffect1(function __do() {
                                                                            var buf = fromString(string)(Node_Encoding.UTF8.value)();
                                                                            $$void(Node_Stream.write($foreign.stdin(spawned))(buf)(mempty))();
                                                                            return $$void(Node_Stream.end($foreign.stdin(spawned))(mempty))();
                                                                        });
                                                                    },
                                                                    end: liftEffect1($$void(Node_Stream.end($foreign.stdin(spawned))(mempty))),
                                                                    shareParentProcessStdin: liftEffect1($$void(Node_Stream.pipe(Node_Process.stdin)($foreign.stdin(spawned))))
                                                                },
                                                                stdout: {
                                                                    stream: $foreign.stdout(spawned),
                                                                    output: Effect_Aff.joinFiber(stdoutFiber),
                                                                    pipeToParentStdout: liftEffect1($$void(Node_Stream.pipe($foreign.stdout(spawned))(Node_Process.stdout)))
                                                                },
                                                                stderr: {
                                                                    stream: $foreign.stderr(spawned),
                                                                    output: Effect_Aff.joinFiber(stderrFiber),
                                                                    pipeToParentStderr: liftEffect1($$void(Node_Stream.pipe($foreign.stderr(spawned))(Node_Process.stderr)))
                                                                },
                                                                stdio: liftEffect1(stdio(spawned)),
                                                                cancel: cancel,
                                                                result: Effect_Aff.joinFiber(run)
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        };
    };
};
var execaCommand = function (s) {
    return function (buildOptions) {
        var v = Node_Library_Execa_ParseCommand.parseCommand(s);
        if (v instanceof Data_Maybe.Just) {
            return execa(v.value0.file)(v.value0.args)(buildOptions);
        };
        if (v instanceof Data_Maybe.Nothing) {
            return liftEffect1(Effect_Exception["throw"]("Command " + (show3(s) + " could not be parsed into `{ file :: String, args :: Array String }` value.")));
        };
        throw new Error("Failed pattern match at Node.Library.Execa (line 876, column 3 - line 880, column 129): " + [ v.constructor.name ]);
    };
};
export {
    execa,
    execaSync,
    execaCommand,
    execaCommandSync
};
//# sourceMappingURL=index.js.map
