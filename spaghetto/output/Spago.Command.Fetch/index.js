// Generated by purs version 0.15.10
import * as Affjax from "../Affjax/index.js";
import * as Affjax_Node from "../Affjax.Node/index.js";
import * as Affjax_ResponseFormat from "../Affjax.ResponseFormat/index.js";
import * as Affjax_StatusCode from "../Affjax.StatusCode/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad from "../Control.Monad/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Control_Monad_State_Class from "../Control.Monad.State.Class/index.js";
import * as Control_Monad_State_Trans from "../Control.Monad.State.Trans/index.js";
import * as Control_Monad_Trans_Class from "../Control.Monad.Trans.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_HTTP_Method from "../Data.HTTP.Method/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Map from "../Data.Map/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_TraversableWithIndex from "../Data.TraversableWithIndex/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Dodo from "../Dodo/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Node_Buffer from "../Node.Buffer/index.js";
import * as Node_Buffer_Class from "../Node.Buffer.Class/index.js";
import * as Node_Encoding from "../Node.Encoding/index.js";
import * as Node_Path from "../Node.Path/index.js";
import * as Registry_Internal_Codec from "../Registry.Internal.Codec/index.js";
import * as Registry_Metadata from "../Registry.Metadata/index.js";
import * as Registry_PackageName from "../Registry.PackageName/index.js";
import * as Registry_Range from "../Registry.Range/index.js";
import * as Registry_Sha256 from "../Registry.Sha256/index.js";
import * as Registry_Solver from "../Registry.Solver/index.js";
import * as Registry_Version from "../Registry.Version/index.js";
import * as Spago_Command_Repl from "../Spago.Command.Repl/index.js";
import * as Spago_Config from "../Spago.Config/index.js";
import * as Spago_Core_Config from "../Spago.Core.Config/index.js";
import * as Spago_Core_Prelude from "../Spago.Core.Prelude/index.js";
import * as Spago_FS from "../Spago.FS/index.js";
import * as Spago_Git from "../Spago.Git/index.js";
import * as Spago_Json from "../Spago.Json/index.js";
import * as Spago_Lock from "../Spago.Lock/index.js";
import * as Spago_Log from "../Spago.Log/index.js";
import * as Spago_Paths from "../Spago.Paths/index.js";
import * as Spago_Prelude from "../Spago.Prelude/index.js";
import * as Spago_Tar from "../Spago.Tar/index.js";
var append = /* #__PURE__ */ Data_Semigroup.append(Spago_Core_Config.semigroupDependencies);
var mempty = /* #__PURE__ */ Data_Monoid.mempty(Spago_Core_Config.monoidDependencies);
var map = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var bind = /* #__PURE__ */ Control_Bind.bind(Spago_Core_Prelude.bindSpago);
var mkTemp$prime = /* #__PURE__ */ Spago_Prelude["mkTemp$prime"](Spago_Core_Prelude.monadAffSpago);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var discard1 = /* #__PURE__ */ discard(Spago_Core_Prelude.bindSpago);
var logDebug = /* #__PURE__ */ Spago_Log.logDebug(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var mkdirp = /* #__PURE__ */ Spago_FS.mkdirp(Spago_Core_Prelude.monadAffSpago);
var moveSync = /* #__PURE__ */ Spago_FS.moveSync(Spago_Core_Prelude.monadEffectSpago);
var pure = /* #__PURE__ */ Control_Applicative.pure(Spago_Core_Prelude.applicativeSpago);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Map_Internal.functorMap);
var die = /* #__PURE__ */ Spago_Log.die(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago);
var loggableArray = /* #__PURE__ */ Spago_Log.loggableArray(Spago_Log.loggableString);
var die1 = /* #__PURE__ */ die(loggableArray);
var ask = /* #__PURE__ */ Control_Monad_Reader_Class.ask(Spago_Core_Prelude.monadAskSpago);
var runSpago = /* #__PURE__ */ Spago_Core_Prelude.runSpago(Spago_Core_Prelude.monadAffSpago);
var unwrap = /* #__PURE__ */ Data_Newtype.unwrap();
var unlessM = /* #__PURE__ */ Control_Monad.unlessM(Spago_Core_Prelude.monadSpago);
var exists = /* #__PURE__ */ Spago_FS.exists(Spago_Core_Prelude.monadEffectSpago);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Spago_Core_Prelude.monadEffectSpago);
var union = /* #__PURE__ */ Data_Map_Internal.union(Registry_PackageName.ordPackageName);
var cycleIsSymbol = {
    reflectSymbol: function () {
        return "cycle";
    }
};
var notInIndexIsSymbol = {
    reflectSymbol: function () {
        return "notInIndex";
    }
};
var notInPackageSetIsSymbol = {
    reflectSymbol: function () {
        return "notInPackageSet";
    }
};
var semigroupSet = /* #__PURE__ */ Data_Set.semigroupSet(Registry_PackageName.ordPackageName);
var append2 = /* #__PURE__ */ Data_Semigroup.append(/* #__PURE__ */ Data_Semigroup.semigroupRecord()(/* #__PURE__ */ Data_Semigroup.semigroupRecordCons(cycleIsSymbol)()(/* #__PURE__ */ Data_Semigroup.semigroupRecordCons(notInIndexIsSymbol)()(/* #__PURE__ */ Data_Semigroup.semigroupRecordCons(notInPackageSetIsSymbol)()(Data_Semigroup.semigroupRecordNil)(semigroupSet))(semigroupSet))(semigroupSet)));
var lookup = /* #__PURE__ */ Data_Map_Internal.lookup(Registry_PackageName.ordPackageName);
var insert = /* #__PURE__ */ Data_Map_Internal.insert(Registry_PackageName.ordPackageName);
var monoidSet = /* #__PURE__ */ Data_Set.monoidSet(Registry_PackageName.ordPackageName);
var mempty1 = /* #__PURE__ */ Data_Monoid.mempty(/* #__PURE__ */ Data_Monoid.monoidRecord()(/* #__PURE__ */ Data_Monoid.monoidRecordCons(cycleIsSymbol)(monoidSet)()(/* #__PURE__ */ Data_Monoid.monoidRecordCons(notInIndexIsSymbol)(monoidSet)()(/* #__PURE__ */ Data_Monoid.monoidRecordCons(notInPackageSetIsSymbol)(monoidSet)()(Data_Monoid.monoidRecordNil)))));
var member = /* #__PURE__ */ Data_Set.member(Registry_PackageName.ordPackageName);
var applicativeStateT = /* #__PURE__ */ Control_Monad_State_Trans.applicativeStateT(Spago_Core_Prelude.monadSpago);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(applicativeStateT);
var bindStateT = /* #__PURE__ */ Control_Monad_State_Trans.bindStateT(Spago_Core_Prelude.monadSpago);
var bind1 = /* #__PURE__ */ Control_Bind.bind(bindStateT);
var monadStateStateT = /* #__PURE__ */ Control_Monad_State_Trans.monadStateStateT(Spago_Core_Prelude.monadSpago);
var get = /* #__PURE__ */ Control_Monad_State_Class.get(monadStateStateT);
var lift = /* #__PURE__ */ Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Spago_Core_Prelude.monadSpago);
var $$for = /* #__PURE__ */ Data_Traversable["for"](applicativeStateT)(Data_Traversable.traversableArray);
var toUnfoldable = /* #__PURE__ */ Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray);
var insert1 = /* #__PURE__ */ Data_Set.insert(Registry_PackageName.ordPackageName);
var foldl = /* #__PURE__ */ Data_Foldable.foldl(Data_Foldable.foldableArray);
var discard2 = /* #__PURE__ */ discard(bindStateT);
var when = /* #__PURE__ */ Control_Applicative.when(applicativeStateT);
var append3 = /* #__PURE__ */ Data_Semigroup.append(semigroupSet);
var modify_ = /* #__PURE__ */ Control_Monad_State_Class.modify_(monadStateStateT);
var for1 = /* #__PURE__ */ Data_Traversable["for"](Spago_Core_Prelude.applicativeSpago)(Data_Traversable.traversableArray);
var evalStateT = /* #__PURE__ */ Control_Monad_State_Trans.evalStateT(Spago_Core_Prelude.functorSpago);
var mempty2 = /* #__PURE__ */ Data_Monoid.mempty(monoidSet);
var when1 = /* #__PURE__ */ Control_Applicative.when(Spago_Core_Prelude.applicativeSpago);
var die2 = /* #__PURE__ */ die(Spago_Log.loggableString);
var foldMap = /* #__PURE__ */ Data_Foldable.foldMap(Data_Foldable.foldableArray);
var foldMap1 = /* #__PURE__ */ foldMap(Data_Monoid.monoidString);
var toUnfoldable1 = /* #__PURE__ */ Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray);
var foldMap2 = /* #__PURE__ */ Data_Foldable.foldMap(Data_Set.foldableSet)(Data_Monoid.monoidString);
var map2 = /* #__PURE__ */ Data_Functor.map(Spago_Core_Prelude.functorSpago);
var fromFoldable = /* #__PURE__ */ Data_Array.fromFoldable(Data_Set.foldableSet);
var fromFoldable1 = /* #__PURE__ */ Data_Map_Internal.fromFoldable(Registry_Version.ordVersion)(Data_Foldable.foldableArray);
var loadAndSolve = /* #__PURE__ */ Registry_Solver.loadAndSolve(Spago_Core_Prelude.monadSpago);
var die3 = /* #__PURE__ */ die(/* #__PURE__ */ Spago_Log.loggableArray(Spago_Log.loggableDocc));
var toDoc = /* #__PURE__ */ Spago_Log.toDoc(Spago_Log.loggableString);
var toDoc1 = /* #__PURE__ */ Spago_Log.toDoc(loggableArray);
var fromFoldable2 = /* #__PURE__ */ Data_Array.fromFoldable(Data_List_Types.foldableNonEmptyList);
var map3 = /* #__PURE__ */ Data_Functor.map(Data_List_Types.functorNonEmptyList);
var foldMap3 = /* #__PURE__ */ foldMap(Spago_Core_Config.monoidDependencies);
var fromFoldable3 = /* #__PURE__ */ Data_Map_Internal.fromFoldable(Registry_PackageName.ordPackageName)(Data_Foldable.foldableArray);
var map4 = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var unless = /* #__PURE__ */ Control_Applicative.unless(Spago_Core_Prelude.applicativeSpago);
var logInfo = /* #__PURE__ */ Spago_Log.logInfo(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var liftAff = /* #__PURE__ */ Effect_Aff_Class.liftAff(Spago_Core_Prelude.monadAffSpago);
var foldMap4 = /* #__PURE__ */ Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Spago_Core_Config.monoidDependencies);
var catMaybes = /* #__PURE__ */ Data_Map_Internal.catMaybes(Registry_PackageName.ordPackageName);
var forWithIndex = /* #__PURE__ */ Data_TraversableWithIndex.forWithIndex(Spago_Core_Prelude.applicativeSpago)(Data_Map_Internal.traversableWithIndexMap);
var die4 = /* #__PURE__ */ die(Spago_Log.loggableDocc);
var bind2 = /* #__PURE__ */ Control_Bind.bind(Data_Either.bindEither);
var lookup1 = /* #__PURE__ */ Data_Map_Internal.lookup(Registry_Version.ordVersion);
var mkTemp = /* #__PURE__ */ Spago_Prelude.mkTemp(Spago_Core_Prelude.monadAffSpago);
var notEq = /* #__PURE__ */ Data_Eq.notEq(Affjax_StatusCode.eqStatusCode);
var fromArrayBuffer = /* #__PURE__ */ Node_Buffer_Class.fromArrayBuffer(Node_Buffer.mutableBufferEffect);
var toString = /* #__PURE__ */ Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect);
var show1 = /* #__PURE__ */ Data_Show.show(Affjax_StatusCode.showStatusCode);
var size = /* #__PURE__ */ Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect);
var hashBuffer = /* #__PURE__ */ Registry_Sha256.hashBuffer(Effect_Class.monadEffectEffect);
var show2 = /* #__PURE__ */ Data_Show.show(Data_Show.showNumber);
var eq1 = /* #__PURE__ */ Data_Eq.eq(Registry_Sha256.eqSha256);
var writeFile = /* #__PURE__ */ Spago_FS.writeFile(Spago_Core_Prelude.monadAffSpago);
var show3 = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Show.showRecord()()(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "code";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "cwd";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "file";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "recoverable";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil({
    reflectSymbol: function () {
        return "tarCode";
    }
})(Data_Show.showString))(Data_Show.showBoolean))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString)));
var getWorkspacePackageDeps = function (pkg) {
    if (pkg.hasTests) {
        return append(pkg["package"].dependencies)(Data_Maybe.fromMaybe(mempty)(map(function (v) {
            return v.dependencies;
        })(pkg["package"].test)));
    };
    return pkg["package"].dependencies;
};
var getVersionFromPackage = function (v) {
    if (v instanceof Spago_Config.RegistryVersion) {
        return v.value0;
    };
    return Spago_Prelude.unsafeFromRight(Registry_Version.parse("0.0.0"));
};
var getRangeFromPackage = function (v) {
    if (v instanceof Spago_Config.RegistryVersion) {
        return Registry_Range.caret(v.value0);
    };
    return Spago_Core_Config.widestRange;
};
var getGitPackageInLocalCache = function (name) {
    return function ($$package) {
        var localPackageLocation = Spago_Config.getPackageLocation(name)(new Spago_Config.GitPackage($$package));
        return bind(mkTemp$prime(new Data_Maybe.Just(Spago_Json.printJson(Spago_Core_Config.gitPackageCodec)($$package))))(function (tempDir) {
            return discard1(logDebug("Cloning repo in " + tempDir))(function () {
                return discard1(Spago_Git.fetchRepo($$package)(tempDir))(function () {
                    return discard1(logDebug("Repo cloned. Moving to " + localPackageLocation))(function () {
                        return discard1(mkdirp(Node_Path.concat([ Spago_Paths.localCachePackagesPath, Registry_PackageName.print(name) ])))(function () {
                            return moveSync({
                                src: tempDir,
                                dst: localPackageLocation
                            });
                        });
                    });
                });
            });
        });
    };
};
var getPackageDependencies = function (packageName) {
    return function ($$package) {
        var readLocalDependencies = function (configLocation) {
            return bind(Spago_Core_Config.readConfig(Node_Path.concat([ configLocation, "spago.yaml" ])))(function (v) {
                if (v instanceof Data_Either.Right && v["value0"]["yaml"]["package"] instanceof Data_Maybe.Just) {
                    return pure(new Data_Maybe.Just(map1(Data_Maybe.fromMaybe(Spago_Core_Config.widestRange))(v["value0"]["yaml"]["package"].value0.dependencies)));
                };
                if (v instanceof Data_Either.Right) {
                    return die1([ "Read valid configuration from " + configLocation, "However, there was no `package` section to be read." ]);
                };
                if (v instanceof Data_Either.Left) {
                    return die1([ "Could not read config at " + configLocation, "Error: " + v.value0 ]);
                };
                throw new Error("Failed pattern match at Spago.Command.Fetch (line 271, column 74 - line 275, column 90): " + [ v.constructor.name ]);
            });
        };
        if ($$package instanceof Spago_Config.RegistryVersion) {
            return bind(ask)(function (v1) {
                return bind(runSpago({
                    logOptions: v1.logOptions
                })(v1.getManifestFromIndex(packageName)($$package.value0)))(function (maybeManifest) {
                    return pure(map(function ($320) {
                        return (function (v2) {
                            return v2.dependencies;
                        })(unwrap($320));
                    })(maybeManifest));
                });
            });
        };
        if ($$package instanceof Spago_Config.GitPackage) {
            var packageLocation = Spago_Config.getPackageLocation(packageName)($$package);
            return discard1(unlessM(exists(packageLocation))(getGitPackageInLocalCache(packageName)($$package.value0)))(function () {
                if ($$package.value0.dependencies instanceof Data_Maybe.Just) {
                    return pure(new Data_Maybe.Just(map1(Data_Maybe.fromMaybe(Spago_Core_Config.widestRange))($$package.value0.dependencies.value0)));
                };
                if ($$package.value0.dependencies instanceof Data_Maybe.Nothing) {
                    return readLocalDependencies((function () {
                        if ($$package.value0.subdir instanceof Data_Maybe.Nothing) {
                            return packageLocation;
                        };
                        if ($$package.value0.subdir instanceof Data_Maybe.Just) {
                            return Node_Path.concat([ packageLocation, $$package.value0.subdir.value0 ]);
                        };
                        throw new Error("Failed pattern match at Spago.Command.Fetch (line 259, column 31 - line 261, column 55): " + [ $$package.value0.subdir.constructor.name ]);
                    })());
                };
                throw new Error("Failed pattern match at Spago.Command.Fetch (line 256, column 5 - line 261, column 55): " + [ $$package.value0.dependencies.constructor.name ]);
            });
        };
        if ($$package instanceof Spago_Config.LocalPackage) {
            return readLocalDependencies($$package.value0.path);
        };
        if ($$package instanceof Spago_Config.WorkspacePackage) {
            return pure(new Data_Maybe.Just(map1(Data_Maybe.fromMaybe(Spago_Core_Config.widestRange))(unwrap(getWorkspacePackageDeps($$package.value0)))));
        };
        throw new Error("Failed pattern match at Spago.Command.Fetch (line 245, column 46 - line 265, column 90): " + [ $$package.constructor.name ]);
    };
};
var getTransitiveDepsFromPackageSet = function (packageSet) {
    return function (deps) {
        return discard1(logDebug("Getting transitive deps"))(function () {
            return bind(liftEffect(Effect_Ref["new"](Data_Map_Internal.empty)))(function (packageDependenciesCache) {
                var printPackageError = function (p) {
                    return "  - " + (Registry_PackageName.print(p) + "\x0a");
                };
                var mergeResults = function (r1) {
                    return function (r2) {
                        return {
                            packages: union(r1.packages)(r2.packages),
                            errors: append2(r1.errors)(r2.errors)
                        };
                    };
                };
                var memoisedGetPackageDependencies = function (packageName) {
                    return function ($$package) {
                        return bind(liftEffect(Effect_Ref.read(packageDependenciesCache)))(function (cache) {
                            var v = lookup(packageName)(cache);
                            if (v instanceof Data_Maybe.Just) {
                                return pure(v.value0);
                            };
                            if (v instanceof Data_Maybe.Nothing) {
                                return bind(getPackageDependencies(packageName)($$package))(function (res) {
                                    return discard1(liftEffect(Effect_Ref.modify_(insert(packageName)(res))(packageDependenciesCache)))(function () {
                                        return pure(res);
                                    });
                                });
                            };
                            throw new Error("Failed pattern match at Spago.Command.Fetch (line 341, column 7 - line 347, column 19): " + [ v.constructor.name ]);
                        });
                    };
                };
                var init = {
                    packages: Data_Map_Internal.empty,
                    errors: mempty1
                };
                var go = function (seen) {
                    return function (dep) {
                        var $222 = member(dep)(seen);
                        if ($222) {
                            return pure1({
                                errors: {
                                    cycle: Data_Set.singleton(dep),
                                    notInIndex: init.errors.notInIndex,
                                    notInPackageSet: init.errors.notInPackageSet
                                },
                                packages: init.packages
                            });
                        };
                        return bind1(get)(function (cache) {
                            var v = lookup(dep)(cache);
                            if (v instanceof Data_Maybe.Just) {
                                return pure1({
                                    packages: v.value0,
                                    errors: init.errors
                                });
                            };
                            if (v instanceof Data_Maybe.Nothing) {
                                var v1 = lookup(dep)(packageSet);
                                if (v1 instanceof Data_Maybe.Nothing) {
                                    return pure1({
                                        errors: {
                                            notInPackageSet: Data_Set.singleton(dep),
                                            cycle: init.errors.cycle,
                                            notInIndex: init.errors.notInIndex
                                        },
                                        packages: init.packages
                                    });
                                };
                                if (v1 instanceof Data_Maybe.Just) {
                                    return bind1(lift(memoisedGetPackageDependencies(dep)(v1.value0)))(function (maybeDeps) {
                                        if (maybeDeps instanceof Data_Maybe.Nothing) {
                                            return pure1({
                                                errors: {
                                                    notInIndex: Data_Set.singleton(dep),
                                                    cycle: init.errors.cycle,
                                                    notInPackageSet: init.errors.notInPackageSet
                                                },
                                                packages: init.packages
                                            });
                                        };
                                        if (maybeDeps instanceof Data_Maybe.Just) {
                                            return bind1(bind1($$for(toUnfoldable(maybeDeps.value0))(function (v2) {
                                                return go(insert1(dep)(seen))(v2.value0);
                                            }))((function () {
                                                var $321 = foldl(mergeResults)(init);
                                                return function ($322) {
                                                    return pure1($321($322));
                                                };
                                            })()))(function (v2) {
                                                var allDeps = insert(dep)(v1.value0)(v2.packages);
                                                return discard2(when(Data_Set.isEmpty(append3(v2.errors.cycle)(append3(v2.errors.notInIndex)(v2.errors.notInPackageSet))))(modify_(insert(dep)(allDeps))))(function () {
                                                    return pure1({
                                                        packages: allDeps,
                                                        errors: v2.errors
                                                    });
                                                });
                                            });
                                        };
                                        throw new Error("Failed pattern match at Spago.Command.Fetch (line 377, column 17 - line 387, column 55): " + [ maybeDeps.constructor.name ]);
                                    });
                                };
                                throw new Error("Failed pattern match at Spago.Command.Fetch (line 373, column 13 - line 387, column 55): " + [ v1.constructor.name ]);
                            };
                            throw new Error("Failed pattern match at Spago.Command.Fetch (line 367, column 9 - line 387, column 55): " + [ v.constructor.name ]);
                        });
                    };
                };
                return bind(bind(for1(deps)(function (d) {
                    return evalStateT(go(mempty2)(d))(Data_Map_Internal.empty);
                }))((function () {
                    var $323 = foldl(mergeResults)(init);
                    return function ($324) {
                        return pure($323($324));
                    };
                })()))(function (v) {
                    return discard1(when1(!Data_Set.isEmpty(v.errors.cycle))(die2("The following packages have circular dependencies:\x0a" + foldMap1(printPackageError)(toUnfoldable1(v.errors.cycle)))))(function () {
                        return discard1(when1(!Data_Set.isEmpty(v.errors.notInPackageSet))(die2("The following packages do not exist in your package set:\x0a" + foldMap2(printPackageError)(v.errors.notInPackageSet))))(function () {
                            return discard1(when1(!Data_Set.isEmpty(v.errors.notInIndex))(die2("The following packages do not exist in the package index:\x0a" + foldMap2(printPackageError)(v.errors.notInIndex))))(function () {
                                return pure(v.packages);
                            });
                        });
                    });
                });
            });
        });
    };
};
var getTransitiveDepsFromRegistry = function (depsRanges) {
    return function (extraPackages) {
        return bind(ask)(function (v) {
            var loader = function (packageName) {
                var v1 = lookup(packageName)(extraPackages);
                if (v1 instanceof Data_Maybe.Just) {
                    return map2((function () {
                        var $325 = Data_Map_Internal.singleton(getVersionFromPackage(v1.value0));
                        var $326 = Data_Maybe.fromMaybe(Data_Map_Internal.empty);
                        return function ($327) {
                            return $325($326($327));
                        };
                    })())(getPackageDependencies(packageName)(v1.value0));
                };
                if (v1 instanceof Data_Maybe.Nothing) {
                    return bind(runSpago({
                        logOptions: v.logOptions
                    })(v.getMetadata(packageName)))(function (maybeMetadata) {
                        var versions = (function () {
                            if (maybeMetadata instanceof Data_Either.Right) {
                                return fromFoldable(Data_Map.keys(maybeMetadata.value0.published));
                            };
                            if (maybeMetadata instanceof Data_Either.Left) {
                                return [  ];
                            };
                            throw new Error("Failed pattern match at Spago.Command.Fetch (line 315, column 24 - line 317, column 30): " + [ maybeMetadata.constructor.name ]);
                        })();
                        return map2(fromFoldable1)(for1(versions)(function (v2) {
                            return bind(runSpago({
                                logOptions: v.logOptions
                            })(v.getManifestFromIndex(packageName)(v2)))(function (maybeManifest) {
                                var deps = Data_Maybe.fromMaybe(Data_Map_Internal.empty)(map(function ($328) {
                                    return (function (v3) {
                                        return v3.dependencies;
                                    })(unwrap($328));
                                })(maybeManifest));
                                return pure(new Data_Tuple.Tuple(v2, deps));
                            });
                        }));
                    });
                };
                throw new Error("Failed pattern match at Spago.Command.Fetch (line 310, column 7 - line 321, column 32): " + [ v1.constructor.name ]);
            };
            return bind(loadAndSolve(loader)(depsRanges))(function (maybePlan) {
                if (maybePlan instanceof Data_Either.Left) {
                    return die3([ toDoc("Could not solve the package dependencies, errors:"), Dodo.indent(toDoc1(fromFoldable2(map3(Registry_Solver.printSolverError)(maybePlan.value0)))) ]);
                };
                if (maybePlan instanceof Data_Either.Right) {
                    return pure(maybePlan.value0);
                };
                throw new Error("Failed pattern match at Spago.Command.Fetch (line 323, column 3 - line 329, column 21): " + [ maybePlan.constructor.name ]);
            });
        });
    };
};
var getTransitiveDeps = function (v) {
    var depsRanges = map1(Data_Maybe.fromMaybe(Spago_Core_Config.widestRange))(v);
    return bind(ask)(function (v1) {
        if (v1.workspace.packageSet instanceof Spago_Config.Registry) {
            return bind(getTransitiveDepsFromRegistry(depsRanges)(v1.workspace.packageSet.value0))(function (plan) {
                return discard1(logDebug("Got a plan from the Solver: " + Spago_Json.printJson(Registry_Internal_Codec.packageMap(Registry_Version.codec))(plan)))(function () {
                    return pure(map1(Spago_Config.RegistryVersion.create)(plan));
                });
            });
        };
        if (v1.workspace.packageSet instanceof Spago_Config.PackageSet) {
            return getTransitiveDepsFromPackageSet(v1.workspace.packageSet.value0)(fromFoldable(Data_Map.keys(depsRanges)));
        };
        throw new Error("Failed pattern match at Spago.Command.Fetch (line 296, column 3 - line 301, column 101): " + [ v1.workspace.packageSet.constructor.name ]);
    });
};
var run = function (v) {
    return discard1(logDebug("Requested to install these packages: " + Spago_Json.printJson(Data_Codec_Argonaut.array(Registry_PackageName.codec))(v.packages)))(function () {
        return bind(ask)(function (v1) {
            var deps = (function () {
                if (v1.workspace.selected instanceof Data_Maybe.Just) {
                    return getWorkspacePackageDeps(v1.workspace.selected.value0);
                };
                if (v1.workspace.selected instanceof Data_Maybe.Nothing) {
                    return foldMap3(getWorkspacePackageDeps)(Spago_Config.getWorkspacePackages(v1.workspace.packageSet));
                };
                throw new Error("Failed pattern match at Spago.Command.Fetch (line 70, column 12 - line 74, column 91): " + [ v1.workspace.selected.constructor.name ]);
            })();
            return bind(getTransitiveDeps(append(deps)(fromFoldable3(map4(function (v2) {
                return new Data_Tuple.Tuple(v2, Data_Maybe.Nothing.value);
            })(v.packages)))))(function (transitivePackages) {
                var v2 = (function () {
                    if (v1.workspace.selected instanceof Data_Maybe.Nothing) {
                        return {
                            configPath: "spago.yaml",
                            yamlDoc: v1.workspace.doc
                        };
                    };
                    if (v1.workspace.selected instanceof Data_Maybe.Just) {
                        return {
                            configPath: Node_Path.concat([ v1.workspace.selected.value0.path, "spago.yaml" ]),
                            yamlDoc: v1.workspace.selected.value0.doc
                        };
                    };
                    throw new Error("Failed pattern match at Spago.Command.Fetch (line 83, column 31 - line 85, column 93): " + [ v1.workspace.selected.constructor.name ]);
                })();
                return discard1(unless(Data_Array["null"](v.packages))(discard1(logInfo("Adding " + (show(Data_Array.length(v.packages)) + (" packages to the config in " + v2.configPath))))(function () {
                    return discard1(liftEffect(Spago_Config.addPackagesToConfig(v2.yamlDoc)(v.packages)))(function () {
                        return liftAff(Spago_FS.writeYamlDocFile(v2.configPath)(v2.yamlDoc));
                    });
                })))(function () {
                    return discard1(when1(v.ensureRanges)(discard1(logInfo("Adding ranges to dependencies to the config in " + v2.configPath))(function () {
                        var rangeMap = map1(getRangeFromPackage)(transitivePackages);
                        return discard1(liftEffect(Spago_Config.addRangesToConfig(v2.yamlDoc)(rangeMap)))(function () {
                            return liftAff(Spago_FS.writeYamlDocFile(v2.configPath)(v2.yamlDoc));
                        });
                    })))(function () {
                        return bind((function () {
                            var fromWorkspacePackage = function (v3) {
                                var test_dependencies = foldMap4(function (v4) {
                                    return v4.dependencies;
                                })(v3["package"].test);
                                return new Data_Tuple.Tuple(v3["package"].name, {
                                    path: v3.path,
                                    dependencies: v3["package"].dependencies,
                                    test_dependencies: test_dependencies
                                });
                            };
                            var lockfileWorkspace = {
                                package_set: v1.workspace.originalConfig.package_set,
                                packages: fromFoldable3(map4(fromWorkspacePackage)(Spago_Config.getWorkspacePackages(v1.workspace.packageSet))),
                                extra_packages: Data_Maybe.fromMaybe(Data_Map_Internal.empty)(v1.workspace.originalConfig.extra_packages)
                            };
                            return bind(map2(catMaybes)(forWithIndex(transitivePackages)(function (packageName) {
                                return function ($$package) {
                                    return bind(map2((function () {
                                        var $329 = Data_Maybe.fromMaybe(Data_Map_Internal.empty);
                                        return function ($330) {
                                            return fromFoldable(Data_Map.keys($329($330)));
                                        };
                                    })())(getPackageDependencies(packageName)($$package)))(function (v3) {
                                        if ($$package instanceof Spago_Config.GitPackage) {
                                            var packageLocation = Spago_Config.getPackageLocation(packageName)($$package);
                                            return bind(Spago_Git.getRef(new Data_Maybe.Just(packageLocation)))(function (v4) {
                                                if (v4 instanceof Data_Either.Left) {
                                                    return die4(v4.value0);
                                                };
                                                if (v4 instanceof Data_Either.Right) {
                                                    return pure(new Data_Maybe.Just(new Spago_Lock.FromGit({
                                                        rev: v4.value0,
                                                        dependencies: v3,
                                                        url: $$package.value0.git,
                                                        subdir: $$package.value0.subdir
                                                    })));
                                                };
                                                throw new Error("Failed pattern match at Spago.Command.Fetch (line 127, column 51 - line 129, column 140): " + [ v4.constructor.name ]);
                                            });
                                        };
                                        if ($$package instanceof Spago_Config.RegistryVersion) {
                                            return bind(runSpago({
                                                logOptions: v1.logOptions
                                            })(v1.getMetadata(packageName)))(function (metadata) {
                                                return bind((function () {
                                                    var v4 = bind2(metadata)(function (v5) {
                                                        return Data_Either.note("Didn't find version in the metadata file")(lookup1($$package.value0)(v5.published));
                                                    });
                                                    if (v4 instanceof Data_Either.Left) {
                                                        return die2("Couldn't read metadata, reason:\x0a  " + v4.value0);
                                                    };
                                                    if (v4 instanceof Data_Either.Right) {
                                                        return pure({
                                                            version: $$package.value0,
                                                            integrity: v4.value0.hash,
                                                            dependencies: v3
                                                        });
                                                    };
                                                    throw new Error("Failed pattern match at Spago.Command.Fetch (line 132, column 32 - line 135, column 79): " + [ v4.constructor.name ]);
                                                })())(function (registryVersion) {
                                                    return pure(new Data_Maybe.Just(new Spago_Lock.FromRegistry(registryVersion)));
                                                });
                                            });
                                        };
                                        if ($$package instanceof Spago_Config.LocalPackage) {
                                            return pure(new Data_Maybe.Just(new Spago_Lock.FromPath({
                                                path: $$package.value0.path,
                                                dependencies: v3
                                            })));
                                        };
                                        if ($$package instanceof Spago_Config.WorkspacePackage) {
                                            return pure(Data_Maybe.Nothing.value);
                                        };
                                        throw new Error("Failed pattern match at Spago.Command.Fetch (line 124, column 9 - line 138, column 47): " + [ $$package.constructor.name ]);
                                    });
                                };
                            })))(function (v3) {
                                return pure({
                                    workspace: lockfileWorkspace,
                                    packages: v3
                                });
                            });
                        })())(function (lockfile) {
                            var shouldWriteLockFile = (function () {
                                if (v1.workspace.selected instanceof Data_Maybe.Nothing && v1.workspace.lockfile instanceof Spago_Config.GenerateLockfile) {
                                    return true;
                                };
                                if (v1.workspace.selected instanceof Data_Maybe.Nothing && v1.workspace.lockfile instanceof Spago_Config.UseLockfile) {
                                    return true;
                                };
                                return false;
                            })();
                            return discard1(when1(shouldWriteLockFile)(discard1(logInfo("Writing a new lockfile"))(function () {
                                return liftAff(Spago_FS.writeYamlFile(Spago_Lock.lockfileCodec)("spago.lock")(lockfile));
                            })))(function () {
                                return discard1(logInfo("Downloading dependencies..."))(function () {
                                    return bind(Spago_Command_Repl.supportPackage(v1.workspace.packageSet))(function (supportPackage) {
                                        var transitivePackages$prime = union(transitivePackages)(supportPackage);
                                        return discard1(Spago_Prelude.parallelise(Data_Function.flip(map4)(toUnfoldable(transitivePackages$prime))(function (v3) {
                                            var localPackageLocation = Spago_Config.getPackageLocation(v3.value0)(v3.value1);
                                            return unlessM(exists(localPackageLocation))((function () {
                                                if (v3.value1 instanceof Spago_Config.GitPackage) {
                                                    return getGitPackageInLocalCache(v3.value0)(v3.value1.value0);
                                                };
                                                if (v3.value1 instanceof Spago_Config.RegistryVersion) {
                                                    var versionString = Registry_Version.print(v3.value1.value0);
                                                    var packageVersion = Registry_PackageName.print(v3.value0) + ("@" + versionString);
                                                    return bind(runSpago({
                                                        logOptions: v1.logOptions
                                                    })(v1.getMetadata(v3.value0)))(function (metadata) {
                                                        var v5 = bind2(metadata)(function (v6) {
                                                            return Data_Either.note("Didn't find version in the metadata file")(lookup1(v3.value1.value0)(v6.published));
                                                        });
                                                        if (v5 instanceof Data_Either.Left) {
                                                            return die2("Couldn't read metadata, reason:\x0a  " + v5.value0);
                                                        };
                                                        if (v5 instanceof Data_Either.Right) {
                                                            return discard1(logDebug("Metadata read: " + Spago_Json.printJson(Registry_Metadata.publishedMetadataCodec)(v5.value0)))(function () {
                                                                var globalCachePackagePath = Node_Path.concat([ Spago_Paths.globalCachePath, "packages", Registry_PackageName.print(v3.value0) ]);
                                                                var archivePath = Node_Path.concat([ globalCachePackagePath, versionString + ".tar.gz" ]);
                                                                return discard1(mkdirp(globalCachePackagePath))(function () {
                                                                    return bind(exists(archivePath))(function (tarExists) {
                                                                        var tarInnerFolder = Registry_PackageName.print(v3.value0) + ("-" + Registry_Version.print(v3.value1.value0));
                                                                        return bind(mkTemp)(function (tempDir) {
                                                                            return discard1(mkdirp(tempDir))(function () {
                                                                                return bind((function () {
                                                                                    if (tarExists) {
                                                                                        return discard1(logDebug("Trying to unpack archive to temp folder: " + tempDir))(function () {
                                                                                            return map2(Data_Either.either(Data_Function["const"](false))(Data_Function["const"](true)))(liftEffect(Spago_Tar.extract({
                                                                                                filename: archivePath,
                                                                                                cwd: tempDir
                                                                                            })));
                                                                                        });
                                                                                    };
                                                                                    return pure(false);
                                                                                })())(function (tarIsGood) {
                                                                                    return discard1((function () {
                                                                                        if (tarExists && tarIsGood) {
                                                                                            return pure(Data_Unit.unit);
                                                                                        };
                                                                                        return discard1(logInfo("Fetching package " + packageVersion))(function () {
                                                                                            return bind(liftAff(Affjax_Node.request({
                                                                                                method: new Data_Either.Left(Data_HTTP_Method.GET.value),
                                                                                                url: "https://packages.registry.purescript.org/" + (Registry_PackageName.print(v3.value0) + ("/" + (versionString + ".tar.gz"))),
                                                                                                headers: Affjax.defaultRequest.headers,
                                                                                                content: Affjax.defaultRequest.content,
                                                                                                username: Affjax.defaultRequest.username,
                                                                                                password: Affjax.defaultRequest.password,
                                                                                                withCredentials: Affjax.defaultRequest.withCredentials,
                                                                                                responseFormat: Affjax_ResponseFormat.arrayBuffer,
                                                                                                timeout: Affjax.defaultRequest.timeout
                                                                                            })))(function (response) {
                                                                                                if (response instanceof Data_Either.Left) {
                                                                                                    return die2("Couldn't fetch package " + (packageVersion + (":\x0a  " + Affjax.printError(response.value0))));
                                                                                                };
                                                                                                if (response instanceof Data_Either.Right && notEq(response.value0.status)(200)) {
                                                                                                    return bind(liftEffect(fromArrayBuffer(response.value0.body)))(function (v6) {
                                                                                                        return bind(liftEffect(toString(Node_Encoding.UTF8.value)(v6)))(function (bodyString) {
                                                                                                            return die2("Couldn't fetch package " + (packageVersion + (", status was not ok " + (show1(response.value0.status) + (", got answer:\x0a  " + bodyString)))));
                                                                                                        });
                                                                                                    });
                                                                                                };
                                                                                                if (response instanceof Data_Either.Right) {
                                                                                                    return discard1(logDebug("Got status: " + show1(response.value0.status)))(function () {
                                                                                                        return bind(liftEffect(fromArrayBuffer(response.value0.body)))(function (archiveBuffer) {
                                                                                                            return bind(liftEffect(size(archiveBuffer)))(function (archiveSize) {
                                                                                                                return bind(liftEffect(hashBuffer(archiveBuffer)))(function (archiveSha) {
                                                                                                                    return discard1(unless(Data_Int.toNumber(archiveSize) === v5.value0.bytes)(die2("Archive fetched for " + (packageVersion + (" has a different size (" + (show(archiveSize) + (") than expected (" + (show2(v5.value0.bytes) + ")"))))))))(function () {
                                                                                                                        return discard1(unless(eq1(archiveSha)(v5.value0.hash))(die2("Archive fetched for " + (packageVersion + (" has a different hash (" + (Registry_Sha256.print(archiveSha) + (") than expected (" + (Registry_Sha256.print(v5.value0.hash) + ")"))))))))(function () {
                                                                                                                            return discard1(logDebug("Fetched archive for " + (packageVersion + (", saving it in the global cache: " + archivePath))))(function () {
                                                                                                                                return discard1(writeFile(archivePath)(archiveBuffer))(function () {
                                                                                                                                    return discard1(logDebug("Unpacking archive to temp folder: " + tempDir))(function () {
                                                                                                                                        return bind(liftEffect(Spago_Tar.extract({
                                                                                                                                            filename: archivePath,
                                                                                                                                            cwd: tempDir
                                                                                                                                        })))(function (v6) {
                                                                                                                                            if (v6 instanceof Data_Either.Right) {
                                                                                                                                                return pure(Data_Unit.unit);
                                                                                                                                            };
                                                                                                                                            if (v6 instanceof Data_Either.Left) {
                                                                                                                                                return die1([ "Failed to decode downloaded package " + (packageVersion + ", error:"), show3(v6.value0) ]);
                                                                                                                                            };
                                                                                                                                            throw new Error("Failed pattern match at Spago.Command.Fetch (line 223, column 92 - line 225, column 123): " + [ v6.constructor.name ]);
                                                                                                                                        });
                                                                                                                                    });
                                                                                                                                });
                                                                                                                            });
                                                                                                                        });
                                                                                                                    });
                                                                                                                });
                                                                                                            });
                                                                                                        });
                                                                                                    });
                                                                                                };
                                                                                                throw new Error("Failed pattern match at Spago.Command.Fetch (line 203, column 17 - line 225, column 123): " + [ response.constructor.name ]);
                                                                                            });
                                                                                        });
                                                                                    })())(function () {
                                                                                        return discard1(logDebug("Moving extracted file to local cache:" + localPackageLocation))(function () {
                                                                                            return moveSync({
                                                                                                src: Node_Path.concat([ tempDir, tarInnerFolder ]),
                                                                                                dst: localPackageLocation
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        };
                                                        throw new Error("Failed pattern match at Spago.Command.Fetch (line 170, column 9 - line 227, column 102): " + [ v5.constructor.name ]);
                                                    });
                                                };
                                                if (v3.value1 instanceof Spago_Config.LocalPackage) {
                                                    return pure(Data_Unit.unit);
                                                };
                                                if (v3.value1 instanceof Spago_Config.WorkspacePackage) {
                                                    return pure(Data_Unit.unit);
                                                };
                                                throw new Error("Failed pattern match at Spago.Command.Fetch (line 162, column 46 - line 230, column 38): " + [ v3.value1.constructor.name ]);
                                            })());
                                        })))(function () {
                                            return pure(transitivePackages);
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};
export {
    getWorkspacePackageDeps,
    getTransitiveDeps,
    getTransitiveDepsFromRegistry,
    run
};
