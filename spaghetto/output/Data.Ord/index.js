// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Ring from "../Data.Ring/index.js";
import * as Data_Semiring from "../Data.Semiring/index.js";
import * as Data_Symbol from "../Data.Symbol/index.js";
import * as Record_Unsafe from "../Record.Unsafe/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var eqRec = /* #__PURE__ */ Data_Eq.eqRec();
var notEq = /* #__PURE__ */ Data_Eq.notEq(Data_Ordering.eqOrdering);
var ordVoid = {
    compare: function (v) {
        return function (v1) {
            return Data_Ordering.EQ.value;
        };
    },
    Eq0: function () {
        return Data_Eq.eqVoid;
    }
};
var ordUnit = {
    compare: function (v) {
        return function (v1) {
            return Data_Ordering.EQ.value;
        };
    },
    Eq0: function () {
        return Data_Eq.eqUnit;
    }
};
var ordString = /* #__PURE__ */ (function () {
    return {
        compare: $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
        Eq0: function () {
            return Data_Eq.eqString;
        }
    };
})();
var ordRecordNil = {
    compareRecord: function (v) {
        return function (v1) {
            return function (v2) {
                return Data_Ordering.EQ.value;
            };
        };
    },
    EqRecord0: function () {
        return Data_Eq.eqRowNil;
    }
};
var ordProxy = {
    compare: function (v) {
        return function (v1) {
            return Data_Ordering.EQ.value;
        };
    },
    Eq0: function () {
        return Data_Eq.eqProxy;
    }
};
var ordOrdering = {
    compare: function (v) {
        return function (v1) {
            if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {
                return Data_Ordering.EQ.value;
            };
            if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {
                return Data_Ordering.EQ.value;
            };
            if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {
                return Data_Ordering.EQ.value;
            };
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {
                return Data_Ordering.GT.value;
            };
            if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            throw new Error("Failed pattern match at Data.Ord (line 126, column 1 - line 133, column 20): " + [ v.constructor.name, v1.constructor.name ]);
        };
    },
    Eq0: function () {
        return Data_Ordering.eqOrdering;
    }
};
var ordNumber = /* #__PURE__ */ (function () {
    return {
        compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
        Eq0: function () {
            return Data_Eq.eqNumber;
        }
    };
})();
var ordInt = /* #__PURE__ */ (function () {
    return {
        compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
        Eq0: function () {
            return Data_Eq.eqInt;
        }
    };
})();
var ordChar = /* #__PURE__ */ (function () {
    return {
        compare: $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
        Eq0: function () {
            return Data_Eq.eqChar;
        }
    };
})();
var ordBoolean = /* #__PURE__ */ (function () {
    return {
        compare: $foreign.ordBooleanImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
        Eq0: function () {
            return Data_Eq.eqBoolean;
        }
    };
})();
var compareRecord = function (dict) {
    return dict.compareRecord;
};
var ordRecord = function () {
    return function (dictOrdRecord) {
        var eqRec1 = eqRec(dictOrdRecord.EqRecord0());
        return {
            compare: compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value),
            Eq0: function () {
                return eqRec1;
            }
        };
    };
};
var compare1 = function (dict) {
    return dict.compare1;
};
var compare = function (dict) {
    return dict.compare;
};
var compare2 = /* #__PURE__ */ compare(ordInt);
var comparing = function (dictOrd) {
    var compare3 = compare(dictOrd);
    return function (f) {
        return function (x) {
            return function (y) {
                return compare3(f(x))(f(y));
            };
        };
    };
};
var greaterThan = function (dictOrd) {
    var compare3 = compare(dictOrd);
    return function (a1) {
        return function (a2) {
            var v = compare3(a1)(a2);
            if (v instanceof Data_Ordering.GT) {
                return true;
            };
            return false;
        };
    };
};
var greaterThanOrEq = function (dictOrd) {
    var compare3 = compare(dictOrd);
    return function (a1) {
        return function (a2) {
            var v = compare3(a1)(a2);
            if (v instanceof Data_Ordering.LT) {
                return false;
            };
            return true;
        };
    };
};
var lessThan = function (dictOrd) {
    var compare3 = compare(dictOrd);
    return function (a1) {
        return function (a2) {
            var v = compare3(a1)(a2);
            if (v instanceof Data_Ordering.LT) {
                return true;
            };
            return false;
        };
    };
};
var signum = function (dictOrd) {
    var lessThan1 = lessThan(dictOrd);
    var greaterThan1 = greaterThan(dictOrd);
    return function (dictRing) {
        var Semiring0 = dictRing.Semiring0();
        var zero = Data_Semiring.zero(Semiring0);
        var negate1 = Data_Ring.negate(dictRing);
        var one = Data_Semiring.one(Semiring0);
        return function (x) {
            var $89 = lessThan1(x)(zero);
            if ($89) {
                return negate1(one);
            };
            var $90 = greaterThan1(x)(zero);
            if ($90) {
                return one;
            };
            return x;
        };
    };
};
var lessThanOrEq = function (dictOrd) {
    var compare3 = compare(dictOrd);
    return function (a1) {
        return function (a2) {
            var v = compare3(a1)(a2);
            if (v instanceof Data_Ordering.GT) {
                return false;
            };
            return true;
        };
    };
};
var max = function (dictOrd) {
    var compare3 = compare(dictOrd);
    return function (x) {
        return function (y) {
            var v = compare3(x)(y);
            if (v instanceof Data_Ordering.LT) {
                return y;
            };
            if (v instanceof Data_Ordering.EQ) {
                return x;
            };
            if (v instanceof Data_Ordering.GT) {
                return x;
            };
            throw new Error("Failed pattern match at Data.Ord (line 181, column 3 - line 184, column 12): " + [ v.constructor.name ]);
        };
    };
};
var min = function (dictOrd) {
    var compare3 = compare(dictOrd);
    return function (x) {
        return function (y) {
            var v = compare3(x)(y);
            if (v instanceof Data_Ordering.LT) {
                return x;
            };
            if (v instanceof Data_Ordering.EQ) {
                return x;
            };
            if (v instanceof Data_Ordering.GT) {
                return y;
            };
            throw new Error("Failed pattern match at Data.Ord (line 172, column 3 - line 175, column 12): " + [ v.constructor.name ]);
        };
    };
};
var ordArray = function (dictOrd) {
    var compare3 = compare(dictOrd);
    var eqArray = Data_Eq.eqArray(dictOrd.Eq0());
    return {
        compare: (function () {
            var toDelta = function (x) {
                return function (y) {
                    var v = compare3(x)(y);
                    if (v instanceof Data_Ordering.EQ) {
                        return 0;
                    };
                    if (v instanceof Data_Ordering.LT) {
                        return 1;
                    };
                    if (v instanceof Data_Ordering.GT) {
                        return -1 | 0;
                    };
                    throw new Error("Failed pattern match at Data.Ord (line 79, column 7 - line 82, column 17): " + [ v.constructor.name ]);
                };
            };
            return function (xs) {
                return function (ys) {
                    return compare2(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
                };
            };
        })(),
        Eq0: function () {
            return eqArray;
        }
    };
};
var ord1Array = {
    compare1: function (dictOrd) {
        return compare(ordArray(dictOrd));
    },
    Eq10: function () {
        return Data_Eq.eq1Array;
    }
};
var ordRecordCons = function (dictOrdRecord) {
    var compareRecord1 = compareRecord(dictOrdRecord);
    var eqRowCons = Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())();
    return function () {
        return function (dictIsSymbol) {
            var reflectSymbol = Data_Symbol.reflectSymbol(dictIsSymbol);
            var eqRowCons1 = eqRowCons(dictIsSymbol);
            return function (dictOrd) {
                var compare3 = compare(dictOrd);
                var eqRowCons2 = eqRowCons1(dictOrd.Eq0());
                return {
                    compareRecord: function (v) {
                        return function (ra) {
                            return function (rb) {
                                var key = reflectSymbol(Type_Proxy["Proxy"].value);
                                var left = compare3(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                                var $95 = notEq(left)(Data_Ordering.EQ.value);
                                if ($95) {
                                    return left;
                                };
                                return compareRecord1(Type_Proxy["Proxy"].value)(ra)(rb);
                            };
                        };
                    },
                    EqRecord0: function () {
                        return eqRowCons2;
                    }
                };
            };
        };
    };
};
var clamp = function (dictOrd) {
    var min1 = min(dictOrd);
    var max1 = max(dictOrd);
    return function (low) {
        return function (hi) {
            return function (x) {
                return min1(hi)(max1(low)(x));
            };
        };
    };
};
var between = function (dictOrd) {
    var lessThan1 = lessThan(dictOrd);
    var greaterThan1 = greaterThan(dictOrd);
    return function (low) {
        return function (hi) {
            return function (x) {
                if (lessThan1(x)(low)) {
                    return false;
                };
                if (greaterThan1(x)(hi)) {
                    return false;
                };
                return true;
            };
        };
    };
};
var abs = function (dictOrd) {
    var greaterThanOrEq1 = greaterThanOrEq(dictOrd);
    return function (dictRing) {
        var zero = Data_Semiring.zero(dictRing.Semiring0());
        var negate1 = Data_Ring.negate(dictRing);
        return function (x) {
            var $99 = greaterThanOrEq1(x)(zero);
            if ($99) {
                return x;
            };
            return negate1(x);
        };
    };
};
export {
    compare,
    compare1,
    lessThan,
    lessThanOrEq,
    greaterThan,
    greaterThanOrEq,
    comparing,
    min,
    max,
    clamp,
    between,
    abs,
    signum,
    compareRecord,
    ordBoolean,
    ordInt,
    ordNumber,
    ordString,
    ordChar,
    ordUnit,
    ordVoid,
    ordProxy,
    ordArray,
    ordOrdering,
    ord1Array,
    ordRecordNil,
    ordRecordCons,
    ordRecord
};
export {
    EQ,
    GT,
    LT
} from "../Data.Ordering/index.js";
//# sourceMappingURL=index.js.map
