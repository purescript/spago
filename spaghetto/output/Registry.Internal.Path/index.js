// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Except_Trans from "../Control.Monad.Except.Trans/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_NonEmpty from "../Data.Array.NonEmpty/index.js";
import * as Data_Bifunctor from "../Data.Bifunctor/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_String_CodePoints from "../Data.String.CodePoints/index.js";
import * as Data_String_Regex from "../Data.String.Regex/index.js";
import * as Data_String_Regex_Flags from "../Data.String.Regex.Flags/index.js";
import * as Data_String_Regex_Unsafe from "../Data.String.Regex.Unsafe/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Node_FS_Aff from "../Node.FS.Aff/index.js";
import * as Node_FS_Stats from "../Node.FS.Stats/index.js";
import * as Node_Path from "../Node.Path/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(/* #__PURE__ */ Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff));
var map = /* #__PURE__ */ Data_Functor.map(Effect_Aff.functorAff);
var lmap = /* #__PURE__ */ Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither);
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect_Aff.applicativeAff);
var bind1 = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var foldMap = /* #__PURE__ */ Data_Array.foldMap(/* #__PURE__ */ Effect_Aff.monoidAff(Data_Monoid.monoidArray));
var sanitizePath = function (dictMonadAff) {
    var liftAff = Effect_Aff_Class.liftAff(dictMonadAff);
    return function (baseDirectory) {
        return function (path) {
            return liftAff(Control_Monad_Except_Trans.runExceptT(bind(map(lmap(function (v) {
                return "sanitizePath provided with a base directory that does not exist: " + baseDirectory;
            }))(Effect_Aff.attempt(Node_FS_Aff.realpath(baseDirectory))))(function (absoluteRoot) {
                return bind(map(lmap(function (v) {
                    return "sanitizePath provided with a path that does not exist: " + path;
                }))(Effect_Aff.attempt(Node_FS_Aff.realpath(Node_Path.concat([ absoluteRoot, path ])))))(function (absolutePath) {
                    return pure((function () {
                        var v = Data_String_CodePoints.indexOf(absoluteRoot)(absolutePath);
                        if (v instanceof Data_Maybe.Just && v.value0 === 0) {
                            return new Data_Either.Right(path);
                        };
                        return new Data_Either.Left(path);
                    })());
                });
            })));
        };
    };
};
var pursFileExtensionRegex = /* #__PURE__ */ Data_String_Regex_Unsafe.unsafeRegex("\\.purs$")(Data_String_Regex_Flags.noFlags);
var readPursFiles = function (dictMonadAff) {
    var liftAff = Effect_Aff_Class.liftAff(dictMonadAff);
    return function (init) {
        var go = function (depth) {
            return function (root) {
                return bind1(Node_FS_Aff.readdir(root))(foldMap(function (file) {
                    var path = Node_Path.concat([ root, Node_Path.sep, file ]);
                    return bind1(Node_FS_Aff.stat(path))(function (stats) {
                        var $19 = Node_FS_Stats.isDirectory(stats);
                        if ($19) {
                            return go(depth + 1 | 0)(path);
                        };
                        var $20 = Data_String_Regex.test(pursFileExtensionRegex)(path);
                        if ($20) {
                            return pure([ path ]);
                        };
                        return pure([  ]);
                    });
                }));
            };
        };
        return liftAff(bind1(Effect_Aff.attempt(go(0)(init)))(function (result) {
            if (result instanceof Data_Either.Left) {
                return pure(Data_Maybe.Nothing.value);
            };
            if (result instanceof Data_Either.Right) {
                return pure(Data_Array_NonEmpty.fromArray(result.value0));
            };
            throw new Error("Failed pattern match at Registry.Internal.Path (line 43, column 3 - line 45, column 46): " + [ result.constructor.name ]);
        }));
    };
};
export {
    sanitizePath,
    readPursFiles,
    pursFileExtensionRegex
};
//# sourceMappingURL=index.js.map
