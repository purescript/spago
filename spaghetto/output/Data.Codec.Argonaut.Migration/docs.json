{"comments":"Codecs that provide forward migrations.\n\nIn a forward migration, the decoder migrates to the new format while\ndecoding from JSON and the encoder uses the new format while encoding to\nJSON.\n\nIf you need more control over a forward migration, the `Functor` instance\nallows operating on the underlying `Json` value directly.\n\nIf you need both forward and backward migrations, the `Profunctor` instance\nallows operating on the underlying `Json` value directly in both\ndirections.\n\nSometimes even greater control over migration is required, and new error\nstates need to be introduced. In this situation a `JsonCodec` will need to\nbe constructed manually - this should be a last resort though, as building\na codec manually means there is no guarantee that it will roundtrip\nsuccessfully.\n\nMigrations are applied by composing a migration codec to run in advance of\nthe codec proper. Codec composition is performed with the `(<~<)` and\n`(>~>)` operators from `Data.Codec`.\n\nAn example of a codec with a migration applied:\n\n``` purescript\nimport Data.Codec ((>~>))\nimport Data.Codec.Argonaut as CA\nimport Data.Codec.Argonaut.Migration as CAM\nimport Data.Codec.Argonaut.Record as CAR\n\ntype MyModel = { key ∷ String, value ∷ Int }\n\ncodec ∷ CA.JsonCodec MyModel\ncodec =\n  CAM.renameField \"tag\" \"key\" >~>\n    CA.object \"MyModel\" (CAR.record\n     { key: CA.string\n     , value: CA.int\n     })\n```\n\nHere we're using the `renameField` migration to rename a property of our\nJSON object from `\"tag\"` to `\"key\"`, and then in the codec proper we only\nneed to deal with `\"key\"`.\n\nMultiple migrations can be chained together using the codec composition\noperators.\n","declarations":[{"children":[],"comments":"When dealing with a JSON object that may be missing a field, this codec\ncan be used to alter the JSON before parsing to ensure a default value is\npresent instead.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[70,53],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut/Migration.purs","start":[70,1]},"title":"addDefaultField"},{"children":[],"comments":"Re-maps the value of a field in a JSON object.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[74,60],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut/Migration.purs","start":[74,1]},"title":"updateField"},{"children":[],"comments":"When dealing with a JSON object that may be missing a field, this codec\ncan be used to alter the JSON before parsing to ensure a default value is\npresent instead. Similar to `addDefaultField`, but allows existing values\nto be modified also.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[81,78],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut/Migration.purs","start":[81,1]},"title":"addDefaultOrUpdateField"},{"children":[],"comments":"When dealing with a JSON object that has had a field name changed, this\ncodec can be used to alter the JSON before parsing to ensure the new field\nname is used instead\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[87,49],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut/Migration.purs","start":[87,1]},"title":"renameField"},{"children":[],"comments":"Prepares an object from a legacy codec for use in a `Variant` or\n`taggedSum` codec.\n\nFor an input like:\n```{ \"tag\": \"tag\", \"x\": 1, \"y\": 2, \"z\": 3 }```\nthe result will be:\n```{ \"tag\": \"tag\", \"value\": { \"x\": 1, \"y\": 2, \"z\": 3 } }```\n\nFor an input like:\n```{ \"tag\": \"tag\", \"value\": 1, \"foo\": 2 }```\nthe result will be:\n```{ \"tag\": \"tag\", \"value\": { \"value\": 1, \"foo\": 2 }```\n\nIf the value is already in the expected form, where there is only `value`\nand no other keys (aside from `tag`):\n```{ \"tag\": \"tag\", \"value\": true }```\nthe result will be the same as the input.\n\nIf the tag field is missing from the input, it will also be missing in the\noutput.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[116,33],"name":".spago/packages/codec-argonaut-10.0.0/src/Data/Codec/Argonaut/Migration.purs","start":[116,1]},"title":"nestForTagged"}],"name":"Data.Codec.Argonaut.Migration","reExports":[]}