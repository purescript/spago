// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_NonEmpty from "../Data.Array.NonEmpty/index.js";
import * as Data_Array_NonEmpty_Internal from "../Data.Array.NonEmpty.Internal/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_DateTime from "../Data.DateTime/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Time_Duration from "../Data.Time.Duration/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Node_Encoding from "../Node.Encoding/index.js";
import * as Node_FS_Aff from "../Node.FS.Aff/index.js";
import * as PureScript_CST from "../PureScript.CST/index.js";
import * as PureScript_CST_Errors from "../PureScript.CST.Errors/index.js";
import * as Registry_Location from "../Registry.Location/index.js";
import * as Registry_Manifest from "../Registry.Manifest/index.js";
import * as Registry_ManifestIndex from "../Registry.ManifestIndex/index.js";
import * as Registry_Metadata from "../Registry.Metadata/index.js";
import * as Registry_PackageName from "../Registry.PackageName/index.js";
import * as Registry_Range from "../Registry.Range/index.js";
import * as Registry_Solver from "../Registry.Solver/index.js";
import * as Registry_Version from "../Registry.Version/index.js";
var eq = /* #__PURE__ */ Data_Eq.eq(Data_Time_Duration.eqHours);
var lookup = /* #__PURE__ */ Data_Map_Internal.lookup(Registry_Version.ordVersion);
var diff = /* #__PURE__ */ Data_DateTime.diff(Data_Time_Duration.durationHours);
var greaterThan = /* #__PURE__ */ Data_Ord.greaterThan(Data_Time_Duration.ordHours);
var un = /* #__PURE__ */ Data_Newtype.un();
var map = /* #__PURE__ */ Data_Functor.map(Data_Map_Internal.functorMap);
var eq1 = /* #__PURE__ */ Data_Eq.eq(Registry_PackageName.eqPackageName);
var eq2 = /* #__PURE__ */ Data_Eq.eq(Registry_Location.eqLocation);
var filter = /* #__PURE__ */ Data_Map_Internal.filter(Registry_PackageName.ordPackageName);
var lookup1 = /* #__PURE__ */ Data_Map_Internal.lookup(Registry_PackageName.ordPackageName);
var toUnfoldable = /* #__PURE__ */ Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray);
var notElem = /* #__PURE__ */ Data_Array.notElem(Data_Eq.eqString);
var bind = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect_Aff.applicativeAff);
var traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray);
var foldMap = /* #__PURE__ */ Data_Array.foldMap(Data_Monoid.monoidString);
var NotPublished = /* #__PURE__ */ (function () {
    function NotPublished() {

    };
    NotPublished.value = new NotPublished();
    return NotPublished;
})();
var AlreadyUnpublished = /* #__PURE__ */ (function () {
    function AlreadyUnpublished() {

    };
    AlreadyUnpublished.value = new AlreadyUnpublished();
    return AlreadyUnpublished;
})();
var InternalError = /* #__PURE__ */ (function () {
    function InternalError() {

    };
    InternalError.value = new InternalError();
    return InternalError;
})();
var PastTimeLimit = /* #__PURE__ */ (function () {
    function PastTimeLimit(value0) {
        this.value0 = value0;
    };
    PastTimeLimit.create = function (value0) {
        return new PastTimeLimit(value0);
    };
    return PastTimeLimit;
})();
var ExceedsMaximum = /* #__PURE__ */ (function () {
    function ExceedsMaximum(value0) {
        this.value0 = value0;
    };
    ExceedsMaximum.create = function (value0) {
        return new ExceedsMaximum(value0);
    };
    return ExceedsMaximum;
})();
var WarnPackageSize = /* #__PURE__ */ (function () {
    function WarnPackageSize(value0) {
        this.value0 = value0;
    };
    WarnPackageSize.create = function (value0) {
        return new WarnPackageSize(value0);
    };
    return WarnPackageSize;
})();
var eqUnpublishError = {
    eq: function (x) {
        return function (y) {
            if (x instanceof NotPublished && y instanceof NotPublished) {
                return true;
            };
            if (x instanceof AlreadyUnpublished && y instanceof AlreadyUnpublished) {
                return true;
            };
            if (x instanceof InternalError && y instanceof InternalError) {
                return true;
            };
            if (x instanceof PastTimeLimit && y instanceof PastTimeLimit) {
                return eq(x.value0.difference)(y.value0.difference) && eq(x.value0.limit)(y.value0.limit);
            };
            return false;
        };
    }
};
var validateUnpublish = function (now) {
    return function (version) {
        return function (v) {
            var inUnpublished = lookup(version)(v.unpublished);
            var inPublished = lookup(version)(v.published);
            if (inPublished instanceof Data_Maybe.Nothing && inUnpublished instanceof Data_Maybe.Nothing) {
                return new Data_Either.Left(NotPublished.value);
            };
            if (inPublished instanceof Data_Maybe.Just && inUnpublished instanceof Data_Maybe.Nothing) {
                var diff1 = diff(now)(inPublished.value0.publishedTime);
                var $65 = greaterThan(diff1)(48.0);
                if ($65) {
                    return new Data_Either.Left(new PastTimeLimit({
                        limit: 48.0,
                        difference: diff1
                    }));
                };
                return new Data_Either.Right(inPublished.value0);
            };
            if (inPublished instanceof Data_Maybe.Nothing && inUnpublished instanceof Data_Maybe.Just) {
                return new Data_Either.Left(AlreadyUnpublished.value);
            };
            if (inPublished instanceof Data_Maybe.Just && inUnpublished instanceof Data_Maybe.Just) {
                return new Data_Either.Left(InternalError.value);
            };
            throw new Error("Failed pattern match at Registry.Operation.Validation (line 138, column 3 - line 152, column 25): " + [ inPublished.constructor.name, inUnpublished.constructor.name ]);
        };
    };
};
var validateTarballSize = function (size) {
    var $70 = size > 2000000.0;
    if ($70) {
        return new Data_Maybe.Just(new ExceedsMaximum(2000000.0));
    };
    var $71 = size > 200000.0;
    if ($71) {
        return new Data_Maybe.Just(new WarnPackageSize(200000.0));
    };
    return Data_Maybe.Nothing.value;
};
var validateDependenciesSolve = function (manifest) {
    return function (manifestIndex) {
        var getDependencies = (function () {
            var $117 = un(Registry_Manifest.Manifest);
            return function ($118) {
                return (function (v) {
                    return v.dependencies;
                })($117($118));
            };
        })();
        return Registry_Solver.solve(map(map(getDependencies))(Registry_ManifestIndex.toMap(manifestIndex)))(getDependencies(manifest));
    };
};
var nameMatches = function (v) {
    return function (v1) {
        return eq1(v.name)(v1.name);
    };
};
var locationMatches = function (v) {
    return function (v1) {
        return eq2(v.location)(v1.location);
    };
};
var locationIsUnique = function (location) {
    var $119 = filter((function () {
        var $121 = eq2(location);
        var $122 = un(Registry_Metadata.Metadata);
        return function ($123) {
            return $121((function (v) {
                return v.location;
            })($122($123)));
        };
    })());
    return function ($120) {
        return Data_Map_Internal.isEmpty($119($120));
    };
};
var isNotUnpublished = function (v) {
    return function (v1) {
        return lookup(v.version)(v1.unpublished);
    };
};
var isNotPublished = function (v) {
    return function (v1) {
        return lookup(v.version)(v1.published);
    };
};
var isMetadataPackage = function (v) {
    return Registry_PackageName.print(v.name) === "metadata";
};
var getUnresolvedDependencies = function (v) {
    return function (resolutions) {
        var dependencyUnresolved = function (dependencyName) {
            return function (dependencyRange) {
                var v1 = lookup1(dependencyName)(resolutions);
                if (v1 instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just(new Data_Either.Left(new Data_Tuple.Tuple(dependencyName, dependencyRange)));
                };
                if (v1 instanceof Data_Maybe.Just) {
                    if (!Registry_Range.includes(dependencyRange)(v1.value0)) {
                        return new Data_Maybe.Just(new Data_Either.Right(new Data_Tuple.Tuple(dependencyName, new Data_Tuple.Tuple(dependencyRange, v1.value0))));
                    };
                    if (Data_Boolean.otherwise) {
                        return Data_Maybe.Nothing.value;
                    };
                };
                throw new Error("Failed pattern match at Registry.Operation.Validation (line 86, column 5 - line 94, column 31): " + [ v1.constructor.name ]);
            };
        };
        return Data_Array.mapMaybe(Data_Tuple.uncurry(dependencyUnresolved))(toUnfoldable(v.dependencies));
    };
};
var forbiddenModules = [ "Main", "Test.Main" ];
var validatePursModule = function (moduleString) {
    var verifyHeader = function (v) {
        var $93 = notElem(v.name.name)(forbiddenModules);
        if ($93) {
            return new Data_Either.Right(Data_Unit.unit);
        };
        return new Data_Either.Left("Module name is " + (v.name.name + (" but PureScript libraries cannot publish modules named: " + Data_String_Common.joinWith(", ")(forbiddenModules))));
    };
    var v = PureScript_CST.parsePartialModule(moduleString);
    if (v instanceof PureScript_CST.ParseFailed) {
        return new Data_Either.Left("Failed to parse PureScript module: " + PureScript_CST_Errors.printParseError(v.value0.error));
    };
    if (v instanceof PureScript_CST.ParseSucceededWithErrors) {
        return verifyHeader(v.value0.header);
    };
    if (v instanceof PureScript_CST.ParseSucceeded) {
        return verifyHeader(v.value0.header);
    };
    throw new Error("Failed pattern match at Registry.Operation.Validation (line 192, column 35 - line 198, column 24): " + [ v.constructor.name ]);
};
var validatePursModules = function (dictMonadAff) {
    var liftAff = Effect_Aff_Class.liftAff(dictMonadAff);
    var Monad0 = (dictMonadAff.MonadEffect0()).Monad0();
    var bind1 = Control_Bind.bind(Monad0.Bind1());
    var Applicative0 = Monad0.Applicative0();
    var traverse1 = traverse(Applicative0);
    var pure1 = Control_Applicative.pure(Applicative0);
    return function (files) {
        var convertErrors = (function () {
            var $124 = Data_Array.concatMap(function (v) {
                if (v.value1 instanceof Data_Either.Left) {
                    return [ new Data_Tuple.Tuple(v.value0, v.value1.value0) ];
                };
                if (v.value1 instanceof Data_Either.Right) {
                    return [  ];
                };
                throw new Error("Failed pattern match at Registry.Operation.Validation (line 170, column 53 - line 172, column 30): " + [ v.constructor.name ]);
            });
            return function ($125) {
                return $124(Data_Array_NonEmpty.toArray($125));
            };
        })();
        var acceptedPursModule = function (path) {
            return liftAff(bind(Effect_Aff.attempt(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(path)))(function (eitherModule) {
                return pure(new Data_Tuple.Tuple(path, (function () {
                    if (eitherModule instanceof Data_Either.Left) {
                        return new Data_Either.Left("Could not read PureScript module from disk at path " + (path + (": " + Effect_Exception.message(eitherModule.value0))));
                    };
                    if (eitherModule instanceof Data_Either.Right) {
                        return validatePursModule(eitherModule.value0);
                    };
                    throw new Error("Failed pattern match at Registry.Operation.Validation (line 165, column 27 - line 167, column 62): " + [ eitherModule.constructor.name ]);
                })()));
            }));
        };
        return bind1(traverse1(acceptedPursModule)(files))(function (results) {
            var v = convertErrors(results);
            if (v.length === 0) {
                return pure1(new Data_Either.Right(Data_Unit.unit));
            };
            return pure1(new Data_Either.Left(foldMap(function (v1) {
                return "\x0a  - " + (v1.value0 + (": " + v1.value1));
            })(v)));
        });
    };
};
export {
    nameMatches,
    locationMatches,
    isMetadataPackage,
    isNotPublished,
    isNotUnpublished,
    validateDependenciesSolve,
    getUnresolvedDependencies,
    ExceedsMaximum,
    WarnPackageSize,
    validateTarballSize,
    locationIsUnique,
    NotPublished,
    AlreadyUnpublished,
    InternalError,
    PastTimeLimit,
    validateUnpublish,
    validatePursModules,
    forbiddenModules,
    validatePursModule,
    eqUnpublishError
};
//# sourceMappingURL=index.js.map
