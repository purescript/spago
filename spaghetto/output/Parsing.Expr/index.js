// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_Combinators from "../Parsing.Combinators/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT);
var pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);
var alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);
var foldr = /* #__PURE__ */ Data_Foldable.foldr(Data_Foldable.foldableArray);
var choice = /* #__PURE__ */ Parsing_Combinators.choice(Data_List_Types.foldableList);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var foldl = /* #__PURE__ */ Data_Foldable.foldl(Data_Foldable.foldableArray);
var AssocNone = /* #__PURE__ */ (function () {
    function AssocNone() {

    };
    AssocNone.value = new AssocNone();
    return AssocNone;
})();
var AssocLeft = /* #__PURE__ */ (function () {
    function AssocLeft() {

    };
    AssocLeft.value = new AssocLeft();
    return AssocLeft;
})();
var AssocRight = /* #__PURE__ */ (function () {
    function AssocRight() {

    };
    AssocRight.value = new AssocRight();
    return AssocRight;
})();
var Infix = /* #__PURE__ */ (function () {
    function Infix(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Infix.create = function (value0) {
        return function (value1) {
            return new Infix(value0, value1);
        };
    };
    return Infix;
})();
var Prefix = /* #__PURE__ */ (function () {
    function Prefix(value0) {
        this.value0 = value0;
    };
    Prefix.create = function (value0) {
        return new Prefix(value0);
    };
    return Prefix;
})();
var Postfix = /* #__PURE__ */ (function () {
    function Postfix(value0) {
        this.value0 = value0;
    };
    Postfix.create = function (value0) {
        return new Postfix(value0);
    };
    return Postfix;
})();
var termP = function (prefixP) {
    return function (term) {
        return function (postfixP) {
            return bind(prefixP)(function (pre) {
                return bind(term)(function (x) {
                    return bind(postfixP)(function (post) {
                        return pure(post(pre(x)));
                    });
                });
            });
        };
    };
};
var splitOp = function (v) {
    return function (v1) {
        if (v instanceof Infix && v.value1 instanceof AssocNone) {
            return {
                rassoc: v1.rassoc,
                lassoc: v1.lassoc,
                nassoc: new Data_List_Types.Cons(v.value0, v1.nassoc),
                prefix: v1.prefix,
                postfix: v1.postfix
            };
        };
        if (v instanceof Infix && v.value1 instanceof AssocLeft) {
            return {
                rassoc: v1.rassoc,
                lassoc: new Data_List_Types.Cons(v.value0, v1.lassoc),
                nassoc: v1.nassoc,
                prefix: v1.prefix,
                postfix: v1.postfix
            };
        };
        if (v instanceof Infix && v.value1 instanceof AssocRight) {
            return {
                rassoc: new Data_List_Types.Cons(v.value0, v1.rassoc),
                lassoc: v1.lassoc,
                nassoc: v1.nassoc,
                prefix: v1.prefix,
                postfix: v1.postfix
            };
        };
        if (v instanceof Prefix) {
            return {
                rassoc: v1.rassoc,
                lassoc: v1.lassoc,
                nassoc: v1.nassoc,
                prefix: new Data_List_Types.Cons(v.value0, v1.prefix),
                postfix: v1.postfix
            };
        };
        if (v instanceof Postfix) {
            return {
                rassoc: v1.rassoc,
                lassoc: v1.lassoc,
                nassoc: v1.nassoc,
                prefix: v1.prefix,
                postfix: new Data_List_Types.Cons(v.value0, v1.postfix)
            };
        };
        throw new Error("Failed pattern match at Parsing.Expr (line 78, column 1 - line 78, column 80): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var rassocP1 = function (x) {
    return function (rassocOp) {
        return function (prefixP) {
            return function (term) {
                return function (postfixP) {
                    return alt(rassocP(x)(rassocOp)(prefixP)(term)(postfixP))(pure(x));
                };
            };
        };
    };
};
var rassocP = function (x) {
    return function (rassocOp) {
        return function (prefixP) {
            return function (term) {
                return function (postfixP) {
                    return bind(rassocOp)(function (f) {
                        return bind(bind(termP(prefixP)(term)(postfixP))(function (z) {
                            return rassocP1(z)(rassocOp)(prefixP)(term)(postfixP);
                        }))(function (y) {
                            return pure(f(x)(y));
                        });
                    });
                };
            };
        };
    };
};
var nassocP = function (x) {
    return function (nassocOp) {
        return function (prefixP) {
            return function (term) {
                return function (postfixP) {
                    return bind(nassocOp)(function (f) {
                        return bind(termP(prefixP)(term)(postfixP))(function (y) {
                            return pure(f(x)(y));
                        });
                    });
                };
            };
        };
    };
};
var lassocP1 = function (x) {
    return function (lassocOp) {
        return function (prefixP) {
            return function (term) {
                return function (postfixP) {
                    return alt(lassocP(x)(lassocOp)(prefixP)(term)(postfixP))(pure(x));
                };
            };
        };
    };
};
var lassocP = function (x) {
    return function (lassocOp) {
        return function (prefixP) {
            return function (term) {
                return function (postfixP) {
                    return bind(lassocOp)(function (f) {
                        return bind(termP(prefixP)(term)(postfixP))(function (y) {
                            return lassocP1(f(x)(y))(lassocOp)(prefixP)(term)(postfixP);
                        });
                    });
                };
            };
        };
    };
};
var makeParser = function (term) {
    return function (ops) {
        var accum = foldr(splitOp)({
            rassoc: Data_List_Types.Nil.value,
            lassoc: Data_List_Types.Nil.value,
            nassoc: Data_List_Types.Nil.value,
            prefix: Data_List_Types.Nil.value,
            postfix: Data_List_Types.Nil.value
        })(ops);
        var lassocOp = choice(accum.lassoc);
        var nassocOp = choice(accum.nassoc);
        var postfixOp = Parsing_Combinators.withErrorMessage(choice(accum.postfix))("");
        var postfixP = alt(postfixOp)(pure(identity));
        var prefixOp = Parsing_Combinators.withErrorMessage(choice(accum.prefix))("");
        var prefixP = alt(prefixOp)(pure(identity));
        var rassocOp = choice(accum.rassoc);
        return bind(termP(prefixP)(term)(postfixP))(function (x) {
            return alt(rassocP(x)(rassocOp)(prefixP)(term)(postfixP))(alt(lassocP(x)(lassocOp)(prefixP)(term)(postfixP))(alt(nassocP(x)(nassocOp)(prefixP)(term)(postfixP))(Parsing_Combinators.withErrorMessage(pure(x))("operator"))));
        });
    };
};
var buildExprParser = function (operators) {
    return function (simpleExpr) {
        return foldl(makeParser)(simpleExpr)(operators);
    };
};
export {
    AssocNone,
    AssocLeft,
    AssocRight,
    Infix,
    Prefix,
    Postfix,
    buildExprParser
};
//# sourceMappingURL=index.js.map
