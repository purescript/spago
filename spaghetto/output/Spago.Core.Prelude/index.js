// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Control_Monad_Reader from "../Control.Monad.Reader/index.js";
import * as Control_Monad_Reader_Trans from "../Control.Monad.Reader.Trans/index.js";
import * as Control_Monad_State from "../Control.Monad.State/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Bifunctor from "../Data.Bifunctor/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_DateTime_Instant from "../Data.DateTime.Instant/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Filterable from "../Data.Filterable/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Generic_Rep from "../Data.Generic.Rep/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_Map from "../Data.Map/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_Show_Generic from "../Data.Show.Generic/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_TraversableWithIndex from "../Data.TraversableWithIndex/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Tuple_Nested from "../Data.Tuple.Nested/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Exception_Unsafe from "../Effect.Exception.Unsafe/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Node_Buffer from "../Node.Buffer/index.js";
import * as Node_Encoding from "../Node.Encoding/index.js";
import * as Node_Path from "../Node.Path/index.js";
import * as Partial_Unsafe from "../Partial.Unsafe/index.js";
import * as Prelude from "../Prelude/index.js";
import * as Registry_ManifestIndex from "../Registry.ManifestIndex/index.js";
import * as Registry_Types from "../Registry.Types/index.js";
import * as Spago_Json from "../Spago.Json/index.js";
import * as Spago_Log from "../Spago.Log/index.js";
import * as Spago_Yaml from "../Spago.Yaml/index.js";
var Spago = function (x) {
    return x;
};
var newtypeSpago_ = {
    Coercible0: function () {
        return undefined;
    }
};
var monadThrowErrorSpago = /* #__PURE__ */ Control_Monad_Reader_Trans.monadThrowReaderT(Effect_Aff.monadThrowAff);
var monadSpago = /* #__PURE__ */ Control_Monad_Reader_Trans.monadReaderT(Effect_Aff.monadAff);
var monadErrorErrorSpago = /* #__PURE__ */ Control_Monad_Reader_Trans.monadErrorReaderT(Effect_Aff.monadErrorAff);
var monadEffectSpago = /* #__PURE__ */ Control_Monad_Reader_Trans.monadEffectReader(Effect_Aff.monadEffectAff);
var monadAskSpago = /* #__PURE__ */ Control_Monad_Reader_Trans.monadAskReaderT(Effect_Aff.monadAff);
var monadAffSpago = /* #__PURE__ */ Effect_Aff_Class.monadAffReader(Effect_Aff_Class.monadAffAff);
var functorSpago = /* #__PURE__ */ Control_Monad_Reader_Trans.functorReaderT(Effect_Aff.functorAff);
var bindSpago = /* #__PURE__ */ Control_Monad_Reader_Trans.bindReaderT(Effect_Aff.bindAff);
var applySpago = /* #__PURE__ */ Control_Monad_Reader_Trans.applyReaderT(Effect_Aff.applyAff);
var applicativeSpago = /* #__PURE__ */ Control_Monad_Reader_Trans.applicativeReaderT(Effect_Aff.applicativeAff);
var unsafeFromJust = /* #__PURE__ */ Data_Maybe["fromMaybe$prime"](function (v) {
    return Partial_Unsafe.unsafeCrashWith("Unexpected Nothing");
});
var runSpago$prime = function (env) {
    return function (v) {
        return Control_Monad_Reader_Trans.runReaderT(v)(env);
    };
};
var runSpago = function (dictMonadAff) {
    var liftAff = Effect_Aff_Class.liftAff(dictMonadAff);
    return function (env) {
        return function (a) {
            return liftAff(runSpago$prime(env)(a));
        };
    };
};
export {
    Spago,
    unsafeFromJust,
    runSpago,
    newtypeSpago_,
    functorSpago,
    applySpago,
    applicativeSpago,
    bindSpago,
    monadSpago,
    monadEffectSpago,
    monadAffSpago,
    monadThrowErrorSpago,
    monadErrorErrorSpago,
    monadAskSpago
};
export {
    catchError,
    try
} from "../Control.Monad.Error.Class/index.js";
export {
    ask,
    asks
} from "../Control.Monad.Reader/index.js";
export {
    bimap,
    lmap,
    rmap
} from "../Data.Bifunctor/index.js";
export {
    Left,
    Right,
    either,
    hush,
    isLeft,
    isRight
} from "../Data.Either/index.js";
export {
    partition,
    partitionMap
} from "../Data.Filterable/index.js";
export {
    and,
    foldMap,
    foldl,
    for_,
    or
} from "../Data.Foldable/index.js";
export {
    Identity
} from "../Data.Identity/index.js";
export {
    Just,
    Nothing,
    fromMaybe,
    isJust,
    isNothing,
    maybe
} from "../Data.Maybe/index.js";
export {
    unwrap
} from "../Data.Newtype/index.js";
export {
    genericShow
} from "../Data.Show.Generic/index.js";
export {
    for,
    traverse
} from "../Data.Traversable/index.js";
export {
    forWithIndex
} from "../Data.TraversableWithIndex/index.js";
export {
    Tuple,
    fst,
    snd
} from "../Data.Tuple/index.js";
export {
    liftAff
} from "../Effect.Aff.Class/index.js";
export {
    liftEffect
} from "../Effect.Class/index.js";
export {
    unsafeThrow
} from "../Effect.Exception.Unsafe/index.js";
export {
    ASCII,
    Base64,
    Binary,
    Hex,
    Latin1,
    UCS2,
    UTF16LE,
    UTF8
} from "../Node.Encoding/index.js";
export {
    EQ,
    GT,
    LT,
    absurd,
    add,
    ap,
    append,
    apply,
    between,
    bind,
    bottom,
    clamp,
    compare,
    comparing,
    compose,
    conj,
    const,
    degree,
    discard,
    disj,
    div,
    eq,
    flap,
    flip,
    gcd,
    identity,
    ifM,
    join,
    lcm,
    liftA1,
    liftM1,
    map,
    max,
    mempty,
    min,
    mod,
    mul,
    negate,
    not,
    notEq,
    one,
    otherwise,
    pure,
    recip,
    show,
    sub,
    top,
    unit,
    unless,
    unlessM,
    void,
    when,
    whenM,
    zero
} from "../Prelude/index.js";
export {
    Manifest,
    Metadata
} from "../Registry.Types/index.js";
export {
    parseJson,
    printJson
} from "../Spago.Json/index.js";
export {
    OutputJson,
    OutputLines,
    OutputTable,
    die,
    die$prime,
    indent,
    indent2,
    logDebug,
    logError,
    logInfo,
    logSuccess,
    logWarn,
    output,
    toDoc
} from "../Spago.Log/index.js";
export {
    parseYaml,
    printYaml
} from "../Spago.Yaml/index.js";
//# sourceMappingURL=index.js.map
