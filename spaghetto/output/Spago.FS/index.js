// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Data_Bifunctor from "../Data.Bifunctor/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Node_Encoding from "../Node.Encoding/index.js";
import * as Node_FS_Aff from "../Node.FS.Aff/index.js";
import * as Node_FS_Perms from "../Node.FS.Perms/index.js";
import * as Node_FS_Stats from "../Node.FS.Stats/index.js";
import * as Node_FS_Sync from "../Node.FS.Sync/index.js";
import * as Spago_Json from "../Spago.Json/index.js";
import * as Spago_Yaml from "../Spago.Yaml/index.js";
var $$try = /* #__PURE__ */ Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff);
var bind = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect_Aff.applicativeAff);
var bind1 = /* #__PURE__ */ Control_Bind.bind(Data_Either.bindEither);
var lmap = /* #__PURE__ */ Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither);
var try1 = /* #__PURE__ */ Control_Monad_Error_Class["try"](Control_Monad_Error_Class.monadErrorEffect);
var writeYamlFile = function (codec) {
    return function (path) {
        var $46 = Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(path);
        var $47 = Spago_Yaml.printYaml(codec);
        return function ($48) {
            return $46((function (v) {
                return v + "\x0a";
            })(Data_String_Common.trim($47($48))));
        };
    };
};
var writeYamlDocFile = function (path) {
    var $49 = Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(path);
    return function ($50) {
        return $49((function (v) {
            return v + "\x0a";
        })(Data_String_Common.trim(Spago_Yaml.toString($50))));
    };
};
var writeTextFile = function (dictMonadAff) {
    var liftAff = Effect_Aff_Class.liftAff(dictMonadAff);
    return function (path) {
        return function (text) {
            return liftAff(Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(path)(text));
        };
    };
};
var writeJsonFile = function (codec) {
    return function (path) {
        var $51 = Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(path);
        var $52 = Spago_Json.printJson(codec);
        return function ($53) {
            return $51((function (v) {
                return v + "\x0a";
            })($52($53)));
        };
    };
};
var writeFile = function (dictMonadAff) {
    var liftAff = Effect_Aff_Class.liftAff(dictMonadAff);
    return function (path) {
        return function (buf) {
            return liftAff(Node_FS_Aff.writeFile(path)(buf));
        };
    };
};
var stat = function (dictMonadAff) {
    var liftAff = Effect_Aff_Class.liftAff(dictMonadAff);
    return function (path) {
        return liftAff($$try(Node_FS_Aff.stat(path)));
    };
};
var readYamlFile = function (codec) {
    return function (path) {
        return bind(Effect_Aff.attempt(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(path)))(function (result) {
            return pure(bind1(lmap(Effect_Exception.message)(result))((function () {
                var $54 = lmap(Data_Codec_Argonaut.printJsonDecodeError);
                var $55 = Spago_Yaml.parseYaml(codec);
                return function ($56) {
                    return $54($55($56));
                };
            })()));
        });
    };
};
var readYamlDocFile = function (codec) {
    return function (path) {
        return bind(Effect_Aff.attempt(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(path)))(function (result) {
            return pure(bind1(lmap(Effect_Exception.message)(result))((function () {
                var $57 = lmap(Data_Codec_Argonaut.printJsonDecodeError);
                var $58 = Spago_Yaml.parseYamlDoc(codec);
                return function ($59) {
                    return $57($58($59));
                };
            })()));
        });
    };
};
var readTextFile = function (dictMonadAff) {
    var liftAff = Effect_Aff_Class.liftAff(dictMonadAff);
    return function (path) {
        return liftAff(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(path));
    };
};
var readJsonFile = function (codec) {
    return function (path) {
        return bind(Effect_Aff.attempt(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(path)))(function (result) {
            return pure(bind1(lmap(Effect_Exception.message)(result))((function () {
                var $60 = lmap(Data_Codec_Argonaut.printJsonDecodeError);
                var $61 = Spago_Json.parseJson(codec);
                return function ($62) {
                    return $60($61($62));
                };
            })()));
        });
    };
};
var moveSync = function (dictMonadEffect) {
    var liftEffect = Effect_Class.liftEffect(dictMonadEffect);
    return function (v) {
        return liftEffect($foreign.moveSyncImpl(v.src)(v.dst));
    };
};
var mkdirp = function (dictMonadAff) {
    var $63 = Effect_Aff_Class.liftAff(dictMonadAff);
    var $64 = Data_Function.flip(Node_FS_Aff["mkdir$prime"])({
        recursive: true,
        mode: Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all)
    });
    return function ($65) {
        return $63($64($65));
    };
};
var ls = function (dictMonadAff) {
    var $66 = Effect_Aff_Class.liftAff(dictMonadAff);
    return function ($67) {
        return $66(Node_FS_Aff.readdir($67));
    };
};
var isLink = function (dictMonadEffect) {
    var liftEffect = Effect_Class.liftEffect(dictMonadEffect);
    return function (path) {
        return liftEffect(function __do() {
            var v = try1(Node_FS_Sync.lstat(path))();
            if (v instanceof Data_Either.Left) {
                return true;
            };
            if (v instanceof Data_Either.Right) {
                return Node_FS_Stats.isSymbolicLink(v.value0);
            };
            throw new Error("Failed pattern match at Spago.FS (line 100, column 57 - line 102, column 51): " + [ v.constructor.name ]);
        });
    };
};
var getInBetweenPaths = function (dictMonadEffect) {
    var liftEffect = Effect_Class.liftEffect(dictMonadEffect);
    return function (a) {
        return function (b) {
            return liftEffect(function () {
                return $foreign.getInBetweenPathsImpl(a, b);
            });
        };
    };
};
var exists = function (dictMonadEffect) {
    var $68 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($69) {
        return $68(Node_FS_Sync.exists($69));
    };
};
var ensureFileSync = function (dictMonadEffect) {
    var liftEffect = Effect_Class.liftEffect(dictMonadEffect);
    return function (file) {
        return liftEffect($foreign.ensureFileSyncImpl(file));
    };
};
var chmod = function (dictMonadAff) {
    var liftAff = Effect_Aff_Class.liftAff(dictMonadAff);
    return function (path) {
        return function (perms) {
            return liftAff(Node_FS_Aff.chmod(path)(perms));
        };
    };
};
export {
    chmod,
    ensureFileSync,
    exists,
    getInBetweenPaths,
    isLink,
    ls,
    mkdirp,
    moveSync,
    readJsonFile,
    readTextFile,
    readYamlDocFile,
    readYamlFile,
    stat,
    writeFile,
    writeJsonFile,
    writeTextFile,
    writeYamlDocFile,
    writeYamlFile
};
//# sourceMappingURL=index.js.map
