// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Monad_Except_Trans from "../Control.Monad.Except.Trans/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Bifunctor from "../Data.Bifunctor/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Dodo from "../Dodo/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Node_Path from "../Node.Path/index.js";
import * as Node_Process from "../Node.Process/index.js";
import * as Registry_Version from "../Registry.Version/index.js";
import * as Spago_Cmd from "../Spago.Cmd/index.js";
import * as Spago_Core_Prelude from "../Spago.Core.Prelude/index.js";
import * as Spago_FS from "../Spago.FS/index.js";
import * as Spago_Log from "../Spago.Log/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Spago_Core_Prelude.bindSpago);
var ask = /* #__PURE__ */ Control_Monad_Reader_Class.ask(Spago_Core_Prelude.monadAskSpago);
var exec = /* #__PURE__ */ Spago_Cmd.exec(Spago_Core_Prelude.monadAffSpago);
var pure = /* #__PURE__ */ Control_Applicative.pure(Spago_Core_Prelude.applicativeSpago);
var toDoc = /* #__PURE__ */ Spago_Log.toDoc(Spago_Log.loggableString);
var bimap = /* #__PURE__ */ Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither);
var $$void = /* #__PURE__ */ Data_Functor["void"](/* #__PURE__ */ Control_Monad_Except_Trans.functorExceptT(Spago_Core_Prelude.functorSpago));
var loggableArray = /* #__PURE__ */ Spago_Log.loggableArray(Spago_Log.loggableString);
var toDoc1 = /* #__PURE__ */ Spago_Log.toDoc(loggableArray);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Spago_Core_Prelude.monadEffectSpago);
var getInBetweenPaths = /* #__PURE__ */ Spago_FS.getInBetweenPaths(Effect_Class.monadEffectEffect);
var map = /* #__PURE__ */ Data_Functor.map(Spago_Core_Prelude.functorSpago);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableArray)(Spago_Core_Prelude.applicativeSpago);
var isLink = /* #__PURE__ */ Spago_FS.isLink(Spago_Core_Prelude.monadEffectSpago);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var discard1 = /* #__PURE__ */ discard(Spago_Core_Prelude.bindSpago);
var logDebug = /* #__PURE__ */ Spago_Log.logDebug(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var showRecord = /* #__PURE__ */ Data_Show.showRecord()();
var showRecordFieldsCons = /* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "escapedCommand";
    }
});
var showRecordFieldsCons1 = /* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "exitCode";
    }
});
var showRecordFieldsCons2 = /* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "stderr";
    }
});
var stdoutIsSymbol = {
    reflectSymbol: function () {
        return "stdout";
    }
};
var showMaybe = /* #__PURE__ */ Data_Maybe.showMaybe(Data_Show.showString);
var showRecord1 = /* #__PURE__ */ showRecord(/* #__PURE__ */ showRecordFieldsCons(/* #__PURE__ */ showRecordFieldsCons1(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "failed";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "isCanceled";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "killed";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "message";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "originalMessage";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "shortMessage";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "signal";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "signalDescription";
    }
})(/* #__PURE__ */ showRecordFieldsCons2(/* #__PURE__ */ Data_Show.showRecordFieldsCons(stdoutIsSymbol)(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil({
    reflectSymbol: function () {
        return "timedOut";
    }
})(Data_Show.showBoolean))(Data_Show.showString))(Data_Show.showString))(showMaybe))(/* #__PURE__ */ Data_Maybe.showMaybe(/* #__PURE__ */ Data_Either.showEither(Data_Show.showInt)(Data_Show.showString))))(Data_Show.showString))(showMaybe))(Data_Show.showString))(Data_Show.showBoolean))(Data_Show.showBoolean))(Data_Show.showBoolean))(/* #__PURE__ */ Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Show.showString));
var show = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Either.showEither(showRecord1)(/* #__PURE__ */ showRecord(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "command";
    }
})(/* #__PURE__ */ showRecordFieldsCons(/* #__PURE__ */ showRecordFieldsCons1(/* #__PURE__ */ showRecordFieldsCons2(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil(stdoutIsSymbol)(Data_Show.showString))(Data_Show.showString))(Data_Show.showInt))(Data_Show.showString))(Data_Show.showString))));
var show1 = /* #__PURE__ */ Data_Show.show(showRecord1);
var die = /* #__PURE__ */ Spago_Log.die(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(loggableArray);
var toDoc2 = /* #__PURE__ */ Spago_Log.toDoc(/* #__PURE__ */ Spago_Log.loggableArray(Spago_Log.loggableDocc));
var exists = /* #__PURE__ */ Spago_FS.exists(Spago_Core_Prelude.monadEffectSpago);
var logInfo = /* #__PURE__ */ Spago_Log.logInfo(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var bindExceptT = /* #__PURE__ */ Control_Monad_Except_Trans.bindExceptT(Spago_Core_Prelude.monadSpago);
var discard2 = /* #__PURE__ */ discard(bindExceptT);
var bind2 = /* #__PURE__ */ Control_Bind.bind(bindExceptT);
var tagCheckedOut = function (cwd) {
    var opts = {
        pipeStdout: false,
        pipeStderr: false,
        cwd: cwd,
        pipeStdin: Spago_Cmd.defaultExecOptions.pipeStdin
    };
    return bind(ask)(function (v) {
        return bind(exec(v.git.cmd)([ "describe", "--tags" ])(opts))(function (v1) {
            if (v1 instanceof Data_Either.Left) {
                return pure(new Data_Either.Left(toDoc("The git ref currently checked out is not a tag.")));
            };
            if (v1 instanceof Data_Either.Right) {
                return pure(new Data_Either.Right(v1.value0.stdout));
            };
            throw new Error("Failed pattern match at Spago.Git (line 104, column 54 - line 106, column 43): " + [ v1.constructor.name ]);
        });
    });
};
var runGit = function (args) {
    return function (cwd) {
        return bind(ask)(function (v) {
            return bind(exec(v.git.cmd)(args)({
                pipeStdin: Spago_Cmd.defaultExecOptions.pipeStdin,
                pipeStdout: false,
                pipeStderr: false,
                cwd: cwd
            }))(function (result) {
                return pure(bimap(function (v1) {
                    return v1.stderr;
                })(function (v1) {
                    return v1.stdout;
                })(result));
            });
        });
    };
};
var runGit_ = function (args) {
    return function (cwd) {
        return $$void(runGit(args)(cwd));
    };
};
var pushTag = function (cwd) {
    return function (version) {
        var opts = {
            pipeStdout: false,
            pipeStderr: false,
            cwd: cwd,
            pipeStdin: Spago_Cmd.defaultExecOptions.pipeStdin
        };
        return bind(ask)(function (v) {
            return bind(exec(v.git.cmd)([ "push", "origin", "v" + Registry_Version.print(version) ])(opts))(function (v1) {
                if (v1 instanceof Data_Either.Left) {
                    return pure(new Data_Either.Left(toDoc1([ "Could not push the tag 'v" + (Registry_Version.print(version) + "' to the remote."), "Error:", v1.value0.shortMessage ])));
                };
                if (v1 instanceof Data_Either.Right) {
                    return pure(new Data_Either.Right(Data_Unit.unit));
                };
                throw new Error("Failed pattern match at Spago.Git (line 112, column 80 - line 118, column 33): " + [ v1.constructor.name ]);
            });
        });
    };
};
var isIgnored = function (path) {
    return bind(ask)(function (v) {
        return bind(exec(v.git.cmd)([ "check-ignore", "--quiet", path ])({
            pipeStdin: Spago_Cmd.defaultExecOptions.pipeStdin,
            pipeStdout: false,
            pipeStderr: false,
            cwd: Spago_Cmd.defaultExecOptions.cwd
        }))(function (result) {
            if (result instanceof Data_Either.Right && result.value0.exitCode === 0) {
                return pure(true);
            };
            if (result instanceof Data_Either.Left && (result.value0.exitCode instanceof Data_Maybe.Just && result.value0.exitCode.value0 === 128)) {
                return bind(liftEffect(function __do() {
                    var cwd = Node_Process.cwd();
                    var absolutePath = Node_Path.resolve([  ])(path)();
                    return getInBetweenPaths(cwd)(absolutePath)();
                }))(function (paths) {
                    return map(Data_Array.any(identity))(traverse(isLink)(paths));
                });
            };
            if (result instanceof Data_Either.Left && (result.value0.exitCode instanceof Data_Maybe.Just && result.value0.exitCode.value0 === 1)) {
                return pure(false);
            };
            return discard1(logDebug("IsIgnored encountered an interesting exitCode"))(function () {
                return discard1(logDebug(show(result)))(function () {
                    return pure(false);
                });
            });
        });
    });
};
var getRef = function (cwd) {
    var opts = {
        pipeStdout: false,
        pipeStderr: false,
        cwd: cwd,
        pipeStdin: Spago_Cmd.defaultExecOptions.pipeStdin
    };
    return bind(ask)(function (v) {
        return bind(exec(v.git.cmd)([ "rev-parse", "HEAD" ])(opts))(function (v1) {
            if (v1 instanceof Data_Either.Left) {
                return pure(new Data_Either.Left(toDoc1([ "Could not run `git rev-parse HEAD` to determine the current ref. Error:", v1.value0.shortMessage ])));
            };
            if (v1 instanceof Data_Either.Right) {
                return pure(new Data_Either.Right(v1.value0.stdout));
            };
            throw new Error("Failed pattern match at Spago.Git (line 93, column 53 - line 98, column 43): " + [ v1.constructor.name ]);
        });
    });
};
var getGit = /* #__PURE__ */ (function () {
    return bind(exec("git")([ "--version" ])({
        pipeStdin: Spago_Cmd.defaultExecOptions.pipeStdin,
        pipeStdout: false,
        pipeStderr: false,
        cwd: Spago_Cmd.defaultExecOptions.cwd
    }))(function (v) {
        if (v instanceof Data_Either.Right) {
            return pure({
                cmd: "git",
                version: v.value0.stdout
            });
        };
        if (v instanceof Data_Either.Left) {
            return discard1(logDebug(show1(v.value0)))(function () {
                return die([ "Failed to find git. Have you installed it, and is it in your PATH?" ]);
            });
        };
        throw new Error("Failed pattern match at Spago.Git (line 152, column 104 - line 156, column 83): " + [ v.constructor.name ]);
    });
})();
var getCleanTag = function (cwd) {
    var opts = {
        pipeStdout: false,
        pipeStderr: false,
        cwd: cwd,
        pipeStdin: Spago_Cmd.defaultExecOptions.pipeStdin
    };
    return bind(ask)(function (v) {
        return bind(exec(v.git.cmd)([ "status", "--porcelain" ])(opts))(function (v1) {
            if (v1 instanceof Data_Either.Left) {
                return pure(new Data_Either.Left(toDoc1([ "Could not run `git status`. Error:", v1.value0.shortMessage ])));
            };
            if (v1 instanceof Data_Either.Right) {
                if (v1.value0.stdout === "") {
                    return tagCheckedOut(cwd);
                };
                return pure(new Data_Either.Left(toDoc2([ toDoc("Git tree is not clean, aborting. Commit or stash these files:"), Dodo.indent(toDoc1(Data_String_Common.split("\x0a")(v1.value0.stdout))) ])));
            };
            throw new Error("Failed pattern match at Spago.Git (line 74, column 57 - line 87, column 12): " + [ v1.constructor.name ]);
        });
    });
};
var fetchRepo = function (v) {
    return function (path) {
        return bind(exists(path))(function (repoExists) {
            return bind((function () {
                if (repoExists) {
                    return discard1(logDebug("Found " + (v.git + " locally, pulling...")))(function () {
                        return Control_Monad_Except_Trans.runExceptT(runGit_([ "fetch", "origin" ])(new Data_Maybe.Just(path)));
                    });
                };
                if (!repoExists) {
                    return discard1(logInfo("Cloning " + v.git))(function () {
                        return Control_Monad_Except_Trans.runExceptT(runGit_([ "clone", "--filter=tree:0", v.git, path ])(Data_Maybe.Nothing.value));
                    });
                };
                throw new Error("Failed pattern match at Spago.Git (line 42, column 25 - line 50, column 84): " + [ repoExists.constructor.name ]);
            })())(function (cloneOrFetchResult) {
                return bind(Control_Monad_Except_Trans.runExceptT(discard2(pure(cloneOrFetchResult))(function () {
                    return bind2(runGit([ "checkout", v.ref ])(new Data_Maybe.Just(path)))(function () {
                        return Control_Monad_Except_Trans.mapExceptT(function (a) {
                            return bind(a)(function (v1) {
                                if (v1 instanceof Data_Either.Left) {
                                    return pure(new Data_Either.Right(Data_Unit.unit));
                                };
                                if (v1 instanceof Data_Either.Right) {
                                    return Control_Monad_Except_Trans.runExceptT(runGit_([ "pull", "--rebase", "--autostash" ])(new Data_Maybe.Just(path)));
                                };
                                throw new Error("Failed pattern match at Spago.Git (line 57, column 21 - line 59, column 99): " + [ v1.constructor.name ]);
                            });
                        })(runGit_([ "symbolic-ref", "-q", "HEAD" ])(new Data_Maybe.Just(path)));
                    });
                })))(function (result) {
                    if (result instanceof Data_Either.Left) {
                        return die([ "Error while fetching the repo '" + (v.git + ("' at ref '" + (v.ref + "':"))), result.value0 ]);
                    };
                    if (result instanceof Data_Either.Right) {
                        return pure(Data_Unit.unit);
                    };
                    throw new Error("Failed pattern match at Spago.Git (line 63, column 3 - line 68, column 25): " + [ result.constructor.name ]);
                });
            });
        });
    };
};
export {
    fetchRepo,
    getGit,
    getRef,
    getCleanTag,
    pushTag,
    isIgnored,
    tagCheckedOut
};
//# sourceMappingURL=index.js.map
