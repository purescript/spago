// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Node_Path from "../Node.Path/index.js";
import * as Node_Process from "../Node.Process/index.js";
import * as Spago_Cmd from "../Spago.Cmd/index.js";
import * as Spago_FS from "../Spago.FS/index.js";
import * as Spago_Prelude from "../Spago.Prelude/index.js";
import * as Test_Spec_Assertions from "../Test.Spec.Assertions/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
var mkTemp$prime = /* #__PURE__ */ Spago_Prelude["mkTemp$prime"](Effect_Aff_Class.monadAffAff);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff);
var mkdirp = /* #__PURE__ */ Spago_FS.mkdirp(Effect_Aff_Class.monadAffAff);
var exec = /* #__PURE__ */ Spago_Cmd.exec(Effect_Aff_Class.monadAffAff);
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect_Aff.applicativeAff);
var showRecord = /* #__PURE__ */ Data_Show.showRecord()();
var showRecordFieldsCons = /* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "escapedCommand";
    }
});
var showRecordFieldsCons1 = /* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "exitCode";
    }
});
var showRecordFieldsCons2 = /* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "stderr";
    }
});
var stdoutIsSymbol = {
    reflectSymbol: function () {
        return "stdout";
    }
};
var showMaybe = /* #__PURE__ */ Data_Maybe.showMaybe(Data_Show.showString);
var shouldSatisfy = /* #__PURE__ */ Test_Spec_Assertions.shouldSatisfy(Effect_Aff.monadThrowAff)(/* #__PURE__ */ Data_Either.showEither(/* #__PURE__ */ showRecord(/* #__PURE__ */ showRecordFieldsCons(/* #__PURE__ */ showRecordFieldsCons1(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "failed";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "isCanceled";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "killed";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "message";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "originalMessage";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "shortMessage";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "signal";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "signalDescription";
    }
})(/* #__PURE__ */ showRecordFieldsCons2(/* #__PURE__ */ Data_Show.showRecordFieldsCons(stdoutIsSymbol)(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil({
    reflectSymbol: function () {
        return "timedOut";
    }
})(Data_Show.showBoolean))(Data_Show.showString))(Data_Show.showString))(showMaybe))(/* #__PURE__ */ Data_Maybe.showMaybe(/* #__PURE__ */ Data_Either.showEither(Data_Show.showInt)(Data_Show.showString))))(Data_Show.showString))(showMaybe))(Data_Show.showString))(Data_Show.showBoolean))(Data_Show.showBoolean))(Data_Show.showBoolean))(/* #__PURE__ */ Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Show.showString)))(/* #__PURE__ */ showRecord(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "command";
    }
})(/* #__PURE__ */ showRecordFieldsCons(/* #__PURE__ */ showRecordFieldsCons1(/* #__PURE__ */ showRecordFieldsCons2(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil(stdoutIsSymbol)(Data_Show.showString))(Data_Show.showString))(Data_Show.showInt))(Data_Show.showString))(Data_Show.showString))));
var for_ = /* #__PURE__ */ Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe);
var map = /* #__PURE__ */ Data_Functor.map(Effect_Aff.functorAff);
var readTextFile = /* #__PURE__ */ Spago_FS.readTextFile(Effect_Aff_Class.monadAffAff);
var shouldEqual = /* #__PURE__ */ Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showString)(Data_Eq.eqString);
var withTempDir = /* #__PURE__ */ (function () {
    var createTempDir = bind(liftEffect(Node_Process.cwd))(function (oldCwd) {
        return bind(mkTemp$prime(new Data_Maybe.Just("spago-test-")))(function (temp) {
            return discard(mkdirp(temp))(function () {
                return discard(liftEffect(Node_Process.chdir(temp)))(function () {
                    var spago = function (args) {
                        return exec(Node_Path.concat([ oldCwd, "bin", "index.dev.js" ]))(args)({
                            pipeStdin: Spago_Cmd.defaultExecOptions.pipeStdin,
                            pipeStdout: false,
                            pipeStderr: false,
                            cwd: Spago_Cmd.defaultExecOptions.cwd
                        });
                    };
                    var fixturesPath = oldCwd + "/test/fixtures";
                    var fixture = function (path) {
                        return Node_Path.concat([ fixturesPath, path ]);
                    };
                    return pure({
                        spago: spago,
                        oldCwd: oldCwd,
                        testCwd: temp,
                        fixture: fixture
                    });
                });
            });
        });
    });
    var cleanupTempDir = function (v) {
        return liftEffect(Node_Process.chdir(v.oldCwd));
    };
    return Effect_Aff.bracket(createTempDir)(cleanupTempDir);
})();
var checkResultAndOutputs = function (maybeOutFixture) {
    return function (maybeErrFixture) {
        return function (resultFn) {
            return function (execResult) {
                return discard(shouldSatisfy(execResult)(resultFn))(function () {
                    var stdout = Data_String_Common.trim((function () {
                        if (execResult instanceof Data_Either.Left) {
                            return execResult.value0.stdout;
                        };
                        if (execResult instanceof Data_Either.Right) {
                            return execResult.value0.stdout;
                        };
                        throw new Error("Failed pattern match at Test.Prelude (line 67, column 28 - line 69, column 30): " + [ execResult.constructor.name ]);
                    })());
                    var stderr = Data_String_Common.trim((function () {
                        if (execResult instanceof Data_Either.Left) {
                            return execResult.value0.stderr;
                        };
                        if (execResult instanceof Data_Either.Right) {
                            return execResult.value0.stderr;
                        };
                        throw new Error("Failed pattern match at Test.Prelude (line 70, column 28 - line 72, column 30): " + [ execResult.constructor.name ]);
                    })());
                    return discard(for_(maybeOutFixture)(function (expectedOutFixture) {
                        return bind(map(Data_String_Common.trim)(readTextFile(expectedOutFixture)))(function (expectedOut) {
                            return shouldEqual(stdout)(expectedOut);
                        });
                    }))(function () {
                        return for_(maybeErrFixture)(function (expectedErrFixture) {
                            return bind(map(Data_String_Common.trim)(readTextFile(expectedErrFixture)))(function (expectedErr) {
                                return shouldEqual(stderr)(expectedErr);
                            });
                        });
                    });
                });
            };
        };
    };
};
var shouldBeFailure = /* #__PURE__ */ (function () {
    return checkResultAndOutputs(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value)(Data_Either.isLeft);
})();
var shouldBeFailureErr = function (errFixture) {
    return checkResultAndOutputs(Data_Maybe.Nothing.value)(new Data_Maybe.Just(errFixture))(Data_Either.isLeft);
};
var shouldBeFailureOutput = function (outFixture) {
    return checkResultAndOutputs(new Data_Maybe.Just(outFixture))(Data_Maybe.Nothing.value)(Data_Either.isLeft);
};
var shouldBeFailureOutputWithErr = function (outFixture) {
    return function (errFixture) {
        return checkResultAndOutputs(new Data_Maybe.Just(outFixture))(new Data_Maybe.Just(errFixture))(Data_Either.isLeft);
    };
};
var shouldBeSuccess = /* #__PURE__ */ (function () {
    return checkResultAndOutputs(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value)(Data_Either.isRight);
})();
var shouldBeSuccessErr = function (errFixture) {
    return checkResultAndOutputs(Data_Maybe.Nothing.value)(new Data_Maybe.Just(errFixture))(Data_Either.isRight);
};
var shouldBeSuccessOutput = function (outFixture) {
    return checkResultAndOutputs(new Data_Maybe.Just(outFixture))(Data_Maybe.Nothing.value)(Data_Either.isRight);
};
var shouldBeSuccessOutputWithErr = function (outFixture) {
    return function (errFixture) {
        return checkResultAndOutputs(new Data_Maybe.Just(outFixture))(new Data_Maybe.Just(errFixture))(Data_Either.isRight);
    };
};
var checkFixture = function (filepath) {
    return function (fixturePath) {
        return bind(readTextFile(filepath))(function (filecontent) {
            return bind(readTextFile(fixturePath))(function (fixturecontent) {
                return shouldEqual(filecontent)(fixturecontent);
            });
        });
    };
};
export {
    checkFixture,
    checkResultAndOutputs,
    shouldBeFailure,
    shouldBeFailureErr,
    shouldBeFailureOutput,
    shouldBeFailureOutputWithErr,
    shouldBeSuccess,
    shouldBeSuccessErr,
    shouldBeSuccessOutput,
    shouldBeSuccessOutputWithErr,
    withTempDir
};
export {
    Left,
    Right,
    ASCII,
    Base64,
    Binary,
    Hex,
    Latin1,
    UCS2,
    UTF16LE,
    UTF8,
    HexString,
    Identity,
    Manifest,
    Just,
    Nothing,
    Metadata,
    EQ,
    GT,
    LT,
    OutputJson,
    OutputLines,
    OutputTable,
    Spago,
    Tuple,
    absurd,
    add,
    and,
    ap,
    append,
    apply,
    ask,
    asks,
    between,
    bimap,
    bind,
    bottom,
    catchError,
    clamp,
    compare,
    comparing,
    compose,
    conj,
    const,
    degree,
    die,
    die$prime,
    discard,
    disj,
    div,
    either,
    eq,
    flap,
    flip,
    foldMap,
    foldl,
    for,
    forWithIndex,
    for_,
    fromMaybe,
    fst,
    gcd,
    genericShow,
    hush,
    identity,
    ifM,
    indent,
    indent2,
    isJust,
    isLeft,
    isNothing,
    isRight,
    join,
    lcm,
    liftA1,
    liftAff,
    liftEffect,
    liftM1,
    lmap,
    logDebug,
    logError,
    logInfo,
    logSuccess,
    logWarn,
    map,
    max,
    maybe,
    mempty,
    min,
    mkTemp,
    mkTemp$prime,
    mod,
    mul,
    negate,
    not,
    notEq,
    one,
    or,
    otherwise,
    output,
    parallelise,
    parseJson,
    parseLenientVersion,
    parseUrl,
    parseYaml,
    partition,
    partitionEithers,
    partitionMap,
    printJson,
    printYaml,
    pure,
    recip,
    rmap,
    runSpago,
    shaToHex,
    show,
    snd,
    sub,
    toDoc,
    top,
    traverse,
    try,
    unit,
    unless,
    unlessM,
    unsafeFromJust,
    unsafeFromRight,
    unsafeLog,
    unsafeStringify,
    unsafeThrow,
    unwrap,
    void,
    when,
    whenM,
    withBackoff$prime,
    zero
} from "../Spago.Prelude/index.js";
//# sourceMappingURL=index.js.map
