{"comments":null,"declarations":[{"children":[],"comments":"An Iso between a newtype and its inner type. This is a specialization of\n`coerced` restricted to newtypes. Supports switching between different\ntypes that have instances of the Newtype type class.\nIf you don't need to change types, you may have a better experience with\ntype inference if you use `simple _Newtype`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"t","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"s","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"b","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"t","tag":"TypeVar"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Newtype"],"Newtype"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"s","tag":"TypeVar"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"constraintClass":[["Data","Newtype"],"Newtype"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Lens","Types"],"Iso"],"tag":"TypeConstructor"},{"annotation":[],"contents":"t","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"s","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[11,70],"name":".spago/packages/profunctor-lenses-8.0.0/src/Data/Lens/Iso/Newtype.purs","start":[11,1]},"title":"_Newtype"},{"children":[],"comments":"A variant of `_Newtype` which takes the constructor as an argument\nand infers its inverse.\n\nThis is useful as an aid to type inference in certain situations.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"n","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"o","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"n","tag":"TypeVar"},{"annotation":[],"contents":"o","tag":"TypeVar"}],"constraintClass":[["Data","Newtype"],"Newtype"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"o","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"n","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Lens","Types"],"Iso'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"n","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"o","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[18,56],"name":".spago/packages/profunctor-lenses-8.0.0/src/Data/Lens/Iso/Newtype.purs","start":[18,1]},"title":"unto"}],"name":"Data.Lens.Iso.Newtype","reExports":[]}