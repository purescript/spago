// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_State_Class from "../Control.Monad.State.Class/index.js";
import * as Control_Monad_State_Trans from "../Control.Monad.State.Trans/index.js";
import * as Control_Monad_Writer_Trans from "../Control.Monad.Writer.Trans/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Generic_Rep from "../Data.Generic.Rep/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Show_Generic from "../Data.Show.Generic/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Test_Spec_Console from "../Test.Spec.Console/index.js";
import * as Test_Spec_Reporter_Base from "../Test.Spec.Reporter.Base/index.js";
import * as Test_Spec_Result from "../Test.Spec.Result/index.js";
import * as Test_Spec_Runner_Event from "../Test.Spec.Runner.Event/index.js";
import * as Test_Spec_Style from "../Test.Spec.Style/index.js";
import * as Test_Spec_Summary from "../Test.Spec.Summary/index.js";
import * as Test_Spec_Tree from "../Test.Spec.Tree/index.js";
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var genericShowArgsArgument = /* #__PURE__ */ Data_Show_Generic.genericShowArgsArgument(Data_Show.showString);
var eq = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Eq.eqArray(Test_Spec_Tree.pathItemEq));
var append1 = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var intercalate = /* #__PURE__ */ Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString);
var monadWriterT = /* #__PURE__ */ Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity);
var monadStateStateT = /* #__PURE__ */ Control_Monad_State_Trans.monadStateStateT(monadWriterT);
var monadWriterStateT = /* #__PURE__ */ Control_Monad_State_Trans.monadWriterStateT(/* #__PURE__ */ Control_Monad_Writer_Trans.monadWriterWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity));
var applicativeStateT = /* #__PURE__ */ Control_Monad_State_Trans.applicativeStateT(monadWriterT);
var pure = /* #__PURE__ */ Control_Applicative.pure(applicativeStateT);
var bind = /* #__PURE__ */ Control_Bind.bind(/* #__PURE__ */ Control_Monad_State_Trans.bindStateT(monadWriterT));
var get = /* #__PURE__ */ Control_Monad_State_Class.get(monadStateStateT);
var when = /* #__PURE__ */ Control_Applicative.when(applicativeStateT);
var lookup = /* #__PURE__ */ Data_Map_Internal.lookup(/* #__PURE__ */ Data_Ord.ordArray(Test_Spec_Tree.pathItemOrd));
var PrintTest = /* #__PURE__ */ (function () {
    function PrintTest(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    PrintTest.create = function (value0) {
        return function (value1) {
            return new PrintTest(value0, value1);
        };
    };
    return PrintTest;
})();
var PrintPending = /* #__PURE__ */ (function () {
    function PrintPending(value0) {
        this.value0 = value0;
    };
    PrintPending.create = function (value0) {
        return new PrintPending(value0);
    };
    return PrintPending;
})();
var printSummary = function (dictMonadWriter) {
    var tellLn = Test_Spec_Console.tellLn(dictMonadWriter);
    var Monad1 = (dictMonadWriter.MonadTell1()).Monad1();
    var pure1 = Control_Applicative.pure(Monad1.Applicative0());
    var discard1 = discard(Monad1.Bind1());
    var pluralize = function (v) {
        return function (v1) {
            if (v1 === 1) {
                return v;
            };
            return v + "s";
        };
    };
    var printPassedFailed = function (p) {
        return function (f) {
            var total = p + f | 0;
            var testStr = pluralize("test")(total);
            var color = (function () {
                var $80 = f > 0;
                if ($80) {
                    return Test_Spec_Style.red;
                };
                return Test_Spec_Style.dim;
            })();
            var amount = show(p) + ("/" + (show(total) + (" " + (testStr + " passed"))));
            return tellLn(Test_Spec_Style.styled(color)(amount));
        };
    };
    var printPending = function (p) {
        if (p > 0) {
            return tellLn(Test_Spec_Style.styled(Test_Spec_Style.yellow)(show(p) + (" " + (pluralize("test")(p) + " pending"))));
        };
        if (Data_Boolean.otherwise) {
            return pure1(Data_Unit.unit);
        };
        throw new Error("Failed pattern match at Test.Spec.Reporter.Console (line 67, column 5 - line 67, column 34): " + [ p.constructor.name ]);
    };
    return function ($125) {
        return (function (v) {
            return discard1(tellLn(""))(function () {
                return discard1(tellLn(Test_Spec_Style.styled(Test_Spec_Style.bold)("Summary")))(function () {
                    return discard1(printPassedFailed(v.passed)(v.failed))(function () {
                        return discard1(printPending(v.pending))(function () {
                            return tellLn("");
                        });
                    });
                });
            });
        })(Test_Spec_Summary.summarize($125));
    };
};
var printSummary1 = /* #__PURE__ */ printSummary(monadWriterStateT);
var printActionGeneric = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new PrintTest(x.value0.value0, x.value0.value1);
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return new PrintPending(x.value0);
        };
        throw new Error("Failed pattern match at Test.Spec.Reporter.Console (line 80, column 1 - line 80, column 60): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof PrintTest) {
            return new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1));
        };
        if (x instanceof PrintPending) {
            return new Data_Generic_Rep.Inr(x.value0);
        };
        throw new Error("Failed pattern match at Test.Spec.Reporter.Console (line 80, column 1 - line 80, column 60): " + [ x.constructor.name ]);
    }
};
var printActionShow = {
    show: /* #__PURE__ */ Data_Show_Generic.genericShow(printActionGeneric)(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ Data_Show_Generic.genericShowConstructor(/* #__PURE__ */ Data_Show_Generic.genericShowArgsProduct(genericShowArgsArgument)(/* #__PURE__ */ Data_Show_Generic.genericShowArgsArgument(Test_Spec_Result.showResult)))({
        reflectSymbol: function () {
            return "PrintTest";
        }
    }))(/* #__PURE__ */ Data_Show_Generic.genericShowConstructor(genericShowArgsArgument)({
        reflectSymbol: function () {
            return "PrintPending";
        }
    })))
};
var print = function (dictMonadState) {
    var Monad0 = dictMonadState.Monad0();
    var Bind1 = Monad0.Bind1();
    var discard1 = discard(Bind1);
    var Applicative0 = Monad0.Applicative0();
    var for_ = Data_Foldable.for_(Applicative0)(Data_Foldable.foldableMaybe);
    var bind1 = Control_Bind.bind(Bind1);
    var get1 = Control_Monad_State_Class.get(dictMonadState);
    var pure1 = Control_Applicative.pure(Applicative0);
    var put = Control_Monad_State_Class.put(dictMonadState);
    return function (dictMonadWriter) {
        var tellLn = Test_Spec_Console.tellLn(dictMonadWriter);
        return function (path) {
            return function (a) {
                return discard1(for_(Test_Spec_Tree.parentSuite(path))(function (suite) {
                    return bind1(get1)(function (s) {
                        if (s.lastPrintedSuitePath instanceof Data_Maybe.Just && eq(s.lastPrintedSuitePath.value0)(suite.path)) {
                            return pure1(Data_Unit.unit);
                        };
                        return discard1(tellLn(Test_Spec_Style.styled(append1(Test_Spec_Style.bold)(Test_Spec_Style.magenta))(intercalate(" \xbb ")(append1(Test_Spec_Tree.parentSuiteName(suite.path))([ suite.name ])))))(function () {
                            return put((function () {
                                var $97 = {};
                                for (var $98 in s) {
                                    if ({}.hasOwnProperty.call(s, $98)) {
                                        $97[$98] = s[$98];
                                    };
                                };
                                $97.lastPrintedSuitePath = new Data_Maybe.Just(suite.path);
                                return $97;
                            })());
                        });
                    });
                }))(function () {
                    if (a instanceof PrintTest && a.value1 instanceof Test_Spec_Result.Success) {
                        return tellLn("  " + (Test_Spec_Style.styled(Test_Spec_Style.green)("\u2713\ufe0e ") + Test_Spec_Style.styled(Test_Spec_Style.dim)(a.value0)));
                    };
                    if (a instanceof PrintTest && a.value1 instanceof Test_Spec_Result.Failure) {
                        return discard1(tellLn("  " + Test_Spec_Style.styled(Test_Spec_Style.red)("\u2717 " + (a.value0 + ":"))))(function () {
                            return discard1(tellLn(""))(function () {
                                return tellLn("  " + Test_Spec_Style.styled(Test_Spec_Style.red)(Effect_Exception.message(a.value1.value0)));
                            });
                        });
                    };
                    if (a instanceof PrintPending) {
                        return tellLn("  " + Test_Spec_Style.styled(Test_Spec_Style.cyan)("~ " + a.value0));
                    };
                    throw new Error("Failed pattern match at Test.Spec.Reporter.Console (line 99, column 3 - line 107, column 56): " + [ a.constructor.name ]);
                });
            };
        };
    };
};
var print1 = /* #__PURE__ */ print(monadStateStateT)(monadWriterStateT);
var initialState = /* #__PURE__ */ (function () {
    return {
        runningItems: Data_Map_Internal.empty,
        lastPrintedSuitePath: Data_Maybe.Nothing.value
    };
})();
var consoleReporter = /* #__PURE__ */ Test_Spec_Reporter_Base.defaultReporter(initialState)(/* #__PURE__ */ Test_Spec_Reporter_Base.defaultUpdate({
    getRunningItems: function (v) {
        return v.runningItems;
    },
    putRunningItems: /* #__PURE__ */ Data_Function.flip(function (v) {
        return function (v1) {
            return {
                runningItems: v1,
                lastPrintedSuitePath: v.lastPrintedSuitePath
            };
        };
    }),
    printFinishedItem: function (path) {
        return function (v) {
            if (v instanceof Test_Spec_Reporter_Base.RunningTest && v.value1 instanceof Data_Maybe.Just) {
                return print1(path)(new PrintTest(v.value0, v.value1.value0));
            };
            if (v instanceof Test_Spec_Reporter_Base.RunningPending) {
                return print1(path)(new PrintPending(v.value0));
            };
            return pure(Data_Unit.unit);
        };
    },
    update: function (v) {
        if (v instanceof Test_Spec_Runner_Event.TestEnd) {
            return bind(get)(function (v1) {
                return when(Data_Maybe.isNothing(lookup(v.value0)(v1.runningItems)))(print1(v.value0)(new PrintTest(v.value1, v.value2)));
            });
        };
        if (v instanceof Test_Spec_Runner_Event.Pending) {
            return bind(get)(function (v1) {
                return when(Data_Map_Internal.isEmpty(v1.runningItems))(print1(v.value0)(new PrintPending(v.value1)));
            });
        };
        if (v instanceof Test_Spec_Runner_Event.End) {
            return printSummary1(v.value0);
        };
        return pure(Data_Unit.unit);
    }
}));
export {
    consoleReporter
};
//# sourceMappingURL=index.js.map
