{"comments":null,"declarations":[{"children":[],"comments":"Type for strings representing file paths.\n","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}},"kind":null,"sourceSpan":{"end":[7,23],"name":".spago/packages/node-path-5.0.0/src/Node/Path.purs","start":[7,1]},"title":"FilePath"},{"children":[],"comments":"Normalize a string path, taking care of `..` and `.`, duplicated slashes,\netc. If the path contains a trailing slash it is preserved. On Windows\nbackslashes are used.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[12,49],"name":".spago/packages/node-path-5.0.0/src/Node/Path.purs","start":[12,1]},"title":"normalize"},{"children":[],"comments":"Concatenates multiple path segments together and normalizes the resulting path.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[15,52],"name":".spago/packages/node-path-5.0.0/src/Node/Path.purs","start":[15,1]},"title":"concat"},{"children":[],"comments":"Resolves `to` to an absolute path ([from...], to).\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[18,72],"name":".spago/packages/node-path-5.0.0/src/Node/Path.purs","start":[18,1]},"title":"resolve"},{"children":[],"comments":"Solve the relative path from `from` to `to`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[21,60],"name":".spago/packages/node-path-5.0.0/src/Node/Path.purs","start":[21,1]},"title":"relative"},{"children":[],"comments":"Return the directory name of a path.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[24,47],"name":".spago/packages/node-path-5.0.0/src/Node/Path.purs","start":[24,1]},"title":"dirname"},{"children":[],"comments":"Return the last portion of a path.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[27,48],"name":".spago/packages/node-path-5.0.0/src/Node/Path.purs","start":[27,1]},"title":"basename"},{"children":[],"comments":"Return the last portion of a path, also dropping a specific file extension\nif it matches the end of the name.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[31,70],"name":".spago/packages/node-path-5.0.0/src/Node/Path.purs","start":[31,1]},"title":"basenameWithoutExt"},{"children":[],"comments":"Return the extension of the path, from the last `.` to end of string in the\nlast portion of the path. If there is no `.` in the last portion of the\npath or the first character of it is `.`, then it returns an empty string.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Node","Path"],"FilePath"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[36,47],"name":".spago/packages/node-path-5.0.0/src/Node/Path.purs","start":[36,1]},"title":"extname"},{"children":[],"comments":"The platform-specific file separator. `\\\\` or `/`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}},"kind":null,"sourceSpan":{"end":[39,29],"name":".spago/packages/node-path-5.0.0/src/Node/Path.purs","start":[39,1]},"title":"sep"},{"children":[],"comments":"The platform-specific path delimiter, `;` or `:`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}},"kind":null,"sourceSpan":{"end":[42,35],"name":".spago/packages/node-path-5.0.0/src/Node/Path.purs","start":[42,1]},"title":"delimiter"},{"children":[],"comments":"Parse a path into components.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":["root",{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"},{"annotation":[],"contents":["dir",{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"},{"annotation":[],"contents":["base",{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"},{"annotation":[],"contents":["ext",{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"},{"annotation":[],"contents":["name",{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"},{"annotation":[],"tag":"REmpty"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[45,115],"name":".spago/packages/node-path-5.0.0/src/Node/Path.purs","start":[45,1]},"title":"parse"},{"children":[],"comments":"Determines whether path is an absolute path\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[48,47],"name":".spago/packages/node-path-5.0.0/src/Node/Path.purs","start":[48,1]},"title":"isAbsolute"}],"name":"Node.Path","reExports":[]}