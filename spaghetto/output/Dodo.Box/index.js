// Generated by purs version 0.15.10
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Dodo from "../Dodo/index.js";
import * as Dodo_Internal from "../Dodo.Internal/index.js";
import * as Partial_Unsafe from "../Partial.Unsafe/index.js";
import * as Safe_Coerce from "../Safe.Coerce/index.js";
var map = /* #__PURE__ */ Data_Functor.map(Dodo_Internal.functorDoc);
var max = /* #__PURE__ */ Data_Ord.max(Data_Ord.ordInt);
var coerce = /* #__PURE__ */ Safe_Coerce.coerce();
var append = /* #__PURE__ */ Data_Semigroup.append(Dodo_Internal.semigroupDoc);
var power = /* #__PURE__ */ Data_Monoid.power(Dodo_Internal.monoidDoc);
var mempty = /* #__PURE__ */ Data_Monoid.mempty(Dodo_Internal.monoidDoc);
var under = /* #__PURE__ */ Data_Newtype.under()();
var LinePad = /* #__PURE__ */ (function () {
    function LinePad(value0) {
        this.value0 = value0;
    };
    LinePad.create = function (value0) {
        return new LinePad(value0);
    };
    return LinePad;
})();
var LineDoc = /* #__PURE__ */ (function () {
    function LineDoc(value0) {
        this.value0 = value0;
    };
    LineDoc.create = function (value0) {
        return new LineDoc(value0);
    };
    return LineDoc;
})();
var LineAppend = /* #__PURE__ */ (function () {
    function LineAppend(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    LineAppend.create = function (value0) {
        return function (value1) {
            return new LineAppend(value0, value1);
        };
    };
    return LineAppend;
})();
var FullHeight = /* #__PURE__ */ (function () {
    function FullHeight(value0) {
        this.value0 = value0;
    };
    FullHeight.create = function (value0) {
        return new FullHeight(value0);
    };
    return FullHeight;
})();
var FullWidth = /* #__PURE__ */ (function () {
    function FullWidth(value0) {
        this.value0 = value0;
    };
    FullWidth.create = function (value0) {
        return new FullWidth(value0);
    };
    return FullWidth;
})();
var AsIs = /* #__PURE__ */ (function () {
    function AsIs() {

    };
    AsIs.value = new AsIs();
    return AsIs;
})();
var StpDone = /* #__PURE__ */ (function () {
    function StpDone() {

    };
    StpDone.value = new StpDone();
    return StpDone;
})();
var StpLine = /* #__PURE__ */ (function () {
    function StpLine(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    StpLine.create = function (value0) {
        return function (value1) {
            return new StpLine(value0, value1);
        };
    };
    return StpLine;
})();
var StpPad = /* #__PURE__ */ (function () {
    function StpPad(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    StpPad.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new StpPad(value0, value1, value2);
            };
        };
    };
    return StpPad;
})();
var StpHorz = /* #__PURE__ */ (function () {
    function StpHorz(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    StpHorz.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new StpHorz(value0, value1, value2);
            };
        };
    };
    return StpHorz;
})();
var ResumeEnter = /* #__PURE__ */ (function () {
    function ResumeEnter(value0) {
        this.value0 = value0;
    };
    ResumeEnter.create = function (value0) {
        return new ResumeEnter(value0);
    };
    return ResumeEnter;
})();
var ResumeLeave = /* #__PURE__ */ (function () {
    function ResumeLeave(value0) {
        this.value0 = value0;
    };
    ResumeLeave.create = function (value0) {
        return new ResumeLeave(value0);
    };
    return ResumeLeave;
})();
var ResumeHorzR = /* #__PURE__ */ (function () {
    function ResumeHorzR(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    ResumeHorzR.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new ResumeHorzR(value0, value1, value2);
            };
        };
    };
    return ResumeHorzR;
})();
var ResumeHorzH = /* #__PURE__ */ (function () {
    function ResumeHorzH(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    ResumeHorzH.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new ResumeHorzH(value0, value1, value2);
            };
        };
    };
    return ResumeHorzH;
})();
var ResumeNil = /* #__PURE__ */ (function () {
    function ResumeNil() {

    };
    ResumeNil.value = new ResumeNil();
    return ResumeNil;
})();
var Start = /* #__PURE__ */ (function () {
    function Start() {

    };
    Start.value = new Start();
    return Start;
})();
var Middle = /* #__PURE__ */ (function () {
    function Middle() {

    };
    Middle.value = new Middle();
    return Middle;
})();
var End = /* #__PURE__ */ (function () {
    function End() {

    };
    End.value = new End();
    return End;
})();
var DocLine = /* #__PURE__ */ (function () {
    function DocLine(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DocLine.create = function (value0) {
        return function (value1) {
            return new DocLine(value0, value1);
        };
    };
    return DocLine;
})();
var DocVApp = /* #__PURE__ */ (function () {
    function DocVApp(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    DocVApp.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new DocVApp(value0, value1, value2);
            };
        };
    };
    return DocVApp;
})();
var DocHApp = /* #__PURE__ */ (function () {
    function DocHApp(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    DocHApp.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new DocHApp(value0, value1, value2);
            };
        };
    };
    return DocHApp;
})();
var DocAlign = /* #__PURE__ */ (function () {
    function DocAlign(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    DocAlign.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new DocAlign(value0, value1, value2);
            };
        };
    };
    return DocAlign;
})();
var DocPad = /* #__PURE__ */ (function () {
    function DocPad(value0) {
        this.value0 = value0;
    };
    DocPad.create = function (value0) {
        return new DocPad(value0);
    };
    return DocPad;
})();
var DocEmpty = /* #__PURE__ */ (function () {
    function DocEmpty() {

    };
    DocEmpty.value = new DocEmpty();
    return DocEmpty;
})();
var DocBoxBuffer = function (x) {
    return x;
};
var BuildEnter = /* #__PURE__ */ (function () {
    function BuildEnter(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    BuildEnter.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new BuildEnter(value0, value1, value2);
            };
        };
    };
    return BuildEnter;
})();
var BuildLeave = /* #__PURE__ */ (function () {
    function BuildLeave(value0) {
        this.value0 = value0;
    };
    BuildLeave.create = function (value0) {
        return new BuildLeave(value0);
    };
    return BuildLeave;
})();
var BuildVAppR = /* #__PURE__ */ (function () {
    function BuildVAppR(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    BuildVAppR.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new BuildVAppR(value0, value1, value2);
            };
        };
    };
    return BuildVAppR;
})();
var BuildHAppR = /* #__PURE__ */ (function () {
    function BuildHAppR(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    BuildHAppR.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new BuildHAppR(value0, value1, value2, value3);
                };
            };
        };
    };
    return BuildHAppR;
})();
var BuildHAppH = /* #__PURE__ */ (function () {
    function BuildHAppH(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    BuildHAppH.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new BuildHAppH(value0, value1, value2);
            };
        };
    };
    return BuildHAppH;
})();
var BuildNil = /* #__PURE__ */ (function () {
    function BuildNil() {

    };
    BuildNil.value = new BuildNil();
    return BuildNil;
})();
var Horizontal = function (x) {
    return x;
};
var Vertical = function (x) {
    return x;
};
var newtypeVertical_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeHorizontal_ = {
    Coercible0: function () {
        return undefined;
    }
};
var functorDocBox = {
    map: function (f) {
        return function (m) {
            if (m instanceof DocLine) {
                return new DocLine(map(f)(m.value0), m.value1);
            };
            if (m instanceof DocVApp) {
                return new DocVApp(Data_Functor.map(functorDocBox)(f)(m.value0), Data_Functor.map(functorDocBox)(f)(m.value1), m.value2);
            };
            if (m instanceof DocHApp) {
                return new DocHApp(Data_Functor.map(functorDocBox)(f)(m.value0), Data_Functor.map(functorDocBox)(f)(m.value1), m.value2);
            };
            if (m instanceof DocAlign) {
                return new DocAlign(m.value0, m.value1, Data_Functor.map(functorDocBox)(f)(m.value2));
            };
            if (m instanceof DocPad) {
                return new DocPad(m.value0);
            };
            if (m instanceof DocEmpty) {
                return DocEmpty.value;
            };
            throw new Error("Failed pattern match at Dodo.Box (line 0, column 0 - line 0, column 0): " + [ m.constructor.name ]);
        };
    }
};
var functorHorizontal = functorDocBox;
var functorVertical = functorDocBox;
var eqAlign = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Start && y instanceof Start) {
                return true;
            };
            if (x instanceof Middle && y instanceof Middle) {
                return true;
            };
            if (x instanceof End && y instanceof End) {
                return true;
            };
            return false;
        };
    }
};
var vpadding = function (height) {
    if (height <= 0) {
        return DocEmpty.value;
    };
    if (Data_Boolean.otherwise) {
        return new DocPad({
            height: height,
            width: 0
        });
    };
    throw new Error("Failed pattern match at Dodo.Box (line 228, column 1 - line 228, column 38): " + [ height.constructor.name ]);
};
var valignOf = function (v) {
    if (v instanceof DocAlign) {
        return v.value0;
    };
    return Start.value;
};
var valign = function (a) {
    return function (v) {
        var v1 = function (v2) {
            if (v instanceof DocAlign && Data_Boolean.otherwise) {
                return new DocAlign(a, v.value1, v.value2);
            };
            return new DocAlign(a, Start.value, v);
        };
        if (v instanceof DocAlign) {
            if (a instanceof Start) {
                if (v.value1 instanceof Start) {
                    return v.value2;
                };
                return v1(true);
            };
            return v1(true);
        };
        return v1(true);
    };
};
var sizeOf = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v instanceof DocLine) {
            $tco_done = true;
            return {
                width: v.value1,
                height: 1
            };
        };
        if (v instanceof DocVApp) {
            $tco_done = true;
            return v.value2;
        };
        if (v instanceof DocHApp) {
            $tco_done = true;
            return v.value2;
        };
        if (v instanceof DocAlign) {
            $copy_v = v.value2;
            return;
        };
        if (v instanceof DocPad) {
            $tco_done = true;
            return v.value0;
        };
        if (v instanceof DocEmpty) {
            $tco_done = true;
            return {
                width: 0,
                height: 0
            };
        };
        throw new Error("Failed pattern match at Dodo.Box (line 241, column 10 - line 247, column 38): " + [ v.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var vappend = /* #__PURE__ */ (function () {
    var scale = function (sizea) {
        return function (sizeb) {
            return {
                width: max(sizea.width)(sizeb.width),
                height: sizea.height + sizeb.height | 0
            };
        };
    };
    return function (v) {
        return function (v1) {
            if (v instanceof DocEmpty) {
                return v1;
            };
            if (v1 instanceof DocEmpty) {
                return v;
            };
            if (v instanceof DocPad && v1 instanceof DocPad) {
                return new DocPad(scale(v.value0)(v1.value0));
            };
            return new DocVApp(v, v1, scale(sizeOf(v))(sizeOf(v1)));
        };
    };
})();
var vertical = function (dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(vappend)(DocEmpty.value);
};
var semigroupVertical = {
    append: /* #__PURE__ */ coerce(vappend)
};
var monoidVertical = /* #__PURE__ */ (function () {
    return {
        mempty: DocEmpty.value,
        Semigroup0: function () {
            return semigroupVertical;
        }
    };
})();
var power1 = /* #__PURE__ */ Data_Monoid.power(monoidVertical);
var resume = /* #__PURE__ */ (function () {
    var go = function ($copy_cmd) {
        return function ($copy_stack) {
            var $tco_var_cmd = $copy_cmd;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(cmd, stack) {
                if (cmd instanceof ResumeEnter) {
                    if (cmd.value0 instanceof StpDone) {
                        $tco_var_cmd = new ResumeLeave(Data_Maybe.Nothing.value);
                        $copy_stack = stack;
                        return;
                    };
                    if (cmd.value0 instanceof StpLine) {
                        $tco_var_cmd = new ResumeLeave(new Data_Maybe.Just({
                            line: new LineDoc(cmd.value0.value0),
                            next: cmd.value0.value1
                        }));
                        $copy_stack = stack;
                        return;
                    };
                    if (cmd.value0 instanceof StpPad) {
                        var $136 = cmd.value0.value1 === 0;
                        if ($136) {
                            $tco_var_cmd = new ResumeEnter(cmd.value0.value2);
                            $copy_stack = stack;
                            return;
                        };
                        $tco_var_cmd = new ResumeLeave(new Data_Maybe.Just({
                            line: new LinePad(cmd.value0.value0),
                            next: new StpPad(cmd.value0.value0, cmd.value0.value1 - 1 | 0, cmd.value0.value2)
                        }));
                        $copy_stack = stack;
                        return;
                    };
                    if (cmd.value0 instanceof StpHorz) {
                        $tco_var_cmd = new ResumeEnter(cmd.value0.value1);
                        $copy_stack = new ResumeHorzR(cmd.value0.value0, cmd.value0.value2, stack);
                        return;
                    };
                    throw new Error("Failed pattern match at Dodo.Box (line 389, column 7 - line 406, column 56): " + [ cmd.value0.constructor.name ]);
                };
                if (cmd instanceof ResumeLeave) {
                    if (stack instanceof ResumeHorzR) {
                        $tco_var_cmd = new ResumeEnter(stack.value0);
                        $copy_stack = new ResumeHorzH(cmd.value0, stack.value1, stack.value2);
                        return;
                    };
                    if (stack instanceof ResumeHorzH) {
                        if (cmd.value0 instanceof Data_Maybe.Just && stack.value0 instanceof Data_Maybe.Just) {
                            $tco_var_cmd = new ResumeLeave(new Data_Maybe.Just({
                                line: new LineAppend(cmd.value0.value0.line, stack.value0.value0.line),
                                next: new StpHorz(cmd.value0.value0.next, stack.value0.value0.next, stack.value1)
                            }));
                            $copy_stack = stack.value2;
                            return;
                        };
                        $tco_var_cmd = new ResumeEnter(stack.value1);
                        $copy_stack = stack.value2;
                        return;
                    };
                    if (stack instanceof ResumeNil) {
                        $tco_done = true;
                        return cmd.value0;
                    };
                    throw new Error("Failed pattern match at Dodo.Box (line 408, column 7 - line 424, column 15): " + [ stack.constructor.name ]);
                };
                throw new Error("Failed pattern match at Dodo.Box (line 387, column 18 - line 424, column 15): " + [ cmd.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_cmd, $copy_stack);
            };
            return $tco_result;
        };
    };
    var $277 = Data_Function.flip(go)(ResumeNil.value);
    return function ($278) {
        return $277(ResumeEnter.create($278));
    };
})();
var padWithAlign = function (appendFn) {
    return function (paddingFn) {
        return function (padWidth) {
            return function (doc) {
                return function (v) {
                    if (v instanceof Start) {
                        return appendFn(doc)(paddingFn(padWidth));
                    };
                    if (v instanceof Middle) {
                        var mid = Data_Int.toNumber(padWidth) / 2.0;
                        return appendFn(appendFn(paddingFn(Data_Int.floor(mid)))(doc))(paddingFn(Data_Int.ceil(mid)));
                    };
                    if (v instanceof End) {
                        return appendFn(paddingFn(padWidth))(doc);
                    };
                    throw new Error("Failed pattern match at Dodo.Box (line 197, column 48 - line 206, column 38): " + [ v.constructor.name ]);
                };
            };
        };
    };
};
var isEmpty = function (v) {
    if (v instanceof DocEmpty) {
        return true;
    };
    return false;
};
var hpadding = function (width) {
    if (width <= 0) {
        return DocEmpty.value;
    };
    if (Data_Boolean.otherwise) {
        return new DocPad({
            height: 1,
            width: width
        });
    };
    throw new Error("Failed pattern match at Dodo.Box (line 234, column 1 - line 234, column 38): " + [ width.constructor.name ]);
};
var happend = /* #__PURE__ */ (function () {
    var scale = function (sizea) {
        return function (sizeb) {
            return {
                width: sizea.width + sizeb.width | 0,
                height: max(sizea.height)(sizeb.height)
            };
        };
    };
    return function (v) {
        return function (v1) {
            if (v instanceof DocEmpty) {
                return v1;
            };
            if (v1 instanceof DocEmpty) {
                return v;
            };
            if (v instanceof DocPad && v1 instanceof DocPad) {
                return new DocPad(scale(v.value0)(v1.value0));
            };
            return new DocHApp(v, v1, scale(sizeOf(v))(sizeOf(v1)));
        };
    };
})();
var horizontal = function (dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(happend)(DocEmpty.value);
};
var horizontalWithAlign = function (dictFoldable) {
    var foldr = Data_Foldable.foldr(dictFoldable);
    return function (align) {
        return foldr(function (a) {
            return function (b) {
                return happend(valign(align)(a))(b);
            };
        })(DocEmpty.value);
    };
};
var semigroupHorizontal = {
    append: /* #__PURE__ */ coerce(happend)
};
var monoidHorizontal = /* #__PURE__ */ (function () {
    return {
        mempty: DocEmpty.value,
        Semigroup0: function () {
            return semigroupHorizontal;
        }
    };
})();
var halignOf = function (v) {
    if (v instanceof DocAlign) {
        return v.value1;
    };
    return Start.value;
};
var halign = function (b) {
    return function (v) {
        var v1 = function (v2) {
            if (v instanceof DocAlign && Data_Boolean.otherwise) {
                return new DocAlign(v.value0, b, v.value2);
            };
            return new DocAlign(Start.value, b, v);
        };
        if (v instanceof DocAlign) {
            if (v.value0 instanceof Start) {
                if (b instanceof Start) {
                    return v.value2;
                };
                return v1(true);
            };
            return v1(true);
        };
        return v1(true);
    };
};
var resize = function (newSize) {
    return function (box) {
        var size = sizeOf(box);
        var vpad = newSize.height - size.height | 0;
        var hpad = newSize.width - size.width | 0;
        var box$prime = (function () {
            if (box instanceof DocAlign) {
                return box.value2;
            };
            return box;
        })();
        var hdoc = (function () {
            if (hpad <= 0) {
                return valign(Start.value)(box$prime);
            };
            if (Data_Boolean.otherwise) {
                return padWithAlign(happend)(hpadding)(hpad)(box)(halignOf(box));
            };
            throw new Error("Failed pattern match at Dodo.Box (line 189, column 3 - line 191, column 72): " + [  ]);
        })();
        var vdoc = (function () {
            if (vpad <= 0) {
                return halign(Start.value)(hdoc);
            };
            if (Data_Boolean.otherwise) {
                return padWithAlign(vappend)(vpadding)(vpad)(hdoc)(valignOf(box));
            };
            throw new Error("Failed pattern match at Dodo.Box (line 192, column 3 - line 194, column 73): " + [  ]);
        })();
        return vdoc;
    };
};
var verticalWithAlign = function (dictFoldable) {
    var foldr = Data_Foldable.foldr(dictFoldable);
    return function (align) {
        return foldr(function (a) {
            return function (b) {
                return vappend(halign(align)(a))(b);
            };
        })(DocEmpty.value);
    };
};
var formatLine = /* #__PURE__ */ (function () {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return acc;
                };
                if (v instanceof Data_List_Types.Cons) {
                    if (v.value0 instanceof LinePad) {
                        if (Dodo_Internal.isEmpty(acc)) {
                            $tco_var_acc = acc;
                            $copy_v = v.value1;
                            return;
                        };
                        if (Data_Boolean.otherwise) {
                            $tco_var_acc = append(power(Dodo.space)(v.value0.value0))(acc);
                            $copy_v = v.value1;
                            return;
                        };
                    };
                    if (v.value0 instanceof LineDoc) {
                        $tco_var_acc = append(v.value0.value0)(acc);
                        $copy_v = v.value1;
                        return;
                    };
                    if (v.value0 instanceof LineAppend) {
                        $tco_var_acc = acc;
                        $copy_v = new Data_List_Types.Cons(v.value0.value1, new Data_List_Types.Cons(v.value0.value0, v.value1));
                        return;
                    };
                    throw new Error("Failed pattern match at Dodo.Box (line 290, column 7 - line 299, column 33): " + [ v.value0.constructor.name ]);
                };
                throw new Error("Failed pattern match at Dodo.Box (line 286, column 12 - line 299, column 33): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    var $279 = go(mempty);
    return function ($280) {
        return $279(Data_List.singleton($280));
    };
})();
var fill = function (ch) {
    return function (v) {
        var line = (function () {
            if (ch instanceof Dodo_Internal.Annotate) {
                return new DocLine(Dodo.annotate(ch.value0)(power(ch.value1)(v.width)), v.width);
            };
            return new DocLine(power(ch)(v.width), v.width);
        })();
        return under(Vertical)(Data_Function.flip(power1)(v.height))(line);
    };
};
var empty = /* #__PURE__ */ (function () {
    return DocEmpty.value;
})();
var docBox = /* #__PURE__ */ (function () {
    var writeText = function (width) {
        return function (text) {
            return function (v) {
                var doc$prime = new Dodo_Internal.Text(width, text);
                var line = (function () {
                    if (v.currentLine instanceof Data_List_Types.Cons && v.currentLine.value0 instanceof Data_Either.Right) {
                        return new Data_List_Types.Cons(new Data_Either.Right(append(v.currentLine.value0.value0)(doc$prime)), v.currentLine.value1);
                    };
                    return new Data_List_Types.Cons(new Data_Either.Right(doc$prime), v.currentLine);
                })();
                return {
                    currentIndent: v.currentIndent,
                    currentLine: line,
                    currentWidth: v.currentWidth + width | 0,
                    lines: v.lines
                };
            };
        };
    };
    var writeIndent = function (width) {
        return function (text) {
            return function (v) {
                var doc = new Dodo_Internal.Text(width, text);
                return {
                    currentIndent: append(v.currentIndent)(doc),
                    currentLine: v.currentLine,
                    currentWidth: v.currentWidth + width | 0,
                    lines: v.lines
                };
            };
        };
    };
    var stkToDoc = Data_Foldable.foldl(Data_List_Types.foldableList)(function (doc) {
        return function (v) {
            if (v instanceof Data_Either.Left) {
                return Dodo.annotate(v.value0)(doc);
            };
            if (v instanceof Data_Either.Right) {
                return append(v.value0)(doc);
            };
            throw new Error("Failed pattern match at Dodo.Box (line 521, column 15 - line 525, column 22): " + [ v.constructor.name ]);
        };
    })(mempty);
    var writeBreak = function (v) {
        var line = stkToDoc(v.currentLine);
        return {
            currentIndent: mempty,
            currentLine: Data_List.filter(Data_Either.isLeft)(v.currentLine),
            currentWidth: 0,
            lines: vappend(v.lines)(new DocLine(append(v.currentIndent)(line), v.currentWidth))
        };
    };
    var leaveAnnotation = function (v) {
        return function (v1) {
            return function (v2) {
                var line = (function () {
                    if (v2.currentLine instanceof Data_List_Types.Cons && (v2.currentLine.value0 instanceof Data_Either.Right && (v2.currentLine.value1 instanceof Data_List_Types.Cons && v2.currentLine.value1.value0 instanceof Data_Either.Left))) {
                        return new Data_List_Types.Cons(new Data_Either.Right(Dodo.annotate(v2.currentLine.value1.value0.value0)(v2.currentLine.value0.value0)), v2.currentLine.value1.value1);
                    };
                    if (v2.currentLine instanceof Data_List_Types.Cons && v2.currentLine.value0 instanceof Data_Either.Left) {
                        return v2.currentLine.value1;
                    };
                    return Partial_Unsafe.unsafeCrashWith("leaveAnnotation: docs and annotations must be interleaved");
                })();
                return {
                    currentIndent: v2.currentIndent,
                    currentLine: line,
                    currentWidth: v2.currentWidth,
                    lines: v2.lines
                };
            };
        };
    };
    var flushBuffer = function (v) {
        if (isEmpty(v.lines) && Data_List["null"](v.currentLine)) {
            return DocEmpty.value;
        };
        if (Data_Boolean.otherwise) {
            var line = stkToDoc(v.currentLine);
            return vappend(v.lines)(new DocLine(append(v.currentIndent)(line), v.currentWidth));
        };
        throw new Error("Failed pattern match at Dodo.Box (line 511, column 3 - line 511, column 44): " + [ v.constructor.name ]);
    };
    var enterAnnotation = function (ann) {
        return function (v) {
            return function (v1) {
                return {
                    currentIndent: v1.currentIndent,
                    currentLine: new Data_List_Types.Cons(new Data_Either.Left(ann), v1.currentLine),
                    currentWidth: v1.currentWidth,
                    lines: v1.lines
                };
            };
        };
    };
    var emptyBuffer = {
        currentIndent: mempty,
        currentLine: Data_List_Types.Nil.value,
        currentWidth: 0,
        lines: DocEmpty.value
    };
    return {
        emptyBuffer: emptyBuffer,
        writeText: writeText,
        writeIndent: writeIndent,
        writeBreak: writeBreak,
        enterAnnotation: enterAnnotation,
        leaveAnnotation: leaveAnnotation,
        flushBuffer: flushBuffer
    };
})();
var build = /* #__PURE__ */ (function () {
    var go = function ($copy_cmd) {
        return function ($copy_stack) {
            var $tco_var_cmd = $copy_cmd;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(cmd, stack) {
                if (cmd instanceof BuildEnter) {
                    if (cmd.value0 instanceof FullHeight) {
                        if (cmd.value2 instanceof DocHApp) {
                            $tco_var_cmd = new BuildEnter(cmd.value0, StpDone.value, cmd.value2.value1);
                            $copy_stack = new BuildHAppR(cmd.value0.value0, cmd.value2.value0, cmd.value1, stack);
                            return;
                        };
                        $tco_var_cmd = new BuildEnter(AsIs.value, cmd.value1, resize({
                            width: 0,
                            height: cmd.value0.value0
                        })(cmd.value2));
                        $copy_stack = stack;
                        return;
                    };
                    if (cmd.value0 instanceof FullWidth) {
                        if (cmd.value2 instanceof DocVApp) {
                            $tco_var_cmd = new BuildEnter(cmd.value0, cmd.value1, cmd.value2.value1);
                            $copy_stack = new BuildVAppR(cmd.value0.value0, cmd.value2.value0, stack);
                            return;
                        };
                        $tco_var_cmd = new BuildEnter(AsIs.value, cmd.value1, resize({
                            width: cmd.value0.value0,
                            height: 0
                        })(cmd.value2));
                        $copy_stack = stack;
                        return;
                    };
                    if (cmd.value0 instanceof AsIs) {
                        if (cmd.value2 instanceof DocVApp) {
                            $tco_var_cmd = new BuildEnter(new FullWidth(cmd.value2.value2.width), cmd.value1, cmd.value2.value1);
                            $copy_stack = new BuildVAppR(cmd.value2.value2.width, cmd.value2.value0, stack);
                            return;
                        };
                        if (cmd.value2 instanceof DocHApp) {
                            $tco_var_cmd = new BuildEnter(new FullHeight(cmd.value2.value2.height), StpDone.value, cmd.value2.value1);
                            $copy_stack = new BuildHAppR(cmd.value2.value2.height, cmd.value2.value0, cmd.value1, stack);
                            return;
                        };
                        if (cmd.value2 instanceof DocAlign) {
                            $tco_var_cmd = new BuildEnter(cmd.value0, cmd.value1, cmd.value2.value2);
                            $copy_stack = stack;
                            return;
                        };
                        if (cmd.value2 instanceof DocLine) {
                            $tco_var_cmd = new BuildLeave(new StpLine(cmd.value2.value0, cmd.value1));
                            $copy_stack = stack;
                            return;
                        };
                        if (cmd.value2 instanceof DocPad) {
                            $tco_var_cmd = new BuildLeave(new StpPad(cmd.value2.value0.width, cmd.value2.value0.height, cmd.value1));
                            $copy_stack = stack;
                            return;
                        };
                        if (cmd.value2 instanceof DocEmpty) {
                            $tco_var_cmd = new BuildLeave(StpDone.value);
                            $copy_stack = stack;
                            return;
                        };
                        throw new Error("Failed pattern match at Dodo.Box (line 341, column 11 - line 353, column 44): " + [ cmd.value2.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Dodo.Box (line 327, column 7 - line 353, column 44): " + [ cmd.value0.constructor.name ]);
                };
                if (cmd instanceof BuildLeave) {
                    if (stack instanceof BuildVAppR) {
                        $tco_var_cmd = new BuildEnter(new FullWidth(stack.value0), cmd.value0, stack.value1);
                        $copy_stack = stack.value2;
                        return;
                    };
                    if (stack instanceof BuildHAppR) {
                        $tco_var_cmd = new BuildEnter(new FullHeight(stack.value0), StpDone.value, stack.value1);
                        $copy_stack = new BuildHAppH(cmd.value0, stack.value2, stack.value3);
                        return;
                    };
                    if (stack instanceof BuildHAppH) {
                        $tco_var_cmd = new BuildLeave(new StpHorz(cmd.value0, stack.value0, stack.value1));
                        $copy_stack = stack.value2;
                        return;
                    };
                    if (stack instanceof BuildNil) {
                        $tco_done = true;
                        return cmd.value0;
                    };
                    throw new Error("Failed pattern match at Dodo.Box (line 355, column 7 - line 363, column 15): " + [ stack.constructor.name ]);
                };
                throw new Error("Failed pattern match at Dodo.Box (line 325, column 18 - line 363, column 15): " + [ cmd.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_cmd, $copy_stack);
            };
            return $tco_result;
        };
    };
    return function (size) {
        return function (next) {
            return function (box) {
                return go(new BuildEnter(size, next, box))(BuildNil.value);
            };
        };
    };
})();
var toDoc = /* #__PURE__ */ (function () {
    var go2 = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return acc;
                };
                if (v instanceof Data_Maybe.Just) {
                    $tco_var_acc = append(acc)(append(Dodo["break"])(formatLine(v.value0.line)));
                    $copy_v = resume(v.value0.next);
                    return;
                };
                throw new Error("Failed pattern match at Dodo.Box (line 278, column 13 - line 281, column 63): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    var go1 = function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return mempty;
        };
        if (v instanceof Data_Maybe.Just) {
            return go2(formatLine(v.value0.line))(resume(v.value0.next));
        };
        throw new Error("Failed pattern match at Dodo.Box (line 273, column 9 - line 276, column 42): " + [ v.constructor.name ]);
    };
    var $281 = build(AsIs.value)(StpDone.value);
    return function ($282) {
        return go1(resume($281($282)));
    };
})();
export {
    Vertical,
    Horizontal,
    Start,
    Middle,
    End,
    valign,
    halign,
    vappend,
    happend,
    vertical,
    verticalWithAlign,
    horizontal,
    horizontalWithAlign,
    resize,
    fill,
    vpadding,
    hpadding,
    sizeOf,
    isEmpty,
    empty,
    toDoc,
    docBox,
    eqAlign,
    functorDocBox,
    newtypeVertical_,
    functorVertical,
    semigroupVertical,
    monoidVertical,
    newtypeHorizontal_,
    functorHorizontal,
    semigroupHorizontal,
    monoidHorizontal
};
//# sourceMappingURL=index.js.map
