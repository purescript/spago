// Generated by purs version 0.15.10
import * as Ansi_Codes from "../Ansi.Codes/index.js";
import * as Control_Alternative from "../Control.Alternative/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Argonaut_Core from "../Data.Argonaut.Core/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Codec from "../Data.Codec/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_FoldableWithIndex from "../Data.FoldableWithIndex/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_CodePoints from "../Data.String.CodePoints/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Dodo from "../Dodo/index.js";
import * as Dodo_Ansi from "../Dodo.Ansi/index.js";
import * as Dodo_Internal from "../Dodo.Internal/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Foreign_Object from "../Foreign.Object/index.js";
import * as Spago_Core_Config from "../Spago.Core.Config/index.js";
import * as Spago_Psa_Types from "../Spago.Psa.Types/index.js";
var lines = /* #__PURE__ */ Dodo.lines(Data_Foldable.foldableArray);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var maximum = /* #__PURE__ */ Data_Foldable.maximum(Data_Ord.ordInt)(Data_Foldable.foldableArray);
var maximumBy = /* #__PURE__ */ Data_Foldable.maximumBy(Data_Foldable.foldableArray);
var comparing = /* #__PURE__ */ Data_Ord.comparing(Data_Ord.ordInt);
var foldWithSeparator = /* #__PURE__ */ Dodo.foldWithSeparator(Data_Foldable.foldableArray);
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Maybe.bindMaybe);
var power = /* #__PURE__ */ Data_Monoid.power(Data_Monoid.monoidString);
var pure = /* #__PURE__ */ Control_Applicative.pure(Data_Maybe.applicativeMaybe);
var append1 = /* #__PURE__ */ Data_Semigroup.append(Dodo_Internal.semigroupDoc);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var discard1 = /* #__PURE__ */ discard(Data_Maybe.bindMaybe);
var guard = /* #__PURE__ */ Control_Alternative.guard(Data_Maybe.alternativeMaybe);
var unfoldr = /* #__PURE__ */ Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray);
var mempty = /* #__PURE__ */ Data_Monoid.mempty(Dodo_Internal.monoidDoc);
var fold = /* #__PURE__ */ Data_Foldable.fold(Data_Foldable.foldableArray)(Dodo_Internal.monoidDoc);
var sort = /* #__PURE__ */ Data_Array.sort(Data_Ord.ordString);
var append2 = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var words = /* #__PURE__ */ Dodo.words(Data_Foldable.foldableArray);
var foldMap = /* #__PURE__ */ Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Dodo_Internal.monoidDoc);
var apply = /* #__PURE__ */ Control_Apply.apply(Data_Maybe.applyMaybe);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var mempty1 = /* #__PURE__ */ Data_Monoid.mempty(/* #__PURE__ */ Data_Monoid.monoidFn(Dodo_Internal.monoidDoc));
var forWithIndex_ = /* #__PURE__ */ Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_FoldableWithIndex.foldableWithIndexArray);
var toLines = /* #__PURE__ */ (function () {
    var $95 = map(Dodo.text);
    var $96 = Data_String_Common.split("\x0a");
    return function ($97) {
        return lines($95($96($97)));
    };
})();
var renderStatus = function (color) {
    return function (total) {
        return function (index) {
            return function (code) {
                return Dodo_Ansi.foreground(color)(Dodo.text("[" + (show(index) + ("/" + (show(total) + (" " + (code + "]")))))));
            };
        };
    };
};
var renderStatCols$prime = function (v) {
    var numOfRows = Data_Maybe.fromMaybe(0)(maximum(map(Data_Array.length)([ v.col1, v.col2, v.col3, v.col4 ])));
    var maxColWidth = (function () {
        var $98 = Data_Maybe.maybe(0)(function (v1) {
            return v1.width;
        });
        var $99 = maximumBy(comparing(function (v1) {
            return v1.width;
        }));
        return function ($100) {
            return $98($99($100));
        };
    })();
    var guttered = foldWithSeparator(Dodo.text("   "));
    var col4Width = maxColWidth(v.col4);
    var col3Width = maxColWidth(v.col3);
    var col2Width = maxColWidth(v.col2);
    var col1Width = maxColWidth(v.col1);
    var buildColumn = function (column) {
        return function (colWidth) {
            return function (rowIdx) {
                return bind(Data_Array.index(column)(rowIdx))(function (v1) {
                    var padding = colWidth - v1.width | 0;
                    var padText = Dodo.text(power(" ")(padding));
                    var $55 = padding === 0;
                    if ($55) {
                        return pure(v1.doc);
                    };
                    if (v1.alignLeft) {
                        return pure(append1(v1.doc)(padText));
                    };
                    return pure(append1(padText)(v1.doc));
                });
            };
        };
    };
    var buildRow = function (rowIdx) {
        return discard1(guard(rowIdx !== numOfRows))(function () {
            return bind(buildColumn(v.col1)(col1Width)(rowIdx))(function (c1) {
                return bind(buildColumn(v.col2)(col2Width)(rowIdx))(function (c2) {
                    return bind(buildColumn(v.col3)(col3Width)(rowIdx))(function (c3) {
                        return bind(buildColumn(v.col4)(col4Width)(rowIdx))(function (c4) {
                            return pure(Data_Function.flip(Data_Tuple.Tuple.create)(rowIdx + 1 | 0)(guttered([ c1, c2, c3, c4 ])));
                        });
                    });
                });
            });
        });
    };
    var rows = Data_Function.flip(unfoldr)(0)(buildRow);
    return lines(rows);
};
var renderStatCols = function (columns) {
    return renderStatCols$prime({
        col1: Data_Array.cons({
            width: 0,
            alignLeft: true,
            doc: mempty
        })(columns.col1),
        col2: Data_Array.cons({
            width: 3,
            alignLeft: true,
            doc: Dodo.text("Src")
        })(columns.col2),
        col3: Data_Array.cons({
            width: 3,
            alignLeft: true,
            doc: Dodo.text("Lib")
        })(columns.col3),
        col4: Data_Array.cons({
            width: 3,
            alignLeft: true,
            doc: Dodo.text("All")
        })(columns.col4)
    });
};
var renderStat = function (v) {
    if (v.value0 === 0 && v.value1 === 0) {
        return {
            width: 1,
            alignLeft: false,
            doc: Dodo_Ansi.foreground(Ansi_Codes.BrightGreen.value)(Dodo.text("0"))
        };
    };
    if (v.value0 === v.value1) {
        var aText = show(v.value0);
        return {
            width: Data_String_CodePoints.length(aText),
            alignLeft: false,
            doc: Dodo.text(aText)
        };
    };
    if (Data_Boolean.otherwise) {
        var aText = show(v.value0);
        var bText = show(v.value1);
        var width = (1 + Data_String_CodePoints.length(aText) | 0) + Data_String_CodePoints.length(bText) | 0;
        return {
            width: width,
            alignLeft: false,
            doc: fold([ Dodo.text(aText), Dodo_Ansi.dim(Dodo.text("/")), Dodo.text(bText) ])
        };
    };
    throw new Error("Failed pattern match at Spago.Psa.Printer (line 232, column 1 - line 232, column 41): " + [ v.constructor.name ]);
};
var renderStats = function (stats) {
    var sumRatio = function (v) {
        return function (v1) {
            return function (v2) {
                return new Data_Tuple.Tuple(v.value0 + v2.value0 | 0, v.value1 + v2.value1 | 0);
            };
        };
    };
    var srcWarnings = Foreign_Object.fold(sumRatio)(new Data_Tuple.Tuple(0, 0))(stats.srcWarnings);
    var srcErrors = Foreign_Object.fold(sumRatio)(new Data_Tuple.Tuple(0, 0))(stats.srcErrors);
    var renderLabel = function (color) {
        return function (lbl) {
            return {
                width: Data_String_CodePoints.length(lbl),
                alignLeft: true,
                doc: Dodo_Ansi.foreground(color)(Dodo.text(lbl))
            };
        };
    };
    var libWarnings = Foreign_Object.fold(sumRatio)(new Data_Tuple.Tuple(0, 0))(stats.libWarnings);
    var libErrors = Foreign_Object.fold(sumRatio)(new Data_Tuple.Tuple(0, 0))(stats.libErrors);
    var allWarnings = Foreign_Object.fold(sumRatio)(new Data_Tuple.Tuple(0, 0))(stats.allWarnings);
    var allErrors = Foreign_Object.fold(sumRatio)(new Data_Tuple.Tuple(0, 0))(stats.allErrors);
    return renderStatCols({
        col1: [ renderLabel(Ansi_Codes.BrightYellow.value)("Warnings"), renderLabel(Ansi_Codes.BrightRed.value)("Errors") ],
        col2: [ renderStat(srcWarnings), renderStat(srcErrors) ],
        col3: [ renderStat(libWarnings), renderStat(libErrors) ],
        col4: [ renderStat(allWarnings), renderStat(allErrors) ]
    });
};
var renderVerboseStats = function (stats) {
    var warnings = sort(Foreign_Object.keys(stats.allWarnings));
    var renderLabel = function (color) {
        return function (lbl) {
            return {
                width: Data_String_CodePoints.length(lbl),
                alignLeft: true,
                doc: Dodo_Ansi.foreground(color)(Dodo.text(lbl))
            };
        };
    };
    var warningLabels = map(renderLabel(Ansi_Codes.BrightYellow.value))(warnings);
    var getStat = function (key) {
        return function (x) {
            return Data_Maybe.fromMaybe(new Data_Tuple.Tuple(0, 0))(Foreign_Object.lookup(key)(x));
        };
    };
    var getStats = function (ks) {
        return function (x) {
            return map(function (k) {
                return renderStat(getStat(k)(x));
            })(ks);
        };
    };
    var libWarnings = getStats(warnings)(stats.libWarnings);
    var srcWarnings = getStats(warnings)(stats.srcWarnings);
    var errors = sort(Foreign_Object.keys(stats.allErrors));
    var libErrors = getStats(errors)(stats.libErrors);
    var srcErrors = getStats(errors)(stats.srcErrors);
    var errorLabels = map(renderLabel(Ansi_Codes.BrightRed.value))(errors);
    var allWarnings = getStats(warnings)(stats.allWarnings);
    var allErrors = getStats(errors)(stats.allErrors);
    return renderStatCols({
        col1: append2(warningLabels)(errorLabels),
        col2: append2(srcWarnings)(srcErrors),
        col3: append2(libWarnings)(libErrors),
        col4: append2(allWarnings)(allErrors)
    });
};
var renderPosition = function (pos) {
    return fold([ Dodo_Ansi.dim(Dodo.text(":")), Dodo.text(show(pos.startLine)), Dodo_Ansi.dim(Dodo.text(":")), Dodo.text(show(pos.startColumn)) ]);
};
var renderModuleName = function (v) {
    if (v instanceof Data_Maybe.Nothing) {
        return Dodo_Ansi.dim(Dodo.text("(unknown module)"));
    };
    if (v instanceof Data_Maybe.Just) {
        return Dodo.text(v.value0);
    };
    throw new Error("Failed pattern match at Spago.Psa.Printer (line 99, column 1 - line 99, column 61): " + [ v.constructor.name ]);
};
var renderPath = function (v) {
    return function (v1) {
        if (v instanceof Spago_Psa_Types.Src) {
            return Dodo.text(v.value0);
        };
        if (v instanceof Spago_Psa_Types.Lib) {
            return Dodo.text(v.value0);
        };
        return renderModuleName(v1);
    };
};
var renderErrorTick = function (start) {
    return function ($$char) {
        return fold([ Dodo.text(power(" ")(start - 1 | 0)), Dodo_Ansi.foreground(Ansi_Codes.BrightRed.value)(Dodo.text($$char)) ]);
    };
};
var renderErrorRange = function (start) {
    return function (len) {
        return fold([ Dodo.text(power(" ")(start - 1 | 0)), Dodo_Ansi.foreground(Ansi_Codes.BrightRed.value)(Dodo.text(power("^")(len))) ]);
    };
};
var renderAnnotation = function (offset) {
    return function (pos) {
        return function (lines1) {
            return lines((function () {
                if (lines1.length === 1) {
                    return [ lines1[0], renderErrorRange(pos.startColumn + offset | 0)(pos.endColumn - pos.startColumn | 0) ];
                };
                return [ renderErrorTick(pos.startColumn + offset | 0)("v"), lines(lines1), renderErrorTick((pos.endColumn + offset | 0) - 1 | 0)("^") ];
            })());
        };
    };
};
var printJsonOutputToOut = function (output) {
    var result = Data_Codec.encode(Spago_Psa_Types.psaResultCodec)({
        warnings: map(function (v) {
            return v.error;
        })(output.warnings),
        errors: map(function (v) {
            return v.error;
        })(output.errors)
    });
    return Effect_Console.log(Data_Argonaut_Core.stringify(result));
};
var padLeft = function (width) {
    return function (str) {
        return power(" ")(width - Data_String_CodePoints.length(str) | 0) + str;
    };
};
var sourceLine = function (gutter) {
    return function (sep) {
        return function (num) {
            return function (code) {
                return fold([ Dodo_Ansi.dim(Dodo.text(padLeft(gutter)(show(num)) + sep)), Dodo.text(code) ]);
            };
        };
    };
};
var renderSource = function (pos) {
    return function (lines1) {
        var lineNums = Data_Array.range(pos.startLine)(pos.endLine);
        var gutter = Data_String_CodePoints.length(show(pos.endLine));
        var source = map(Data_Tuple.uncurry(sourceLine(gutter)("  ")))(Data_Array.zip(lineNums)(lines1));
        var source$prime = (function () {
            var $84 = Data_Array.length(source) > 7;
            if ($84) {
                return append2(Data_Array.take(3)(source))(append2([ append1(Dodo.text(power(" ")(gutter + 2 | 0)))(Dodo_Ansi.dim(Dodo.text("..."))) ])(Data_Array.drop(Data_Array.length(source) - 3 | 0)(source)));
            };
            return source;
        })();
        return renderAnnotation(gutter + 2 | 0)(pos)(source$prime);
    };
};
var renderSource$prime = function (pos) {
    return function (lines1) {
        return append1(renderSource(pos)(lines1))(Dodo["break"]);
    };
};
var renderWrapper = function (color) {
    return function (total) {
        return function (index) {
            return function (v) {
                return foldWithSeparator(append1(Dodo["break"])(Dodo["break"]))([ words([ renderStatus(color)(total)(index)(v.error.errorCode), append1(renderPath(v.path)(v.error.moduleName))(foldMap(renderPosition)(v.position)) ]), Dodo.indent(lines([ Data_Maybe.fromMaybe(mempty)(apply(map1(renderSource$prime)(v.position))(v.source)), toLines(v.message) ])) ]);
            };
        };
    };
};
var renderError = /* #__PURE__ */ (function () {
    return renderWrapper(Ansi_Codes.BrightRed.value);
})();
var renderWarning = /* #__PURE__ */ (function () {
    return renderWrapper(Ansi_Codes.BrightYellow.value);
})();
var printDefaultOutputToErr = function (options) {
    return function (output) {
        var renderStats$prime = (function () {
            if (options.statVerbosity instanceof Spago_Core_Config.NoStats) {
                return mempty1;
            };
            if (options.statVerbosity instanceof Spago_Core_Config.CompactStats) {
                return renderStats;
            };
            if (options.statVerbosity instanceof Spago_Core_Config.VerboseStats) {
                return renderVerboseStats;
            };
            throw new Error("Failed pattern match at Spago.Psa.Printer (line 68, column 18 - line 71, column 44): " + [ options.statVerbosity.constructor.name ]);
        })();
        var printDoc = (function () {
            if (options.color) {
                return Dodo.print(Dodo_Ansi.ansiGraphics)(Dodo.twoSpaces);
            };
            if (Data_Boolean.otherwise) {
                return Dodo.print(Dodo.plainText)(Dodo.twoSpaces);
            };
            throw new Error("Failed pattern match at Spago.Psa.Printer (line 63, column 3 - line 65, column 50): " + [  ]);
        })();
        var lenWarnings = Data_Array.length(output.warnings);
        var lenErrors = Data_Array.length(output.errors);
        return function __do() {
            forWithIndex_(output.warnings)(function (i) {
                return function (warning) {
                    return function __do() {
                        Effect_Console.error(printDoc(renderWarning(lenWarnings)(i + 1 | 0)(warning)))();
                        return Effect_Console.error("")();
                    };
                };
            })();
            forWithIndex_(output.errors)(function (i) {
                return function (error) {
                    return function __do() {
                        Effect_Console.error(printDoc(renderError(lenErrors)(i + 1 | 0)(error)))();
                        return Effect_Console.error("")();
                    };
                };
            })();
            return Effect_Console.error(printDoc(renderStats$prime(output.stats)))();
        };
    };
};
export {
    renderWarning,
    renderError,
    renderStats,
    renderVerboseStats,
    printDefaultOutputToErr,
    printJsonOutputToOut
};
//# sourceMappingURL=index.js.map
