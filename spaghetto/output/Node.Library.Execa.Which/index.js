// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Rec_Class from "../Control.Monad.Rec.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_NonEmpty from "../Data.Array.NonEmpty/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_String_Regex from "../Data.String.Regex/index.js";
import * as Data_String_Regex_Flags from "../Data.String.Regex.Flags/index.js";
import * as Data_String_Regex_Unsafe from "../Data.String.Regex.Unsafe/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Foreign_Object from "../Foreign.Object/index.js";
import * as Node_Library_Execa_IsExe from "../Node.Library.Execa.IsExe/index.js";
import * as Node_Library_Execa_Utils from "../Node.Library.Execa.Utils/index.js";
import * as Node_Path from "../Node.Path/index.js";
import * as Node_Platform from "../Node.Platform/index.js";
import * as Node_Process from "../Node.Process/index.js";
var eq = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Maybe.eqMaybe(Data_Eq.eqString));
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect.applicativeEffect);
var eq1 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Maybe.eqMaybe(Node_Platform.eqPlatform));
var alt = /* #__PURE__ */ Control_Alt.alt(Data_Maybe.altMaybe);
var buildCustomError = /* #__PURE__ */ Node_Library_Execa_Utils.buildCustomError()();
var fromJust = /* #__PURE__ */ Data_Maybe.fromJust();
var bind1 = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(Effect_Aff.applicativeAff);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
var tailRecM = /* #__PURE__ */ Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEffect);
var quotedRegex = /* #__PURE__ */ (function () {
    return Data_String_Regex_Unsafe.unsafeRegex("^" + ("\"" + (".*" + ("\"" + "$"))))(Data_String_Regex_Flags.noFlags);
})();
var isWindows = function __do() {
    var env = Node_Process.getEnv();
    var osTypeIs = function (x) {
        return eq(new Data_Maybe.Just(x))(Foreign_Object.lookup("OSTYPE")(env));
    };
    return eq1(Node_Process.platform)(new Data_Maybe.Just(Node_Platform.Win32.value)) || (osTypeIs("cygwin") || osTypeIs("msys"));
};
var jsColon = function __do() {
    var w = isWindows();
    if (w) {
        return ";";
    };
    return ":";
};
var getPathInfo = function (cmd) {
    return function (options) {
        var hasWindowsSlashRegex = Data_String_Regex_Unsafe.unsafeRegex("\\\\")(Data_String_Regex_Flags.noFlags);
        var hasPosixSlashRegex = Data_String_Regex_Unsafe.unsafeRegex("\\/")(Data_String_Regex_Flags.noFlags);
        return function __do() {
            var cwd = Node_Process.cwd();
            var mbPath = Node_Process.lookupEnv("PATH")();
            var mbPathExt = Node_Process.lookupEnv("PATHEXT")();
            var isWin = isWindows();
            var colon = (function () {
                if (options.colon instanceof Data_Maybe.Nothing) {
                    return jsColon();
                };
                if (options.colon instanceof Data_Maybe.Just) {
                    return options.colon.value0;
                };
                throw new Error("Failed pattern match at Node.Library.Execa.Which (line 79, column 12 - line 81, column 21): " + [ options.colon.constructor.name ]);
            })();
            var pathExtExe = (function () {
                if (isWin) {
                    return Data_Maybe.fromMaybe(".EXE;.CMD;.BAT;.exe;.cmd;.bat")(alt(options.pathExt)(mbPathExt));
                };
                if (Data_Boolean.otherwise) {
                    return "";
                };
                throw new Error("Failed pattern match at Node.Library.Execa.Which (line 94, column 5 - line 98, column 23): " + [  ]);
            })();
            var pathExt = (function () {
                if (isWin) {
                    return Data_String_Common.split(colon)(pathExtExe);
                };
                if (Data_Boolean.otherwise) {
                    return [ "" ];
                };
                throw new Error("Failed pattern match at Node.Library.Execa.Which (line 100, column 5 - line 102, column 27): " + [  ]);
            })();
            var pathEnv = (function () {
                if (Data_String_Regex.test(hasPosixSlashRegex)(cmd) || isWin && Data_String_Regex.test(hasWindowsSlashRegex)(cmd)) {
                    return [ "" ];
                };
                if (Data_Boolean.otherwise) {
                    var paths = Data_String_Common.split(colon)(Data_Maybe.fromMaybe("")(alt(options.path)(mbPath)));
                    if (isWin) {
                        return Data_Array.cons(cwd)(paths);
                    };
                    return paths;
                };
                throw new Error("Failed pattern match at Node.Library.Execa.Which (line 86, column 5 - line 92, column 56): " + [  ]);
            })();
            return {
                pathEnv: pathEnv,
                pathExt: pathExt,
                pathExtExe: pathExtExe
            };
        };
    };
};
var getNotFoundError = function (cmd) {
    return buildCustomError("not found: " + cmd)({
        code: "ENOENT"
    });
};
var dotSlashRegex = /* #__PURE__ */ Data_String_Regex_Unsafe.unsafeRegex("^\\.[\\/]")(Data_String_Regex_Flags.noFlags);
var which = function (cmd) {
    return function (options) {
        var go = function (pathEnv) {
            return function (pathExt) {
                return function (pathExtExe) {
                    var pathExtLen = Data_Array.length(pathExt);
                    var pathEnvLen = Data_Array.length(pathEnv);
                    var subStep = function (found) {
                        return function (p) {
                            return function (i) {
                                return function (ii) {
                                    if (ii === pathExtLen) {
                                        return step(found)(i + 1 | 0);
                                    };
                                    if (Data_Boolean.otherwise) {
                                        var ext = fromJust(Data_Array.index(pathExt)(ii));
                                        var pExt = p + ext;
                                        return bind1(Node_Library_Execa_IsExe.isExe(pExt)({
                                            pathExt: new Data_Maybe.Just(pathExtExe),
                                            uid: Node_Library_Execa_IsExe.defaultIsExeOptions.uid,
                                            gid: Node_Library_Execa_IsExe.defaultIsExeOptions.gid,
                                            ignoreErrors: Node_Library_Execa_IsExe.defaultIsExeOptions.ignoreErrors
                                        }))(function (v) {
                                            var $46 = Data_Maybe.isNothing(v.value0) && v.value1;
                                            if ($46) {
                                                if (options.all) {
                                                    return subStep(Data_Array.snoc(found)(pExt))(p)(i)(ii + 1 | 0);
                                                };
                                                return pure1(new Data_Either.Right(Data_Array_NonEmpty.singleton(pExt)));
                                            };
                                            return subStep(found)(p)(i)(ii + 1 | 0);
                                        });
                                    };
                                    throw new Error("Failed pattern match at Node.Library.Execa.Which (line 135, column 5 - line 148, column 39): " + [ found.constructor.name, p.constructor.name, i.constructor.name, ii.constructor.name ]);
                                };
                            };
                        };
                    };
                    var step = function (found) {
                        return function (i) {
                            if (i === pathEnvLen) {
                                return pure1(Data_Either.note(getNotFoundError(cmd))(Data_Array_NonEmpty.fromArray(found)));
                            };
                            if (Data_Boolean.otherwise) {
                                var ppRaw = fromJust(Data_Array.index(pathEnv)(i));
                                var pathPart = (function () {
                                    if (Data_String_Regex.test(quotedRegex)(ppRaw)) {
                                        return Data_String_CodeUnits.slice(1)(-1 | 0)(ppRaw);
                                    };
                                    if (Data_Boolean.otherwise) {
                                        return ppRaw;
                                    };
                                    throw new Error("Failed pattern match at Node.Library.Execa.Which (line 125, column 13 - line 127, column 34): " + [  ]);
                                })();
                                var pCmd = Node_Path.concat([ pathPart, cmd ]);
                                var p = (function () {
                                    var v = function (v1) {
                                        if (Data_Boolean.otherwise) {
                                            return pCmd;
                                        };
                                        throw new Error("Failed pattern match at Node.Library.Execa.Which (line 108, column 1 - line 108, column 102): " + [  ]);
                                    };
                                    var $52 = !Data_String_Common["null"](pathPart);
                                    if ($52) {
                                        var $53 = Data_String_Regex.test(dotSlashRegex)(cmd);
                                        if ($53) {
                                            return Data_String_CodeUnits.slice(0)(2)(cmd) + pCmd;
                                        };
                                        return v(true);
                                    };
                                    return v(true);
                                })();
                                return subStep(found)(p)(i)(0);
                            };
                            throw new Error("Failed pattern match at Node.Library.Execa.Which (line 118, column 5 - line 118, column 102): " + [ found.constructor.name, i.constructor.name ]);
                        };
                    };
                    return step([  ])(0);
                };
            };
        };
        return bind1(liftEffect(getPathInfo(cmd)(options)))(function (v) {
            return go(v.pathEnv)(v.pathExt)(v.pathExtExe);
        });
    };
};
var whichSync = function (cmd) {
    return function (options) {
        var go = function (pathEnv) {
            return function (pathExt) {
                return function (pathExtExe) {
                    var loop = function (v) {
                        if (v.innerLoop instanceof Data_Maybe.Nothing) {
                            var v1 = Data_Array.index(pathEnv)(v.outerLoopIdx);
                            if (v1 instanceof Data_Maybe.Nothing) {
                                return pure(new Control_Monad_Rec_Class.Done(new Data_Either.Left(getNotFoundError(cmd))));
                            };
                            if (v1 instanceof Data_Maybe.Just) {
                                var pathPart = (function () {
                                    if (Data_String_Regex.test(quotedRegex)(v1.value0)) {
                                        return Data_String_CodeUnits.slice(1)(-1 | 0)(v1.value0);
                                    };
                                    if (Data_Boolean.otherwise) {
                                        return v1.value0;
                                    };
                                    throw new Error("Failed pattern match at Node.Library.Execa.Which (line 165, column 15 - line 167, column 36): " + [  ]);
                                })();
                                var pCmd = Node_Path.concat([ pathPart, cmd ]);
                                var p = (function () {
                                    var v2 = function (v3) {
                                        if (Data_Boolean.otherwise) {
                                            return pCmd;
                                        };
                                        throw new Error("Failed pattern match at Node.Library.Execa.Which (line 150, column 1 - line 150, column 109): " + [  ]);
                                    };
                                    var $61 = !Data_String_Common["null"](pathPart);
                                    if ($61) {
                                        var $62 = Data_String_Regex.test(dotSlashRegex)(cmd);
                                        if ($62) {
                                            return Data_String_CodeUnits.slice(0)(2)(cmd) + pCmd;
                                        };
                                        return v2(true);
                                    };
                                    return v2(true);
                                })();
                                return pure(new Control_Monad_Rec_Class.Loop({
                                    innerLoop: new Data_Maybe.Just({
                                        p: p,
                                        j: 0
                                    }),
                                    found: v.found,
                                    outerLoopIdx: v.outerLoopIdx
                                }));
                            };
                            throw new Error("Failed pattern match at Node.Library.Execa.Which (line 160, column 20 - line 173, column 63): " + [ v1.constructor.name ]);
                        };
                        if (v.innerLoop instanceof Data_Maybe.Just) {
                            var v1 = Data_Array.index(pathExt)(v.innerLoop.value0.j);
                            if (v1 instanceof Data_Maybe.Nothing) {
                                return pure(new Control_Monad_Rec_Class.Loop({
                                    outerLoopIdx: v.outerLoopIdx + 1 | 0,
                                    innerLoop: Data_Maybe.Nothing.value,
                                    found: v.found
                                }));
                            };
                            if (v1 instanceof Data_Maybe.Just) {
                                var cur = v.innerLoop.value0.p + v1.value0;
                                return function __do() {
                                    var eOrB = Node_Library_Execa_IsExe.isExeSync(cur)({
                                        pathExt: new Data_Maybe.Just(pathExtExe),
                                        uid: Node_Library_Execa_IsExe.defaultIsExeOptions.uid,
                                        gid: Node_Library_Execa_IsExe.defaultIsExeOptions.gid,
                                        ignoreErrors: Node_Library_Execa_IsExe.defaultIsExeOptions.ignoreErrors
                                    })();
                                    if (eOrB instanceof Data_Either.Right) {
                                        if (eOrB.value0 && !options.all) {
                                            return new Control_Monad_Rec_Class.Done(new Data_Either.Right(Data_Array_NonEmpty.singleton(cur)));
                                        };
                                        if (eOrB.value0) {
                                            return new Control_Monad_Rec_Class.Loop({
                                                found: Data_Array.snoc(v.found)(cur),
                                                innerLoop: new Data_Maybe.Just({
                                                    p: v.innerLoop.value0.p,
                                                    j: v.innerLoop.value0.j + 1 | 0
                                                }),
                                                outerLoopIdx: v.outerLoopIdx
                                            });
                                        };
                                    };
                                    return new Control_Monad_Rec_Class.Loop({
                                        innerLoop: new Data_Maybe.Just({
                                            p: v.innerLoop.value0.p,
                                            j: v.innerLoop.value0.j + 1 | 0
                                        }),
                                        found: v.found,
                                        outerLoopIdx: v.outerLoopIdx
                                    });
                                };
                            };
                            throw new Error("Failed pattern match at Node.Library.Execa.Which (line 176, column 26 - line 189, column 71): " + [ v1.constructor.name ]);
                        };
                        throw new Error("Failed pattern match at Node.Library.Execa.Which (line 158, column 7 - line 189, column 71): " + [ v.innerLoop.constructor.name ]);
                    };
                    return tailRecM(loop)({
                        found: [  ],
                        outerLoopIdx: 0,
                        innerLoop: Data_Maybe.Nothing.value
                    });
                };
            };
        };
        return function __do() {
            var v = getPathInfo(cmd)(options)();
            return go(v.pathEnv)(v.pathExt)(v.pathExtExe)();
        };
    };
};
var defaultWhichOptions = /* #__PURE__ */ (function () {
    return {
        path: Data_Maybe.Nothing.value,
        pathExt: Data_Maybe.Nothing.value,
        colon: Data_Maybe.Nothing.value,
        all: false
    };
})();
export {
    isWindows,
    jsColon,
    defaultWhichOptions,
    getNotFoundError,
    getPathInfo,
    which,
    whichSync,
    quotedRegex,
    dotSlashRegex
};
//# sourceMappingURL=index.js.map
