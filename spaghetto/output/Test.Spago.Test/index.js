// Generated by purs version 0.15.10
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Registry_PackageName from "../Registry.PackageName/index.js";
import * as Spago_Command_Init from "../Spago.Command.Init/index.js";
import * as Spago_Core_Config from "../Spago.Core.Config/index.js";
import * as Spago_FS from "../Spago.FS/index.js";
import * as Spago_Prelude from "../Spago.Prelude/index.js";
import * as Test_Prelude from "../Test.Prelude/index.js";
import * as Test_Spec from "../Test.Spec/index.js";
import * as Test_Spec_Assertions from "../Test.Spec.Assertions/index.js";
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var discard1 = /* #__PURE__ */ discard(/* #__PURE__ */ Test_Spec.bindSpecT(Data_Identity.bindIdentity));
var it = /* #__PURE__ */ Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleFunc);
var discard2 = /* #__PURE__ */ discard(Effect_Aff.bindAff);
var bind = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var moveSync = /* #__PURE__ */ Spago_FS.moveSync(Effect_Aff.monadEffectAff);
var mkdirp = /* #__PURE__ */ Spago_FS.mkdirp(Effect_Aff_Class.monadAffAff);
var writeTextFile = /* #__PURE__ */ Spago_FS.writeTextFile(Effect_Aff_Class.monadAffAff);
var shouldReturn = /* #__PURE__ */ Test_Spec_Assertions.shouldReturn(Effect_Aff.monadThrowAff)(Data_Eq.eqBoolean)(Data_Show.showBoolean);
var exists = /* #__PURE__ */ Spago_FS.exists(Effect_Aff.monadEffectAff);
var spec = /* #__PURE__ */ Test_Spec.around(Data_Identity.monadIdentity)(Test_Prelude.withTempDir)(/* #__PURE__ */ Test_Spec.describe(Data_Identity.monadIdentity)("test")(/* #__PURE__ */ discard1(/* #__PURE__ */ it("tests successfully")(function (v) {
    return discard2(bind(v.spago([ "init", "--name", "7368613235362d6a336156536c675a7033334e7659556c6d38" ]))(Test_Prelude.shouldBeSuccess))(function () {
        return discard2(bind(v.spago([ "build" ]))(Test_Prelude.shouldBeSuccess))(function () {
            return bind(v.spago([ "test" ]))(Test_Prelude.shouldBeSuccessOutputWithErr(v.fixture("test-output-stdout.txt"))(v.fixture("test-output-stderr.txt")));
        });
    });
}))(function () {
    return discard1(it("fails nicely when the test module is not found")(function (v) {
        return discard2(bind(v.spago([ "init", "--name", "7368613235362d6a336156536c675a7033334e7659556c6d38" ]))(Test_Prelude.shouldBeSuccess))(function () {
            return discard2(bind(v.spago([ "build" ]))(Test_Prelude.shouldBeSuccess))(function () {
                return discard2(moveSync({
                    dst: "test2",
                    src: "test"
                }))(function () {
                    return bind(v.spago([ "test" ]))(Test_Prelude.shouldBeFailureErr(v.fixture("test-missing-module.txt")));
                });
            });
        });
    }))(function () {
        return discard1(it("runs tests from a sub-package")(function (v) {
            return discard2(bind(v.spago([ "init" ]))(Test_Prelude.shouldBeSuccess))(function () {
                return discard2(mkdirp("subpackage/src"))(function () {
                    return discard2(mkdirp("subpackage/test"))(function () {
                        return discard2(writeTextFile("subpackage/src/Main.purs")(Spago_Command_Init.srcMainTemplate("Subpackage.Main")))(function () {
                            return discard2(writeTextFile("subpackage/test/Main.purs")(Spago_Command_Init.testMainTemplate("Subpackage.Test.Main")))(function () {
                                return discard2(Spago_FS.writeYamlFile(Spago_Core_Config.configCodec)("subpackage/spago.yaml")(Spago_Command_Init.defaultConfig(Spago_Prelude.unsafeFromRight(Registry_PackageName.parse("subpackage")))(Data_Maybe.Nothing.value)("Subpackage.Test.Main")))(function () {
                                    return bind(v.spago([ "test", "-p", "subpackage" ]))(Test_Prelude.shouldBeSuccess);
                                });
                            });
                        });
                    });
                });
            });
        }))(function () {
            return discard1(it("fails when running tests from a sub-package, where the module does not exist")(function (v) {
                return discard2(bind(v.spago([ "init" ]))(Test_Prelude.shouldBeSuccess))(function () {
                    return discard2(mkdirp("subpackage/src"))(function () {
                        return discard2(mkdirp("subpackage/test"))(function () {
                            return discard2(writeTextFile("subpackage/src/Main.purs")(Spago_Command_Init.srcMainTemplate("Subpackage.Main")))(function () {
                                return discard2(writeTextFile("subpackage/test/Main.purs")(Spago_Command_Init.testMainTemplate("Subpackage.Test.Main2")))(function () {
                                    return discard2(Spago_FS.writeYamlFile(Spago_Core_Config.configCodec)("subpackage/spago.yaml")(Spago_Command_Init.defaultConfig(Spago_Prelude.unsafeFromRight(Registry_PackageName.parse("subpackage")))(Data_Maybe.Nothing.value)("Subpackage.Test.Main")))(function () {
                                        return bind(v.spago([ "test", "-p", "subpackage" ]))(Test_Prelude.shouldBeFailure);
                                    });
                                });
                            });
                        });
                    });
                });
            }))(function () {
                return it("Spago should test in custom output folder")(function (v) {
                    return discard2(bind(v.spago([ "init" ]))(Test_Prelude.shouldBeSuccess))(function () {
                        return discard2(bind(v.spago([ "test", "--output", "myOutput" ]))(Test_Prelude.shouldBeSuccess))(function () {
                            return shouldReturn(exists("myOutput"))(true);
                        });
                    });
                });
            });
        });
    });
})));
export {
    spec
};
