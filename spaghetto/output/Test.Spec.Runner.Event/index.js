// Generated by purs version 0.15.10
import * as Data_Show from "../Data.Show/index.js";
import * as Test_Spec_Result from "../Test.Spec.Result/index.js";
import * as Test_Spec_Tree from "../Test.Spec.Tree/index.js";
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var show1 = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Show.showArray(Test_Spec_Tree.showIdTerm));
var show2 = /* #__PURE__ */ Data_Show.show(Test_Spec_Result.showResult);
var show3 = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Show.showArray(/* #__PURE__ */ Test_Spec_Tree.showGroup(Data_Show.showVoid)(Test_Spec_Result.showResult)));
var Parallel = /* #__PURE__ */ (function () {
    function Parallel() {

    };
    Parallel.value = new Parallel();
    return Parallel;
})();
var Sequential = /* #__PURE__ */ (function () {
    function Sequential() {

    };
    Sequential.value = new Sequential();
    return Sequential;
})();
var Start = /* #__PURE__ */ (function () {
    function Start(value0) {
        this.value0 = value0;
    };
    Start.create = function (value0) {
        return new Start(value0);
    };
    return Start;
})();
var Suite = /* #__PURE__ */ (function () {
    function Suite(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Suite.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Suite(value0, value1, value2);
            };
        };
    };
    return Suite;
})();
var SuiteEnd = /* #__PURE__ */ (function () {
    function SuiteEnd(value0) {
        this.value0 = value0;
    };
    SuiteEnd.create = function (value0) {
        return new SuiteEnd(value0);
    };
    return SuiteEnd;
})();
var Test = /* #__PURE__ */ (function () {
    function Test(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Test.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Test(value0, value1, value2);
            };
        };
    };
    return Test;
})();
var TestEnd = /* #__PURE__ */ (function () {
    function TestEnd(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TestEnd.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TestEnd(value0, value1, value2);
            };
        };
    };
    return TestEnd;
})();
var Pending = /* #__PURE__ */ (function () {
    function Pending(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Pending.create = function (value0) {
        return function (value1) {
            return new Pending(value0, value1);
        };
    };
    return Pending;
})();
var End = /* #__PURE__ */ (function () {
    function End(value0) {
        this.value0 = value0;
    };
    End.create = function (value0) {
        return new End(value0);
    };
    return End;
})();
var showExecution = {
    show: function (v) {
        if (v instanceof Parallel) {
            return "Parallel";
        };
        if (v instanceof Sequential) {
            return "Sequential";
        };
        throw new Error("Failed pattern match at Test.Spec.Runner.Event (line 14, column 10 - line 16, column 31): " + [ v.constructor.name ]);
    }
};
var show4 = /* #__PURE__ */ Data_Show.show(showExecution);
var showEvent = {
    show: function (v) {
        if (v instanceof Start) {
            return "Start " + show(v.value0);
        };
        if (v instanceof Suite) {
            return "Suite " + (show4(v.value0) + (show1(v.value1) + (": " + v.value2)));
        };
        if (v instanceof SuiteEnd) {
            return "SuiteEnd " + show1(v.value0);
        };
        if (v instanceof Test) {
            return "Test " + (show4(v.value0) + (show1(v.value1) + (" " + v.value2)));
        };
        if (v instanceof TestEnd) {
            return "TestEnd " + (show1(v.value0) + (" " + (v.value1 + (": " + show2(v.value2)))));
        };
        if (v instanceof Pending) {
            return "Pending " + (show1(v.value0) + (" " + v.value1));
        };
        if (v instanceof End) {
            return "End " + show3(v.value0);
        };
        throw new Error("Failed pattern match at Test.Spec.Runner.Event (line 28, column 10 - line 35, column 42): " + [ v.constructor.name ]);
    }
};
export {
    Parallel,
    Sequential,
    Start,
    Suite,
    SuiteEnd,
    Test,
    TestEnd,
    Pending,
    End,
    showExecution,
    showEvent
};
//# sourceMappingURL=index.js.map
