// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Control_Alternative from "../Control.Alternative/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_NonEmpty from "../Data.Array.NonEmpty/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_String_Regex from "../Data.String.Regex/index.js";
import * as Data_String_Regex_Flags from "../Data.String.Regex.Flags/index.js";
import * as Data_String_Regex_Unsafe from "../Data.String.Regex.Unsafe/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Foreign_Object from "../Foreign.Object/index.js";
import * as Node_Buffer from "../Node.Buffer/index.js";
import * as Node_Buffer_Class from "../Node.Buffer.Class/index.js";
import * as Node_Encoding from "../Node.Encoding/index.js";
import * as Node_FS_Constants from "../Node.FS.Constants/index.js";
import * as Node_FS_Sync from "../Node.FS.Sync/index.js";
import * as Node_Library_Execa_ShebangCommand from "../Node.Library.Execa.ShebangCommand/index.js";
import * as Node_Library_Execa_Utils from "../Node.Library.Execa.Utils/index.js";
import * as Node_Library_Execa_Which from "../Node.Library.Execa.Which/index.js";
import * as Node_Path from "../Node.Path/index.js";
import * as Node_Platform from "../Node.Platform/index.js";
import * as Node_Process from "../Node.Process/index.js";
var for_ = /* #__PURE__ */ Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe);
var applySecond = /* #__PURE__ */ Control_Apply.applySecond(Data_Maybe.applyMaybe);
var guard = /* #__PURE__ */ Control_Alternative.guard(Data_Maybe.alternativeMaybe);
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect.applicativeEffect);
var map = /* #__PURE__ */ Data_Functor.map(Effect.functorEffect);
var join = /* #__PURE__ */ Control_Bind.join(Data_Maybe.bindMaybe);
var $$for = /* #__PURE__ */ Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableMaybe);
var create = /* #__PURE__ */ Node_Buffer_Class.create(Node_Buffer.mutableBufferEffect);
var $$void = /* #__PURE__ */ Data_Functor["void"](Effect.functorEffect);
var toString = /* #__PURE__ */ Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect);
var append1 = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var voidLeft = /* #__PURE__ */ Data_Functor.voidLeft(Data_Functor.functorArray);
var guard1 = /* #__PURE__ */ Control_Alternative.guard(Control_Alternative.alternativeArray);
var intercalate = /* #__PURE__ */ Data_Array.intercalate(Data_Monoid.monoidString);
var mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(Data_Functor.functorArray);
var isWindows = /* #__PURE__ */ (function () {
    return Data_Eq.eq(Data_Maybe.eqMaybe(Node_Platform.eqPlatform))(Node_Process.platform)(new Data_Maybe.Just(Node_Platform.Win32.value));
})();
var parse = function (command) {
    return function (args) {
        return function (options) {
            var wrapInDoubleQuotes = function (s) {
                return "\"" + (s + "\"");
            };
            var resolveCommand = function (parseRec) {
                var withOptionsCwdIfNeeded = function (optionsCwd) {
                    var open = function __do() {
                        var cwd = Node_Process.cwd();
                        var hasChdir = $foreign.processHasChdir();
                        for_(applySecond(guard(hasChdir))(optionsCwd))(function (optionCwd) {
                            return Node_Process.chdir(optionCwd);
                        })();
                        return {
                            cwd: cwd,
                            hasChdir: hasChdir
                        };
                    };
                    var close = function (v) {
                        return for_(applySecond(guard(v.hasChdir))(optionsCwd))(function (v1) {
                            return Node_Process.chdir(v.cwd);
                        });
                    };
                    return Node_Library_Execa_Utils.bracketEffect(open)(close);
                };
                return function __do() {
                    var env = (function () {
                        if (parseRec.options.env instanceof Data_Maybe.Nothing) {
                            return Node_Process.getEnv();
                        };
                        if (parseRec.options.env instanceof Data_Maybe.Just) {
                            return parseRec.options.env.value0;
                        };
                        throw new Error("Failed pattern match at Node.Library.Execa.CrossSpawn (line 155, column 12 - line 157, column 23): " + [ parseRec.options.env.constructor.name ]);
                    })();
                    var resolved = withOptionsCwdIfNeeded(parseRec.options.cwd)(function (v) {
                        return map(join)($$for(Foreign_Object.lookup("PATH")(env))(function (envPath) {
                            var getFirst = Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(function ($61) {
                                return Data_Maybe.Just.create(Data_Array_NonEmpty.head($61));
                            });
                            return function __do() {
                                var attempt1 = map(getFirst)(Node_Library_Execa_Which.whichSync(command)({
                                    path: new Data_Maybe.Just(envPath),
                                    pathExt: new Data_Maybe.Just(Node_Path.delimiter),
                                    colon: Node_Library_Execa_Which.defaultWhichOptions.colon,
                                    all: Node_Library_Execa_Which.defaultWhichOptions.all
                                }))();
                                var $44 = Data_Maybe.isJust(attempt1);
                                if ($44) {
                                    return attempt1;
                                };
                                return map(getFirst)(Node_Library_Execa_Which.whichSync(command)({
                                    path: new Data_Maybe.Just(envPath),
                                    pathExt: Node_Library_Execa_Which.defaultWhichOptions.pathExt,
                                    colon: Node_Library_Execa_Which.defaultWhichOptions.colon,
                                    all: Node_Library_Execa_Which.defaultWhichOptions.all
                                }))();
                            };
                        }));
                    })();
                    if (parseRec.options.cwd instanceof Data_Maybe.Just && resolved instanceof Data_Maybe.Just) {
                        return map(Data_Maybe.Just.create)(Node_Path.resolve([ parseRec.options.cwd.value0 ])(resolved.value0))();
                    };
                    if (parseRec.options.cwd instanceof Data_Maybe.Nothing && resolved instanceof Data_Maybe.Just) {
                        return map(Data_Maybe.Just.create)(Node_Path.resolve([ "" ])(resolved.value0))();
                    };
                    return Data_Maybe.Nothing.value;
                };
            };
            var readShebang = function (cmd) {
                return function __do() {
                    var buf = create(150)();
                    $$void(Effect_Exception["try"](Node_Library_Execa_Utils.bracketEffect(Node_FS_Sync.fdOpen(cmd)(Node_FS_Constants.R.value)(Data_Maybe.Nothing.value))(Node_FS_Sync.fdClose)(function (fd) {
                        return Node_FS_Sync.fdRead(fd)(buf)(0)(150)(new Data_Maybe.Just(0));
                    })))();
                    var firstLine = toString(Node_Encoding.UTF8.value)(buf)();
                    return Node_Library_Execa_ShebangCommand.shebangCommand(firstLine);
                };
            };
            var metaCharsRegex = Data_String_Regex_Unsafe.unsafeRegex("([()\\][%!^\"`<>&|;, *?])")(Data_String_Regex_Flags.global);
            var isExecutableRegex = Data_String_Regex_Unsafe.unsafeRegex("\\.(?:com|exe)$")(Data_String_Regex_Flags.ignoreCase);
            var isCommandShimRegex = Data_String_Regex_Unsafe.unsafeRegex("node_modules[\\\\/].bin[\\\\/][^\\\\/]+\\.cmd$")(Data_String_Regex_Flags.ignoreCase);
            var initParseRec = {
                command: command,
                args: args,
                options: options,
                file: Data_Maybe.Nothing.value,
                original: {
                    command: command,
                    args: args
                }
            };
            var escapeCommand = Data_String_Regex.replace(metaCharsRegex)("^$1");
            var escapeArgument = function (doubleEscapeMetaChars) {
                var escapeCount = (function () {
                    if (doubleEscapeMetaChars) {
                        return 2;
                    };
                    return 1;
                })();
                var endOfStringRegex = Data_String_Regex_Unsafe.unsafeRegex("(\\\\*)$")(Data_String_Regex_Flags.noFlags);
                var backSlashSequenceThenDoubleQuoteRegex = Data_String_Regex_Unsafe.unsafeRegex("(\\\\*)" + "\"")(Data_String_Regex_Flags.global);
                var $62 = Data_Function.applyN(Data_String_Regex.replace(metaCharsRegex)("^$1"))(escapeCount);
                var $63 = Data_String_Regex.replace(endOfStringRegex)("$1$1");
                var $64 = Data_String_Regex.replace(backSlashSequenceThenDoubleQuoteRegex)("$1$1\\" + "\"");
                return function ($65) {
                    return $62(wrapInDoubleQuotes($63($64($65))));
                };
            };
            var detectShebang = function (parseRec) {
                return function __do() {
                    var mbFile = resolveCommand(parseRec)();
                    if (mbFile instanceof Data_Maybe.Nothing) {
                        return new Data_Tuple.Tuple({
                            file: mbFile,
                            args: parseRec.args,
                            command: parseRec.command,
                            options: parseRec.options,
                            original: parseRec.original
                        }, mbFile);
                    };
                    if (mbFile instanceof Data_Maybe.Just) {
                        var mbShebang = readShebang(mbFile.value0)();
                        if (mbShebang instanceof Data_Maybe.Nothing) {
                            return new Data_Tuple.Tuple({
                                file: mbFile,
                                args: parseRec.args,
                                command: parseRec.command,
                                options: parseRec.options,
                                original: parseRec.original
                            }, mbFile);
                        };
                        if (mbShebang instanceof Data_Maybe.Just) {
                            var rec1 = {
                                file: mbFile,
                                args: Data_Array.cons(mbFile.value0)(parseRec.args),
                                command: mbShebang.value0,
                                options: parseRec.options,
                                original: parseRec.original
                            };
                            var newCommand = resolveCommand(rec1)();
                            return new Data_Tuple.Tuple(rec1, newCommand);
                        };
                        throw new Error("Failed pattern match at Node.Library.Execa.CrossSpawn (line 141, column 9 - line 151, column 41): " + [ mbShebang.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Node.Library.Execa.CrossSpawn (line 137, column 5 - line 151, column 41): " + [ mbFile.constructor.name ]);
                };
            };
            var parseNonShell = function (parseRec) {
                return function __do() {
                    var v = detectShebang(parseRec)();
                    var needsShell = (function () {
                        var $66 = Data_String_Regex.test(isExecutableRegex);
                        return function ($67) {
                            return !$66($67);
                        };
                    })();
                    if (v.value1 instanceof Data_Maybe.Just && needsShell(v.value1.value0)) {
                        var needsDoubleEscapeChars = Data_String_Regex.test(isCommandShimRegex)(v.value1.value0);
                        var comSpec = map(Data_Maybe.fromMaybe("cmd.exe"))(Node_Process.lookupEnv("comspec"))();
                        return {
                            args: append1(voidLeft(guard1(Data_String_Common.toLower(comSpec) === "cmd.exe" && !parseRec.options.windowsEnableCmdEcho))("/q"))([ "/d", "/s", "/c", wrapInDoubleQuotes(intercalate(" ")(Data_Array.cons(escapeCommand(Node_Path.normalize(v.value0.command)))(mapFlipped(v.value0.args)(escapeArgument(needsDoubleEscapeChars))))) ]),
                            command: comSpec,
                            options: {
                                windowsVerbatimArguments: new Data_Maybe.Just(true),
                                cwd: v.value0.options.cwd,
                                env: v.value0.options.env,
                                shell: v.value0.options.shell,
                                windowsEnableCmdEcho: v.value0.options.windowsEnableCmdEcho
                            },
                            file: v.value0.file,
                            original: v.value0.original
                        };
                    };
                    return v.value0;
                };
            };
            var parseWindows = (function () {
                if (Data_Maybe.isJust(options.shell)) {
                    return pure(initParseRec);
                };
                if (Data_Boolean.otherwise) {
                    return parseNonShell(initParseRec);
                };
                throw new Error("Failed pattern match at Node.Library.Execa.CrossSpawn (line 89, column 3 - line 91, column 45): " + [  ]);
            })();
            var $60 = !isWindows;
            if ($60) {
                return pure(initParseRec);
            };
            return parseWindows;
        };
    };
};
export {
    parse
};
//# sourceMappingURL=index.js.map
