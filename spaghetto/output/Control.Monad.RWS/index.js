// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Monad_RWS_Trans from "../Control.Monad.RWS.Trans/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Control_Monad_State_Class from "../Control.Monad.State.Class/index.js";
import * as Control_Monad_Writer_Class from "../Control.Monad.Writer.Class/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
var pure = /* #__PURE__ */ Control_Applicative.pure(Data_Identity.applicativeIdentity);
var unwrap = /* #__PURE__ */ Data_Newtype.unwrap();
var execRWST = /* #__PURE__ */ Control_Monad_RWS_Trans.execRWST(Data_Identity.monadIdentity);
var evalRWST = /* #__PURE__ */ Control_Monad_RWS_Trans.evalRWST(Data_Identity.monadIdentity);
var withRWS = Control_Monad_RWS_Trans.withRWST;
var rws = function (f) {
    return function (r) {
        return function (s) {
            return pure(f(r)(s));
        };
    };
};
var runRWS = function (m) {
    return function (r) {
        return function (s) {
            var v = m(r)(s);
            return v;
        };
    };
};
var mapRWS = function (f) {
    return Control_Monad_RWS_Trans.mapRWST(function ($8) {
        return Data_Identity.Identity(f(unwrap($8)));
    });
};
var execRWS = function (m) {
    return function (r) {
        return function (s) {
            return unwrap(execRWST(m)(r)(s));
        };
    };
};
var evalRWS = function (m) {
    return function (r) {
        return function (s) {
            return unwrap(evalRWST(m)(r)(s));
        };
    };
};
export {
    rws,
    runRWS,
    evalRWS,
    execRWS,
    mapRWS,
    withRWS
};
export {
    RWSResult,
    RWST,
    evalRWST,
    execRWST,
    lift,
    mapRWST,
    runRWST,
    withRWST
} from "../Control.Monad.RWS.Trans/index.js";
export {
    ask,
    asks,
    local
} from "../Control.Monad.Reader.Class/index.js";
export {
    get,
    gets,
    modify,
    modify_,
    put,
    state
} from "../Control.Monad.State.Class/index.js";
export {
    censor,
    listen,
    listens,
    pass,
    tell
} from "../Control.Monad.Writer.Class/index.js";
//# sourceMappingURL=index.js.map
