// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Lazy from "../Control.Lazy/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_NonEmpty from "../Data.Array.NonEmpty/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as PureScript_CST_Errors from "../PureScript.CST.Errors/index.js";
import * as PureScript_CST_Layout from "../PureScript.CST.Layout/index.js";
import * as PureScript_CST_Parser_Monad from "../PureScript.CST.Parser.Monad/index.js";
import * as PureScript_CST_TokenStream from "../PureScript.CST.TokenStream/index.js";
import * as PureScript_CST_Types from "../PureScript.CST.Types/index.js";
var $runtime_lazy = function (name, moduleName, init) {
    var state = 0;
    var val;
    return function (lineNumber) {
        if (state === 2) return val;
        if (state === 1) throw new ReferenceError(name + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
        state = 1;
        val = init();
        state = 2;
        return val;
    };
};
var bind = /* #__PURE__ */ Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser);
var pure = /* #__PURE__ */ Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser);
var apply = /* #__PURE__ */ Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser);
var map = /* #__PURE__ */ Data_Functor.map(PureScript_CST_Parser_Monad.functorParser);
var member = /* #__PURE__ */ Data_Set.member(Data_Ord.ordString);
var alt = /* #__PURE__ */ Control_Alt.alt(PureScript_CST_Parser_Monad.altParser);
var applyFirst = /* #__PURE__ */ Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser);
var applySecond = /* #__PURE__ */ Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser);
var defer = /* #__PURE__ */ Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser);
var voidRight = /* #__PURE__ */ Data_Functor.voidRight(PureScript_CST_Parser_Monad.functorParser);
var wrapped = function (openTok) {
    return function (closeTok) {
        return function (valueParser) {
            return bind(openTok)(function (open) {
                return bind(valueParser)(function (value) {
                    return bind(closeTok)(function (close) {
                        return pure({
                            open: open,
                            value: value,
                            close: close
                        });
                    });
                });
            });
        };
    };
};
var separated = function (sepParser) {
    return function (valueParser) {
        return apply(map(function (v) {
            return function (v1) {
                return {
                    head: v,
                    tail: v1
                };
            };
        })(valueParser))(PureScript_CST_Parser_Monad.many(apply(map(Data_Tuple.Tuple.create)(sepParser))(valueParser)));
    };
};
var reservedKeywords = /* #__PURE__ */ Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordString)([ "ado", "case", "class", "data", "derive", "do", "else", "false", "foreign", "if", "import", "in", "infix", "infixl", "infixr", "instance", "let", "module", "newtype", "of", "then", "true", "type", "where" ]);
var recoverTokensWhile = function (p) {
    return function (initStream) {
        var indent = Data_Maybe.maybe(0)(function (v) {
            return v.column;
        })(PureScript_CST_Layout.currentIndent(PureScript_CST_TokenStream.layoutStack(initStream)));
        var go = function ($copy_acc) {
            return function ($copy_stream) {
                var $tco_var_acc = $copy_acc;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(acc, stream) {
                    var v = PureScript_CST_TokenStream.step(stream);
                    if (v instanceof PureScript_CST_TokenStream.TokenError) {
                        $tco_done = true;
                        return new Data_Tuple.Tuple(acc, stream);
                    };
                    if (v instanceof PureScript_CST_TokenStream.TokenEOF) {
                        $tco_done = true;
                        return new Data_Tuple.Tuple(acc, stream);
                    };
                    if (v instanceof PureScript_CST_TokenStream.TokenCons) {
                        var $132 = p(v.value0)(indent);
                        if ($132) {
                            $tco_var_acc = Data_Array.snoc(acc)(v.value0);
                            $copy_stream = v.value2;
                            return;
                        };
                        $tco_done = true;
                        return new Data_Tuple.Tuple(acc, stream);
                    };
                    throw new Error("Failed pattern match at PureScript.CST.Parser (line 1180, column 19 - line 1189, column 25): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_acc, $copy_stream);
                };
                return $tco_result;
            };
        };
        return go([  ])(initStream);
    };
};
var recoverIndent = function (mkNode) {
    return PureScript_CST_Parser_Monad.recover(function (v) {
        return function (stream) {
            var v1 = recoverTokensWhile(function (tok) {
                return function (indent) {
                    if (tok.value instanceof PureScript_CST_Types.TokLayoutEnd) {
                        return tok.value.value0 > indent;
                    };
                    if (tok.value instanceof PureScript_CST_Types.TokLayoutSep) {
                        return tok.value.value0 > indent;
                    };
                    return true;
                };
            })(stream);
            var $142 = Data_Array["null"](v1.value0);
            if ($142) {
                return Data_Maybe.Nothing.value;
            };
            return new Data_Maybe.Just(new Data_Tuple.Tuple(mkNode({
                position: v.position,
                error: v.error,
                tokens: v1.value0
            }), v1.value1));
        };
    });
};
var recoverLetBinding = /* #__PURE__ */ (function () {
    return recoverIndent(PureScript_CST_Types.LetBindingError.create);
})();
var recoverDoStatement = /* #__PURE__ */ (function () {
    return recoverIndent(PureScript_CST_Types.DoError.create);
})();
var recoverDecl = /* #__PURE__ */ (function () {
    return recoverIndent(PureScript_CST_Types.DeclError.create);
})();
var parseSmallInt = /* #__PURE__ */ PureScript_CST_Parser_Monad.take(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokInt && v.value.value1 instanceof PureScript_CST_Types.SmallInt) {
        return new Data_Either.Right(new Data_Tuple.Tuple(v, v.value.value1.value0));
    };
    if (v.value instanceof PureScript_CST_Types.TokInt) {
        return new Data_Either.Left(new PureScript_CST_Errors.LexIntOutOfRange(v.value.value0));
    };
    return new Data_Either.Left(new PureScript_CST_Errors.UnexpectedToken(v.value));
});
var many1 = function (parser) {
    return apply(map(Data_Array_NonEmpty["cons$prime"])(parser))(PureScript_CST_Parser_Monad.many(parser));
};
var expectMap = function (k) {
    return PureScript_CST_Parser_Monad.take(function (tok) {
        var v = k(tok);
        if (v instanceof Data_Maybe.Just) {
            return new Data_Either.Right(v.value0);
        };
        if (v instanceof Data_Maybe.Nothing) {
            return new Data_Either.Left(new PureScript_CST_Errors.UnexpectedToken(tok.value));
        };
        throw new Error("Failed pattern match at PureScript.CST.Parser (line 46, column 3 - line 50, column 39): " + [ v.constructor.name ]);
    });
};
var parseBoolean = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "true")) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v, true));
    };
    if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "false")) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v, false));
    };
    return Data_Maybe.Nothing.value;
});
var parseChar = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokChar) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v, v.value.value1));
    };
    return Data_Maybe.Nothing.value;
});
var parseHole = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokHole) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value0
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseIdent = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && !member(v.value.value1)(reservedKeywords))) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var $$parseInt = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokInt) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v, v.value.value1));
    };
    return Data_Maybe.Nothing.value;
});
var parseLabel = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokRawString) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value0
        });
    };
    if (v.value instanceof PureScript_CST_Types.TokString) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value1
        });
    };
    if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value0 instanceof Data_Maybe.Nothing) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseModuleName = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Just) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value0.value0 + ("." + v.value.value1)
        });
    };
    if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Nothing) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseNumber = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokNumber) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v, v.value.value1));
    };
    return Data_Maybe.Nothing.value;
});
var parseOperator = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokOperator && v.value.value0 instanceof Data_Maybe.Nothing) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseProper = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Nothing) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseQualifiedIdent = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokLowerName && !member(v.value.value1)(reservedKeywords)) {
        return new Data_Maybe.Just({
            token: v,
            module: v.value.value0,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseQualifiedIdentOrProper = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokLowerName) {
        return new Data_Maybe.Just({
            token: v,
            module: v.value.value0,
            name: new Data_Either.Left(v.value.value1)
        });
    };
    if (v.value instanceof PureScript_CST_Types.TokUpperName) {
        return new Data_Maybe.Just({
            token: v,
            module: v.value.value0,
            name: new Data_Either.Right(v.value.value1)
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseQualifiedOperator = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokOperator) {
        return new Data_Maybe.Just({
            token: v,
            module: v.value.value0,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseQualifiedProper = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokUpperName) {
        return new Data_Maybe.Just({
            token: v,
            module: v.value.value0,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseQualifiedSymbol = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokSymbolName) {
        return new Data_Maybe.Just({
            token: v,
            module: v.value.value0,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var parseString = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokString) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v, v.value.value1));
    };
    if (v.value instanceof PureScript_CST_Types.TokRawString) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v, v.value.value0));
    };
    return Data_Maybe.Nothing.value;
});
var parseSymbol = /* #__PURE__ */ expectMap(function (v) {
    if (v.value instanceof PureScript_CST_Types.TokSymbolName && v.value.value0 instanceof Data_Maybe.Nothing) {
        return new Data_Maybe.Just({
            token: v,
            name: v.value.value1
        });
    };
    return Data_Maybe.Nothing.value;
});
var expect = function (pred) {
    return expectMap(function (tok) {
        var $241 = pred(tok.value);
        if ($241) {
            return new Data_Maybe.Just(tok);
        };
        return Data_Maybe.Nothing.value;
    });
};
var tokAt = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokAt) {
        return true;
    };
    return false;
});
var tokBackslash = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokBackslash) {
        return true;
    };
    return false;
});
var tokComma = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokComma) {
        return true;
    };
    return false;
});
var tokDot = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokDot) {
        return true;
    };
    return false;
});
var parseRecordAccessor = function (expr) {
    return bind(tokDot)(function (dot) {
        return bind(separated(tokDot)(parseLabel))(function (path) {
            return pure(new PureScript_CST_Types.ExprRecordAccessor({
                expr: expr,
                dot: dot,
                path: path
            }));
        });
    });
};
var tokDoubleColon = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokDoubleColon) {
        return true;
    };
    return false;
});
var parseInstanceName = /* #__PURE__ */ (function () {
    return apply(map(Data_Tuple.Tuple.create)(parseIdent))(tokDoubleColon);
})();
var tokEquals = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokEquals) {
        return true;
    };
    return false;
});
var tokForall = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokForall) {
        return true;
    };
    return false;
});
var tokKeyOperator = function (sym) {
    return expect(function (v) {
        if (v instanceof PureScript_CST_Types.TokOperator && v.value0 instanceof Data_Maybe.Nothing) {
            return sym === v.value1;
        };
        return false;
    });
};
var parseBinderNegative = /* #__PURE__ */ bind(/* #__PURE__ */ tokKeyOperator("-"))(function (negative) {
    return alt(map(Data_Tuple.uncurry(PureScript_CST_Types.BinderInt.create(new Data_Maybe.Just(negative))))($$parseInt))(map(Data_Tuple.uncurry(PureScript_CST_Types.BinderNumber.create(new Data_Maybe.Just(negative))))(parseNumber));
});
var parseRecordLabeled = function (valueParser) {
    var parseRecordField = apply(map(Data_Tuple.uncurry(PureScript_CST_Types.RecordField.create))(PureScript_CST_Parser_Monad["try"](apply(map(Data_Tuple.Tuple.create)(parseLabel))(tokKeyOperator(":")))))(valueParser);
    return alt(parseRecordField)(map(PureScript_CST_Types.RecordPun.create)(parseIdent));
};
var parseTypeNegative = /* #__PURE__ */ bind(/* #__PURE__ */ tokKeyOperator("-"))(function (negative) {
    return map(Data_Tuple.uncurry(PureScript_CST_Types.TypeInt.create(new Data_Maybe.Just(negative))))($$parseInt);
});
var tokKeySymbol = function (sym) {
    return expect(function (v) {
        if (v instanceof PureScript_CST_Types.TokSymbolName && v.value0 instanceof Data_Maybe.Nothing) {
            return sym === v.value1;
        };
        return false;
    });
};
var tokKeyword = function (kw) {
    return expect(function (v) {
        if (v instanceof PureScript_CST_Types.TokLowerName && v.value0 instanceof Data_Maybe.Nothing) {
            return kw === v.value1;
        };
        return false;
    });
};
var parseFixityKeyword = /* #__PURE__ */ (function () {
    return alt(map(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infix.value))(tokKeyword("infix")))(alt(map(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infixl.value))(tokKeyword("infixl")))(map(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infixr.value))(tokKeyword("infixr"))));
})();
var parseFixityOp = /* #__PURE__ */ (function () {
    return alt(apply(apply(apply(map(PureScript_CST_Types.FixityType.create)(tokKeyword("type")))(parseQualifiedProper))(tokKeyword("as")))(parseOperator))(apply(apply(map(PureScript_CST_Types.FixityValue.create)(parseQualifiedIdentOrProper))(tokKeyword("as")))(parseOperator));
})();
var parseDeclFixity = /* #__PURE__ */ bind(parseFixityKeyword)(function (keyword) {
    return bind(parseSmallInt)(function (prec) {
        return bind(parseFixityOp)(function (operator) {
            return pure(new PureScript_CST_Types.DeclFixity({
                keyword: keyword,
                prec: prec,
                operator: operator
            }));
        });
    });
});
var parseForeignKind = /* #__PURE__ */ (function () {
    return PureScript_CST_Parser_Monad["try"](apply(map(PureScript_CST_Types.ForeignKind.create)(tokKeyword("kind")))(parseProper));
})();
var parseRole = /* #__PURE__ */ (function () {
    return alt(map(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Representational.value))(tokKeyword("representational")))(alt(map(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Nominal.value))(tokKeyword("nominal")))(map(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Phantom.value))(tokKeyword("phantom"))));
})();
var parseDeclRole = function (keyword1) {
    return bind(tokKeyword("role"))(function (keyword2) {
        return bind(parseProper)(function (name) {
            return bind(many1(parseRole))(function (roles) {
                return pure(new PureScript_CST_Types.DeclRole(keyword1, keyword2, name, roles));
            });
        });
    });
};
var tokLayoutEnd = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokLayoutEnd) {
        return true;
    };
    return false;
});
var tokLayoutSep = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokLayoutSep) {
        return true;
    };
    return false;
});
var parseInstanceChainSeparator = /* #__PURE__ */ applyFirst(/* #__PURE__ */ tokKeyword("else"))(/* #__PURE__ */ PureScript_CST_Parser_Monad.optional(tokLayoutSep));
var tokLayoutStart = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokLayoutStart) {
        return true;
    };
    return false;
});
var layoutNonEmpty = function (valueParser) {
    return apply(map(function (v) {
        return function (v1) {
            return Data_Array_NonEmpty["cons$prime"](v)(v1);
        };
    })(applySecond(tokLayoutStart)(valueParser)))(applyFirst(PureScript_CST_Parser_Monad.many(applySecond(tokLayoutSep)(valueParser)))(tokLayoutEnd));
};
var tokLeftArrow = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokLeftArrow) {
        return true;
    };
    return false;
});
var tokLeftBrace = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokLeftBrace) {
        return true;
    };
    return false;
});
var tokLeftFatArrow = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokOperator && v.value0 instanceof Data_Maybe.Nothing) {
        return v.value1 === "<=" || v.value1 === "\u21d0";
    };
    return false;
});
var tokLeftParen = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokLeftParen) {
        return true;
    };
    return false;
});
var tokLeftSquare = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokLeftSquare) {
        return true;
    };
    return false;
});
var tokPipe = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokPipe) {
        return true;
    };
    return false;
});
var tokQualifiedKeyword = function (kw) {
    return expect(function (v) {
        if (v instanceof PureScript_CST_Types.TokLowerName) {
            return kw === v.value1;
        };
        return false;
    });
};
var tokRightArrow = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokRightArrow) {
        return true;
    };
    return false;
});
var parseFundep = /* #__PURE__ */ (function () {
    return alt(apply(map(PureScript_CST_Types.FundepDetermined.create)(tokRightArrow))(many1(parseIdent)))(apply(apply(map(PureScript_CST_Types.FundepDetermines.create)(many1(parseIdent)))(tokRightArrow))(many1(parseIdent)));
})();
var tokRightBrace = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokRightBrace) {
        return true;
    };
    return false;
});
var tokRightFatArrow = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokRightFatArrow) {
        return true;
    };
    return false;
});
var tokRightParen = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokRightParen) {
        return true;
    };
    return false;
});
var parens = /* #__PURE__ */ wrapped(tokLeftParen)(tokRightParen);
var parseEmptyRow = function (open) {
    return bind(tokRightParen)(function (close) {
        return pure(new PureScript_CST_Types.TypeRow({
            open: open,
            value: {
                labels: Data_Maybe.Nothing.value,
                tail: Data_Maybe.Nothing.value
            },
            close: close
        }));
    });
};
var tokRightSquare = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokRightSquare) {
        return true;
    };
    return false;
});
var tokSymbolArrow = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokSymbolArrow) {
        return true;
    };
    return false;
});
var tokTick = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokTick) {
        return true;
    };
    return false;
});
var tokUnderscore = /* #__PURE__ */ expect(function (v) {
    if (v instanceof PureScript_CST_Types.TokUnderscore) {
        return true;
    };
    return false;
});
var delimited = function (openTok) {
    return function (closeTok) {
        return function (sepTok) {
            return function (valueParser) {
                var parseNonEmpty = function (open) {
                    return apply(map(function (v) {
                        return function (v1) {
                            return {
                                open: open,
                                value: new Data_Maybe.Just(v),
                                close: v1
                            };
                        };
                    })(separated(sepTok)(valueParser)))(closeTok);
                };
                var parseEmpty = function (open) {
                    return map(function (v) {
                        return {
                            open: open,
                            value: Data_Maybe.Nothing.value,
                            close: v
                        };
                    })(closeTok);
                };
                return bind(openTok)(function (open) {
                    return alt(parseEmpty(open))(parseNonEmpty(open));
                });
            };
        };
    };
};
var parseDataMembers = /* #__PURE__ */ (function () {
    return alt(map(PureScript_CST_Types.DataAll.create)(tokKeySymbol("..")))(map(PureScript_CST_Types.DataEnumerated.create)(delimited(tokLeftParen)(tokRightParen)(tokComma)(parseProper)));
})();
var parseExport = /* #__PURE__ */ (function () {
    return alt(apply(map(PureScript_CST_Types.ExportTypeOp.create)(tokKeyword("type")))(parseSymbol))(alt(apply(map(PureScript_CST_Types.ExportClass.create)(tokKeyword("class")))(parseProper))(alt(apply(map(PureScript_CST_Types.ExportModule.create)(tokKeyword("module")))(parseModuleName))(alt(map(PureScript_CST_Types.ExportOp.create)(parseSymbol))(alt(map(PureScript_CST_Types.ExportValue.create)(parseIdent))(apply(map(PureScript_CST_Types.ExportType.create)(parseProper))(PureScript_CST_Parser_Monad.optional(parseDataMembers)))))));
})();
var parseImport = /* #__PURE__ */ (function () {
    return alt(map(PureScript_CST_Types.ImportOp.create)(parseSymbol))(alt(apply(map(PureScript_CST_Types.ImportType.create)(parseProper))(PureScript_CST_Parser_Monad.optional(parseDataMembers)))(alt(apply(map(PureScript_CST_Types.ImportTypeOp.create)(tokKeyword("type")))(parseSymbol))(alt(apply(map(PureScript_CST_Types.ImportClass.create)(tokKeyword("class")))(parseProper))(map(PureScript_CST_Types.ImportValue.create)(parseIdent)))));
})();
var parseImportDecl = /* #__PURE__ */ bind(/* #__PURE__ */ tokKeyword("import"))(function (keyword) {
    return bind(parseModuleName)(function (module_) {
        return bind(PureScript_CST_Parser_Monad.optional(apply(map(Data_Tuple.Tuple.create)(PureScript_CST_Parser_Monad.optional(tokKeyword("hiding"))))(parens(separated(tokComma)(parseImport)))))(function (names) {
            return bind(PureScript_CST_Parser_Monad.optional(apply(map(Data_Tuple.Tuple.create)(tokKeyword("as")))(parseModuleName)))(function (qualified) {
                return pure({
                    keyword: keyword,
                    module: module_,
                    names: names,
                    qualified: qualified
                });
            });
        });
    });
});
var parseModuleImportDecls = /* #__PURE__ */ PureScript_CST_Parser_Monad.many(/* #__PURE__ */ applyFirst(parseImportDecl)(/* #__PURE__ */ alt(tokLayoutSep)(/* #__PURE__ */ PureScript_CST_Parser_Monad.lookAhead(tokLayoutEnd))));
var parseModuleHeader = /* #__PURE__ */ bind(/* #__PURE__ */ tokKeyword("module"))(function (keyword) {
    return bind(parseModuleName)(function (name) {
        return bind(PureScript_CST_Parser_Monad.optional(parens(separated(tokComma)(parseExport))))(function (exports) {
            return bind(tokKeyword("where"))(function (where_) {
                return bind(applySecond(tokLayoutStart)(parseModuleImportDecls))(function (imports) {
                    return pure({
                        keyword: keyword,
                        name: name,
                        exports: exports,
                        where: where_,
                        imports: imports
                    });
                });
            });
        });
    });
});
var braces = /* #__PURE__ */ wrapped(tokLeftBrace)(tokRightBrace);
var parseTypeParen = function (open) {
    return bind($lazy_parseType(507))(function (value) {
        return bind(tokRightParen)(function (close) {
            return pure(new PureScript_CST_Types.TypeParens({
                open: open,
                value: value,
                close: close
            }));
        });
    });
};
var parseRowTailParen = function (open) {
    return bind(apply(map(Data_Tuple.Tuple.create)(tokPipe))($lazy_parseType(477)))(function (tail) {
        return bind(tokRightParen)(function (close) {
            return pure(new PureScript_CST_Types.TypeRow({
                open: open,
                value: {
                    labels: Data_Maybe.Nothing.value,
                    tail: new Data_Maybe.Just(tail)
                },
                close: close
            }));
        });
    });
};
var parseRowParen = function (open) {
    return bind(PureScript_CST_Parser_Monad["try"](apply(map(Data_Tuple.Tuple.create)(parseLabel))(tokDoubleColon)))(function (v) {
        return bind($lazy_parseType(459))(function (value) {
            return bind(PureScript_CST_Parser_Monad.many(apply(map(Data_Tuple.Tuple.create)(tokComma))($lazy_parseRowLabel(460))))(function (rest) {
                return bind(PureScript_CST_Parser_Monad.optional(apply(map(Data_Tuple.Tuple.create)(tokPipe))($lazy_parseType(461))))(function (tail) {
                    return bind(tokRightParen)(function (close) {
                        return pure(new PureScript_CST_Types.TypeRow({
                            open: open,
                            value: {
                                labels: new Data_Maybe.Just({
                                    head: {
                                        label: v.value0,
                                        separator: v.value1,
                                        value: value
                                    },
                                    tail: rest
                                }),
                                tail: tail
                            },
                            close: close
                        }));
                    });
                });
            });
        });
    });
};
var parseKindedVar = function (open) {
    return bind(PureScript_CST_Parser_Monad["try"](apply(map(Data_Tuple.Tuple.create)(parens(map(PureScript_CST_Types.TypeVar.create)(parseIdent))))(tokDoubleColon)))(function (v) {
        return bind($lazy_parseType(497))(function (kind) {
            return bind(tokRightParen)(function (close) {
                return pure(new PureScript_CST_Types.TypeParens({
                    open: open,
                    value: new PureScript_CST_Types.TypeKinded(new PureScript_CST_Types.TypeParens(v.value0), v.value1, kind),
                    close: close
                }));
            });
        });
    });
};
var $lazy_parseForall = /* #__PURE__ */ $runtime_lazy("parseForall", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return apply(apply(apply(map(PureScript_CST_Types.TypeForall.create)(tokForall))(many1($lazy_parseTypeVarBinding(528))))(tokDot))($lazy_parseType1(530));
    });
});
var $lazy_parseRow = /* #__PURE__ */ $runtime_lazy("parseRow", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return bind(PureScript_CST_Parser_Monad.optional(separated(tokComma)($lazy_parseRowLabel(513))))(function (labels) {
            return bind(PureScript_CST_Parser_Monad.optional(apply(map(Data_Tuple.Tuple.create)(tokPipe))($lazy_parseType(514))))(function (tail) {
                return pure({
                    labels: labels,
                    tail: tail
                });
            });
        });
    });
});
var $lazy_parseRowLabel = /* #__PURE__ */ $runtime_lazy("parseRowLabel", "PureScript.CST.Parser", function () {
    return bind(parseLabel)(function (label) {
        return bind(tokDoubleColon)(function (separator) {
            return bind($lazy_parseType(521))(function (value) {
                return pure({
                    label: label,
                    separator: separator,
                    value: value
                });
            });
        });
    });
});
var $lazy_parseType = /* #__PURE__ */ $runtime_lazy("parseType", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return bind($lazy_parseType1(393))(function (ty) {
            return alt(apply(map(PureScript_CST_Types.TypeKinded.create(ty))(tokDoubleColon))($lazy_parseType(394)))(pure(ty));
        });
    });
});
var $lazy_parseType1 = /* #__PURE__ */ $runtime_lazy("parseType1", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return alt($lazy_parseForall(399))($lazy_parseType2(400));
    });
});
var $lazy_parseType2 = /* #__PURE__ */ $runtime_lazy("parseType2", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return bind($lazy_parseType3(404))(function (ty) {
            return alt(apply(map(PureScript_CST_Types.TypeArrow.create(ty))(tokRightArrow))($lazy_parseType1(405)))(alt(apply(map(PureScript_CST_Types.TypeConstrained.create(ty))(tokRightFatArrow))($lazy_parseType1(406)))(pure(ty)));
        });
    });
});
var $lazy_parseType3 = /* #__PURE__ */ $runtime_lazy("parseType3", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return bind($lazy_parseType4(411))(function (ty) {
            return bind(PureScript_CST_Parser_Monad.many(apply(map(Data_Tuple.Tuple.create)(parseQualifiedOperator))($lazy_parseType4(412))))(function (ops) {
                return pure((function () {
                    var v1 = Data_Array_NonEmpty.fromArray(ops);
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return ty;
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return new PureScript_CST_Types.TypeOp(ty, v1.value0);
                    };
                    throw new Error("Failed pattern match at PureScript.CST.Parser (line 413, column 8 - line 415, column 28): " + [ v1.constructor.name ]);
                })());
            });
        });
    });
});
var $lazy_parseType4 = /* #__PURE__ */ $runtime_lazy("parseType4", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return alt(parseTypeNegative)($lazy_parseType5(419));
    });
});
var $lazy_parseType5 = /* #__PURE__ */ $runtime_lazy("parseType5", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return bind($lazy_parseTypeAtom(423))(function (ty) {
            return bind(PureScript_CST_Parser_Monad.many($lazy_parseTypeAtom(424)))(function (args) {
                return pure((function () {
                    var v1 = Data_Array_NonEmpty.fromArray(args);
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return ty;
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return new PureScript_CST_Types.TypeApp(ty, v1.value0);
                    };
                    throw new Error("Failed pattern match at PureScript.CST.Parser (line 425, column 8 - line 427, column 29): " + [ v1.constructor.name ]);
                })());
            });
        });
    });
});
var $lazy_parseTypeAtom = /* #__PURE__ */ $runtime_lazy("parseTypeAtom", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return alt(map(PureScript_CST_Types.TypeVar.create)(parseIdent))(alt(map(PureScript_CST_Types.TypeConstructor.create)(parseQualifiedProper))(alt(map(Data_Tuple.uncurry(PureScript_CST_Types.TypeString.create))(parseString))(alt(map(Data_Tuple.uncurry(PureScript_CST_Types.TypeInt.create(Data_Maybe.Nothing.value)))($$parseInt))(alt($lazy_parseTypeParens(435))(alt(map(PureScript_CST_Types.TypeRecord.create)(braces($lazy_parseRow(436))))(alt(map(PureScript_CST_Types.TypeOpName.create)(parseQualifiedSymbol))(alt(map(PureScript_CST_Types.TypeHole.create)(parseHole))(alt(map(PureScript_CST_Types.TypeWildcard.create)(tokUnderscore))(map(PureScript_CST_Types.TypeArrowName.create)(tokSymbolArrow))))))))));
    });
});
var $lazy_parseTypeParens = /* #__PURE__ */ $runtime_lazy("parseTypeParens", "PureScript.CST.Parser", function () {
    return bind(tokLeftParen)(function (open) {
        return alt(parseRowParen(open))(alt(parseRowTailParen(open))(alt(parseKindedVar(open))(alt(parseTypeParen(open))(parseEmptyRow(open)))));
    });
});
var $lazy_parseTypeVarBinding = /* #__PURE__ */ $runtime_lazy("parseTypeVarBinding", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return alt($lazy_parseTypeVarKinded(534))(map(PureScript_CST_Types.TypeVarName.create)(parseIdent));
    });
});
var $lazy_parseTypeVarKinded = /* #__PURE__ */ $runtime_lazy("parseTypeVarKinded", "PureScript.CST.Parser", function () {
    return map(PureScript_CST_Types.TypeVarKinded.create)(parens(bind(parseIdent)(function (label) {
        return bind(tokDoubleColon)(function (separator) {
            return bind($lazy_parseType(541))(function (value) {
                return pure({
                    label: label,
                    separator: separator,
                    value: value
                });
            });
        });
    })));
});
var parseForall = /* #__PURE__ */ $lazy_parseForall(524);
var parseRow = /* #__PURE__ */ $lazy_parseRow(511);
var parseRowLabel = /* #__PURE__ */ $lazy_parseRowLabel(517);
var parseType = /* #__PURE__ */ $lazy_parseType(391);
var parseType1 = /* #__PURE__ */ $lazy_parseType1(397);
var parseType2 = /* #__PURE__ */ $lazy_parseType2(402);
var parseType3 = /* #__PURE__ */ $lazy_parseType3(409);
var parseType4 = /* #__PURE__ */ $lazy_parseType4(417);
var parseType5 = /* #__PURE__ */ $lazy_parseType5(421);
var parseTypeAtom = /* #__PURE__ */ $lazy_parseTypeAtom(429);
var parseTypeParens = /* #__PURE__ */ $lazy_parseTypeParens(442);
var parseTypeVarBinding = /* #__PURE__ */ $lazy_parseTypeVarBinding(532);
var parseTypeVarKinded = /* #__PURE__ */ $lazy_parseTypeVarKinded(537);
var parseDataCtor = /* #__PURE__ */ apply(/* #__PURE__ */ map(function (v) {
    return function (v1) {
        return {
            name: v,
            fields: v1
        };
    };
})(parseProper))(/* #__PURE__ */ PureScript_CST_Parser_Monad.many(parseTypeAtom));
var $lazy_parseBinder = /* #__PURE__ */ $runtime_lazy("parseBinder", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return bind($lazy_parseBinder1(811))(function (binder) {
            return alt(apply(map(PureScript_CST_Types.BinderTyped.create(binder))(tokDoubleColon))(parseType))(pure(binder));
        });
    });
});
var $lazy_parseBinder1 = /* #__PURE__ */ $runtime_lazy("parseBinder1", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return bind($lazy_parseBinder2(817))(function (binder) {
            return bind(PureScript_CST_Parser_Monad.many(apply(map(Data_Tuple.Tuple.create)(parseQualifiedOperator))($lazy_parseBinder2(818))))(function (ops) {
                return pure((function () {
                    var v1 = Data_Array_NonEmpty.fromArray(ops);
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return binder;
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return new PureScript_CST_Types.BinderOp(binder, v1.value0);
                    };
                    throw new Error("Failed pattern match at PureScript.CST.Parser (line 819, column 8 - line 821, column 34): " + [ v1.constructor.name ]);
                })());
            });
        });
    });
});
var $lazy_parseBinder2 = /* #__PURE__ */ $runtime_lazy("parseBinder2", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return alt(parseBinderNegative)(alt($lazy_parseBinderConstructor(826))($lazy_parseBinderAtom(827)));
    });
});
var $lazy_parseBinderAtom = /* #__PURE__ */ $runtime_lazy("parseBinderAtom", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return alt($lazy_parseIdentBinder(843))(alt(map(Data_Function.flip(PureScript_CST_Types.BinderConstructor.create)([  ]))(parseQualifiedProper))(alt(map(PureScript_CST_Types.BinderWildcard.create)(tokUnderscore))(alt(map(Data_Tuple.uncurry(PureScript_CST_Types.BinderString.create))(parseString))(alt(map(Data_Tuple.uncurry(PureScript_CST_Types.BinderChar.create))(parseChar))(alt(map(Data_Tuple.uncurry(PureScript_CST_Types.BinderBoolean.create))(parseBoolean))(alt(map(Data_Tuple.uncurry(PureScript_CST_Types.BinderInt.create(Data_Maybe.Nothing.value)))($$parseInt))(alt(map(Data_Tuple.uncurry(PureScript_CST_Types.BinderNumber.create(Data_Maybe.Nothing.value)))(parseNumber))(alt(map(PureScript_CST_Types.BinderArray.create)(delimited(tokLeftSquare)(tokRightSquare)(tokComma)($lazy_parseBinder(851))))(alt(map(PureScript_CST_Types.BinderRecord.create)(delimited(tokLeftBrace)(tokRightBrace)(tokComma)(parseRecordLabeled($lazy_parseBinder(852)))))(map(PureScript_CST_Types.BinderParens.create)(parens($lazy_parseBinder(853)))))))))))));
    });
});
var $lazy_parseBinderConstructor = /* #__PURE__ */ $runtime_lazy("parseBinderConstructor", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return bind(parseQualifiedProper)(function (name) {
            return bind(PureScript_CST_Parser_Monad.many($lazy_parseBinderAtom(838)))(function (apps) {
                return pure(new PureScript_CST_Types.BinderConstructor(name, apps));
            });
        });
    });
});
var $lazy_parseIdentBinder = /* #__PURE__ */ $runtime_lazy("parseIdentBinder", "PureScript.CST.Parser", function () {
    return bind(parseIdent)(function (ident) {
        return alt(apply(map(PureScript_CST_Types.BinderNamed.create(ident))(tokAt))($lazy_parseBinderAtom(858)))(pure(new PureScript_CST_Types.BinderVar(ident)));
    });
});
var parseBinder = /* #__PURE__ */ $lazy_parseBinder(809);
var parseBinder1 = /* #__PURE__ */ $lazy_parseBinder1(815);
var parseBinder2 = /* #__PURE__ */ $lazy_parseBinder2(823);
var parseBinderAtom = /* #__PURE__ */ $lazy_parseBinderAtom(841);
var parseBinderConstructor = /* #__PURE__ */ $lazy_parseBinderConstructor(835);
var parseIdentBinder = /* #__PURE__ */ $lazy_parseIdentBinder(855);
var parseClassConstraints = function (parseOneConstraint) {
    return alt(map(PureScript_CST_Types.Many.create)(parens(separated(tokComma)(parseType))))(map(PureScript_CST_Types.One.create)(parseOneConstraint));
};
var parseDeclDerive = /* #__PURE__ */ bind(/* #__PURE__ */ tokKeyword("derive"))(function (derive_) {
    return bind(PureScript_CST_Parser_Monad.optional(tokKeyword("newtype")))(function (newtype_) {
        return bind(tokKeyword("instance"))(function (keyword) {
            return bind(PureScript_CST_Parser_Monad.optional(parseInstanceName))(function (name) {
                return bind(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](apply(map(Data_Tuple.Tuple.create)(parseClassConstraints(parseType3)))(tokRightFatArrow))))(function (constraints) {
                    return bind(parseQualifiedProper)(function (className) {
                        return bind(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function (types) {
                            return pure(new PureScript_CST_Types.DeclDerive(derive_, newtype_, {
                                keyword: keyword,
                                name: name,
                                constraints: constraints,
                                className: className,
                                types: types
                            }));
                        });
                    });
                });
            });
        });
    });
});
var parseClassMember = /* #__PURE__ */ bind(parseIdent)(function (label) {
    return bind(tokDoubleColon)(function (separator) {
        return bind(parseType)(function (value) {
            return pure({
                label: label,
                separator: separator,
                value: value
            });
        });
    });
});
var parseDeclClassSignature = function (keyword) {
    return bind(PureScript_CST_Parser_Monad["try"](apply(map(Data_Tuple.Tuple.create)(parseProper))(tokDoubleColon)))(function (v) {
        return bind(parseType)(function (value) {
            return pure(new PureScript_CST_Types.DeclKindSignature(keyword, {
                label: v.value0,
                separator: v.value1,
                value: value
            }));
        });
    });
};
var parseDeclKindSignature = function (keyword) {
    return function (label) {
        return bind(tokDoubleColon)(function (separator) {
            return bind(parseType)(function (value) {
                return pure(new PureScript_CST_Types.DeclKindSignature(keyword, {
                    label: label,
                    separator: separator,
                    value: value
                }));
            });
        });
    };
};
var parseDeclSignature = function (label) {
    return bind(tokDoubleColon)(function (separator) {
        return bind(parseType)(function (value) {
            return pure(new PureScript_CST_Types.DeclSignature({
                label: label,
                separator: separator,
                value: value
            }));
        });
    });
};
var parseForeignData = /* #__PURE__ */ bind(/* #__PURE__ */ tokKeyword("data"))(function (keyword) {
    return bind(parseProper)(function (label) {
        return bind(tokDoubleColon)(function (separator) {
            return bind(parseType)(function (value) {
                return pure(new PureScript_CST_Types.ForeignData(keyword, {
                    label: label,
                    separator: separator,
                    value: value
                }));
            });
        });
    });
});
var parseForeignValue = /* #__PURE__ */ bind(parseIdent)(function (label) {
    return bind(tokDoubleColon)(function (separator) {
        return bind(parseType)(function (value) {
            return pure(new PureScript_CST_Types.ForeignValue({
                label: label,
                separator: separator,
                value: value
            }));
        });
    });
});
var parseDeclForeign = /* #__PURE__ */ bind(/* #__PURE__ */ tokKeyword("foreign"))(function (keyword1) {
    return bind(tokKeyword("import"))(function (keyword2) {
        return bind(alt(parseForeignData)(alt(parseForeignKind)(parseForeignValue)))(function (foreign_) {
            return pure(new PureScript_CST_Types.DeclForeign(keyword1, keyword2, foreign_));
        });
    });
});
var parseInstanceBindingSignature = function (label) {
    return bind(tokDoubleColon)(function (separator) {
        return bind(parseType)(function (value) {
            return pure(new PureScript_CST_Types.InstanceBindingSignature({
                label: label,
                separator: separator,
                value: value
            }));
        });
    });
};
var parseLetBindingSignature = function (label) {
    return bind(tokDoubleColon)(function (separator) {
        return bind(parseType)(function (value) {
            return pure(new PureScript_CST_Types.LetBindingSignature({
                label: label,
                separator: separator,
                value: value
            }));
        });
    });
};
var parseRecordUpdates = function (expr) {
    return bind(PureScript_CST_Parser_Monad["try"](applyFirst(tokLeftBrace)(PureScript_CST_Parser_Monad.lookAhead(applySecond(parseLabel)(alt(tokEquals)(tokLeftBrace))))))(function (open) {
        return bind(separated(tokComma)($lazy_parseRecordUpdate(695)))(function (value) {
            return bind(tokRightBrace)(function (close) {
                return pure(new PureScript_CST_Types.ExprRecordUpdate(expr, {
                    open: open,
                    value: value,
                    close: close
                }));
            });
        });
    });
};
var parseRecordUpdateLeaf = function (label) {
    return apply(map(PureScript_CST_Types.RecordUpdateLeaf.create(label))(tokEquals))($lazy_parseExpr(709));
};
var parseRecordUpdateBranch = function (label) {
    return map(PureScript_CST_Types.RecordUpdateBranch.create(label))(braces(separated(tokComma)($lazy_parseRecordUpdate(714))));
};
var parseLetBindingName = function (name) {
    return bind(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (binders) {
        return bind(parseGuarded(tokEquals))(function (guarded) {
            return pure(new PureScript_CST_Types.LetBindingName({
                name: name,
                binders: binders,
                guarded: guarded
            }));
        });
    });
};
var parseGuarded = function (sepParser) {
    var parsePatternGuard = apply(map(function (v) {
        return function (v1) {
            return {
                binder: v,
                expr: v1
            };
        };
    })(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](apply(map(Data_Tuple.Tuple.create)(parseBinder))(tokLeftArrow)))))($lazy_parseExpr(800));
    var parseGuardedExpr = apply(apply(apply(map(function (v) {
        return function (v1) {
            return function (v2) {
                return function (v3) {
                    return {
                        bar: v,
                        patterns: v1,
                        separator: v2,
                        where: v3
                    };
                };
            };
        };
    })(tokPipe))(separated(tokComma)(parsePatternGuard)))(sepParser))($lazy_parseWhere(794));
    return alt(apply(map(PureScript_CST_Types.Unconditional.create)(sepParser))($lazy_parseWhere(786)))(map(PureScript_CST_Types.Guarded.create)(many1(parseGuardedExpr)));
};
var parseBadSingleCaseWhere = function (binder) {
    return bind(tokRightArrow)(function (arrow) {
        return bind(applySecond(tokLayoutEnd)($lazy_parseWhere(651)))(function (body) {
            return pure(Data_Array_NonEmpty.singleton(new Data_Tuple.Tuple({
                head: binder,
                tail: [  ]
            }, new PureScript_CST_Types.Unconditional(arrow, body))));
        });
    });
};
var parseBadSingleCaseGuarded = function (binder) {
    return bind(applySecond(tokLayoutEnd)(parseGuarded(tokRightArrow)))(function (body) {
        return pure(Data_Array_NonEmpty.singleton(new Data_Tuple.Tuple({
            head: binder,
            tail: [  ]
        }, body)));
    });
};
var $lazy_parseAdo = /* #__PURE__ */ $runtime_lazy("parseAdo", "PureScript.CST.Parser", function () {
    return bind(tokQualifiedKeyword("ado"))(function (keyword) {
        return bind((function () {
            var valueParser = recoverDoStatement($lazy_parseDoStatement(676));
            var nonEmptyCase = apply(map(Data_Array.cons)(valueParser))(PureScript_CST_Parser_Monad.many(applySecond(tokLayoutSep)(valueParser)));
            return bind(tokLayoutStart)(function () {
                return alt(voidRight([  ])(tokLayoutEnd))(applyFirst(nonEmptyCase)(tokLayoutEnd));
            });
        })())(function (statements) {
            return bind(tokKeyword("in"))(function (in_) {
                return bind($lazy_parseExpr(683))(function (result) {
                    return pure(new PureScript_CST_Types.ExprAdo({
                        keyword: keyword,
                        statements: statements,
                        "in": in_,
                        result: result
                    }));
                });
            });
        });
    });
});
var $lazy_parseBadSingleCaseBranch = /* #__PURE__ */ $runtime_lazy("parseBadSingleCaseBranch", "PureScript.CST.Parser", function () {
    return bind(applySecond(tokLayoutStart)(parseBinder1))(function (binder) {
        return alt(parseBadSingleCaseWhere(binder))(parseBadSingleCaseGuarded(binder));
    });
});
var $lazy_parseCase = /* #__PURE__ */ $runtime_lazy("parseCase", "PureScript.CST.Parser", function () {
    return bind(tokKeyword("case"))(function (keyword) {
        return bind(separated(tokComma)($lazy_parseExpr(633)))(function (head) {
            return bind(tokKeyword("of"))(function (of_) {
                return bind(alt(PureScript_CST_Parser_Monad["try"]($lazy_parseBadSingleCaseBranch(635)))($lazy_parseCaseBranches(635)))(function (branches) {
                    return pure(new PureScript_CST_Types.ExprCase({
                        keyword: keyword,
                        head: head,
                        of: of_,
                        branches: branches
                    }));
                });
            });
        });
    });
});
var $lazy_parseCaseBranches = /* #__PURE__ */ $runtime_lazy("parseCaseBranches", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return layoutNonEmpty(apply(map(Data_Tuple.Tuple.create)(separated(tokComma)(parseBinder1)))(parseGuarded(tokRightArrow)));
    });
});
var $lazy_parseDo = /* #__PURE__ */ $runtime_lazy("parseDo", "PureScript.CST.Parser", function () {
    return bind(tokQualifiedKeyword("do"))(function (keyword) {
        return bind(layoutNonEmpty(recoverDoStatement($lazy_parseDoStatement(662))))(function (statements) {
            return pure(new PureScript_CST_Types.ExprDo({
                keyword: keyword,
                statements: statements
            }));
        });
    });
});
var $lazy_parseDoStatement = /* #__PURE__ */ $runtime_lazy("parseDoStatement", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return alt(apply(map(PureScript_CST_Types.DoLet.create)(tokKeyword("let")))(layoutNonEmpty(recoverLetBinding($lazy_parseLetBinding(757)))))(alt(apply(map(Data_Tuple.uncurry(PureScript_CST_Types.DoBind.create))(PureScript_CST_Parser_Monad["try"](apply(map(Data_Tuple.Tuple.create)(parseBinder))(tokLeftArrow))))($lazy_parseExpr(758)))(map(PureScript_CST_Types.DoDiscard.create)($lazy_parseExpr(759))));
    });
});
var $lazy_parseExpr = /* #__PURE__ */ $runtime_lazy("parseExpr", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return bind($lazy_parseExpr1(546))(function (expr) {
            return alt(apply(map(PureScript_CST_Types.ExprTyped.create(expr))(tokDoubleColon))(parseType))(pure(expr));
        });
    });
});
var $lazy_parseExpr1 = /* #__PURE__ */ $runtime_lazy("parseExpr1", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return bind($lazy_parseExpr2(552))(function (expr) {
            return bind(PureScript_CST_Parser_Monad.many(apply(map(Data_Tuple.Tuple.create)(parseQualifiedOperator))($lazy_parseExpr2(553))))(function (ops) {
                return pure((function () {
                    var v1 = Data_Array_NonEmpty.fromArray(ops);
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return expr;
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return new PureScript_CST_Types.ExprOp(expr, v1.value0);
                    };
                    throw new Error("Failed pattern match at PureScript.CST.Parser (line 554, column 8 - line 556, column 30): " + [ v1.constructor.name ]);
                })());
            });
        });
    });
});
var $lazy_parseExpr2 = /* #__PURE__ */ $runtime_lazy("parseExpr2", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return bind($lazy_parseExpr3(560))(function (expr) {
            return bind(PureScript_CST_Parser_Monad.many(apply(map(Data_Tuple.Tuple.create)($lazy_parseTickExpr(561)))($lazy_parseExpr3(561))))(function (ops) {
                return pure((function () {
                    var v1 = Data_Array_NonEmpty.fromArray(ops);
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return expr;
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return new PureScript_CST_Types.ExprInfix(expr, v1.value0);
                    };
                    throw new Error("Failed pattern match at PureScript.CST.Parser (line 562, column 8 - line 564, column 33): " + [ v1.constructor.name ]);
                })());
            });
        });
    });
});
var $lazy_parseExpr3 = /* #__PURE__ */ $runtime_lazy("parseExpr3", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return alt(apply(map(PureScript_CST_Types.ExprNegate.create)(tokKeyOperator("-")))($lazy_parseExpr3(583)))($lazy_parseExpr4(584));
    });
});
var $lazy_parseExpr4 = /* #__PURE__ */ $runtime_lazy("parseExpr4", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return bind($lazy_parseExpr5(588))(function (expr) {
            return bind(PureScript_CST_Parser_Monad.many($lazy_parseExpr5(589)))(function (args) {
                return pure((function () {
                    var v1 = Data_Array_NonEmpty.fromArray(args);
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return expr;
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return new PureScript_CST_Types.ExprApp(expr, v1.value0);
                    };
                    throw new Error("Failed pattern match at PureScript.CST.Parser (line 590, column 8 - line 592, column 31): " + [ v1.constructor.name ]);
                })());
            });
        });
    });
});
var $lazy_parseExpr5 = /* #__PURE__ */ $runtime_lazy("parseExpr5", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return alt($lazy_parseIf(596))(alt($lazy_parseLetIn(597))(alt($lazy_parseLambda(598))(alt($lazy_parseCase(599))(alt($lazy_parseDo(600))(alt($lazy_parseAdo(601))($lazy_parseExpr6(602)))))));
    });
});
var $lazy_parseExpr6 = /* #__PURE__ */ $runtime_lazy("parseExpr6", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return bind($lazy_parseExpr7(688))(function (expr) {
            return alt(parseRecordUpdates(expr))(pure(expr));
        });
    });
});
var $lazy_parseExpr7 = /* #__PURE__ */ $runtime_lazy("parseExpr7", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return bind($lazy_parseExprAtom(718))(function (expr) {
            return alt(parseRecordAccessor(expr))(pure(expr));
        });
    });
});
var $lazy_parseExprAtom = /* #__PURE__ */ $runtime_lazy("parseExprAtom", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return alt(map(PureScript_CST_Types.ExprIdent.create)(parseQualifiedIdent))(alt(map(PureScript_CST_Types.ExprConstructor.create)(parseQualifiedProper))(alt(map(PureScript_CST_Types.ExprOpName.create)(parseQualifiedSymbol))(alt(map(PureScript_CST_Types.ExprSection.create)(tokUnderscore))(alt(map(PureScript_CST_Types.ExprHole.create)(parseHole))(alt(map(Data_Tuple.uncurry(PureScript_CST_Types.ExprString.create))(parseString))(alt(map(Data_Tuple.uncurry(PureScript_CST_Types.ExprChar.create))(parseChar))(alt(map(Data_Tuple.uncurry(PureScript_CST_Types.ExprBoolean.create))(parseBoolean))(alt(map(Data_Tuple.uncurry(PureScript_CST_Types.ExprInt.create))($$parseInt))(alt(map(Data_Tuple.uncurry(PureScript_CST_Types.ExprNumber.create))(parseNumber))(alt(map(PureScript_CST_Types.ExprArray.create)(delimited(tokLeftSquare)(tokRightSquare)(tokComma)($lazy_parseExpr(740))))(alt(map(PureScript_CST_Types.ExprRecord.create)(delimited(tokLeftBrace)(tokRightBrace)(tokComma)(parseRecordLabeled($lazy_parseExpr(741)))))(map(PureScript_CST_Types.ExprParens.create)(parens($lazy_parseExpr(742)))))))))))))));
    });
});
var $lazy_parseIdentBinding = /* #__PURE__ */ $runtime_lazy("parseIdentBinding", "PureScript.CST.Parser", function () {
    return bind(parseIdent)(function (ident) {
        return alt(parseLetBindingSignature(ident))(parseLetBindingName(ident));
    });
});
var $lazy_parseIf = /* #__PURE__ */ $runtime_lazy("parseIf", "PureScript.CST.Parser", function () {
    return bind(tokKeyword("if"))(function (keyword) {
        return bind($lazy_parseExpr(607))(function (cond) {
            return bind(tokKeyword("then"))(function (then_) {
                return bind($lazy_parseExpr(609))(function (true_) {
                    return bind(tokKeyword("else"))(function (else_) {
                        return bind($lazy_parseExpr(611))(function (false_) {
                            return pure(new PureScript_CST_Types.ExprIf({
                                keyword: keyword,
                                cond: cond,
                                then: then_,
                                "true": true_,
                                "else": else_,
                                "false": false_
                            }));
                        });
                    });
                });
            });
        });
    });
});
var $lazy_parseLambda = /* #__PURE__ */ $runtime_lazy("parseLambda", "PureScript.CST.Parser", function () {
    return bind(tokBackslash)(function (symbol) {
        return bind(many1(parseBinderAtom))(function (binders) {
            return bind(tokRightArrow)(function (arrow) {
                return bind($lazy_parseExpr(627))(function (body) {
                    return pure(new PureScript_CST_Types.ExprLambda({
                        symbol: symbol,
                        binders: binders,
                        arrow: arrow,
                        body: body
                    }));
                });
            });
        });
    });
});
var $lazy_parseLetBinding = /* #__PURE__ */ $runtime_lazy("parseLetBinding", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return alt(PureScript_CST_Parser_Monad["try"]($lazy_parseIdentBinding(763)))(apply(apply(map(PureScript_CST_Types.LetBindingPattern.create)(parseBinder1))(tokEquals))($lazy_parseWhere(764)));
    });
});
var $lazy_parseLetIn = /* #__PURE__ */ $runtime_lazy("parseLetIn", "PureScript.CST.Parser", function () {
    return bind(tokKeyword("let"))(function (keyword) {
        return bind(layoutNonEmpty(recoverLetBinding($lazy_parseLetBinding(617))))(function (bindings) {
            return bind(tokKeyword("in"))(function (in_) {
                return bind($lazy_parseExpr(619))(function (body) {
                    return pure(new PureScript_CST_Types.ExprLet({
                        keyword: keyword,
                        bindings: bindings,
                        "in": in_,
                        body: body
                    }));
                });
            });
        });
    });
});
var $lazy_parseRecordUpdate = /* #__PURE__ */ $runtime_lazy("parseRecordUpdate", "PureScript.CST.Parser", function () {
    return bind(parseLabel)(function (label) {
        return alt(parseRecordUpdateLeaf(label))(parseRecordUpdateBranch(label));
    });
});
var $lazy_parseTickExpr = /* #__PURE__ */ $runtime_lazy("parseTickExpr", "PureScript.CST.Parser", function () {
    return bind(tokTick)(function (open) {
        return bind($lazy_parseTickExpr1(569))(function (value) {
            return bind(tokTick)(function (close) {
                return pure({
                    open: open,
                    value: value,
                    close: close
                });
            });
        });
    });
});
var $lazy_parseTickExpr1 = /* #__PURE__ */ $runtime_lazy("parseTickExpr1", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return bind($lazy_parseExpr3(575))(function (expr) {
            return bind(PureScript_CST_Parser_Monad.many(apply(map(Data_Tuple.Tuple.create)(parseQualifiedOperator))($lazy_parseExpr3(576))))(function (ops) {
                return pure((function () {
                    var v1 = Data_Array_NonEmpty.fromArray(ops);
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return expr;
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return new PureScript_CST_Types.ExprOp(expr, v1.value0);
                    };
                    throw new Error("Failed pattern match at PureScript.CST.Parser (line 577, column 8 - line 579, column 30): " + [ v1.constructor.name ]);
                })());
            });
        });
    });
});
var $lazy_parseWhere = /* #__PURE__ */ $runtime_lazy("parseWhere", "PureScript.CST.Parser", function () {
    return defer(function (v) {
        return bind($lazy_parseExpr(805))(function (expr) {
            return bind(PureScript_CST_Parser_Monad.optional(apply(map(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(recoverLetBinding($lazy_parseLetBinding(806))))))(function (bindings) {
                return pure({
                    expr: expr,
                    bindings: bindings
                });
            });
        });
    });
});
var parseAdo = /* #__PURE__ */ $lazy_parseAdo(665);
var parseBadSingleCaseBranch = /* #__PURE__ */ $lazy_parseBadSingleCaseBranch(642);
var parseCase = /* #__PURE__ */ $lazy_parseCase(630);
var parseCaseBranches = /* #__PURE__ */ $lazy_parseCaseBranches(638);
var parseDo = /* #__PURE__ */ $lazy_parseDo(659);
var parseDoStatement = /* #__PURE__ */ $lazy_parseDoStatement(755);
var parseExpr = /* #__PURE__ */ $lazy_parseExpr(544);
var parseExpr1 = /* #__PURE__ */ $lazy_parseExpr1(550);
var parseExpr2 = /* #__PURE__ */ $lazy_parseExpr2(558);
var parseExpr3 = /* #__PURE__ */ $lazy_parseExpr3(581);
var parseExpr4 = /* #__PURE__ */ $lazy_parseExpr4(586);
var parseExpr5 = /* #__PURE__ */ $lazy_parseExpr5(594);
var parseExpr6 = /* #__PURE__ */ $lazy_parseExpr6(686);
var parseExpr7 = /* #__PURE__ */ $lazy_parseExpr7(716);
var parseExprAtom = /* #__PURE__ */ $lazy_parseExprAtom(728);
var parseIdentBinding = /* #__PURE__ */ $lazy_parseIdentBinding(766);
var parseIf = /* #__PURE__ */ $lazy_parseIf(604);
var parseLambda = /* #__PURE__ */ $lazy_parseLambda(622);
var parseLetBinding = /* #__PURE__ */ $lazy_parseLetBinding(761);
var parseLetIn = /* #__PURE__ */ $lazy_parseLetIn(614);
var parseRecordUpdate = /* #__PURE__ */ $lazy_parseRecordUpdate(699);
var parseTickExpr = /* #__PURE__ */ $lazy_parseTickExpr(566);
var parseTickExpr1 = /* #__PURE__ */ $lazy_parseTickExpr1(573);
var parseWhere = /* #__PURE__ */ $lazy_parseWhere(803);
var parseDeclValue1 = function (name) {
    return bind(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (binders) {
        return bind(parseGuarded(tokEquals))(function (guarded) {
            return pure(new PureScript_CST_Types.DeclValue({
                name: name,
                binders: binders,
                guarded: guarded
            }));
        });
    });
};
var parseDeclValue = /* #__PURE__ */ bind(parseIdent)(function (ident) {
    return alt(parseDeclSignature(ident))(parseDeclValue1(ident));
});
var parseInstanceBindingName = function (name) {
    return bind(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function (binders) {
        return bind(parseGuarded(tokEquals))(function (guarded) {
            return pure(new PureScript_CST_Types.InstanceBindingName({
                name: name,
                binders: binders,
                guarded: guarded
            }));
        });
    });
};
var parseInstanceBinding = /* #__PURE__ */ bind(parseIdent)(function (ident) {
    return alt(parseInstanceBindingSignature(ident))(parseInstanceBindingName(ident));
});
var parseInstance = /* #__PURE__ */ bind(/* #__PURE__ */ tokKeyword("instance"))(function (keyword) {
    return bind(PureScript_CST_Parser_Monad.optional(parseInstanceName))(function (name) {
        return bind(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](apply(map(Data_Tuple.Tuple.create)(parseClassConstraints(parseType3)))(tokRightFatArrow))))(function (constraints) {
            return bind(parseQualifiedProper)(function (className) {
                return bind(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function (types) {
                    return bind(PureScript_CST_Parser_Monad.optional(apply(map(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(parseInstanceBinding))))(function (body) {
                        return pure({
                            head: {
                                keyword: keyword,
                                name: name,
                                constraints: constraints,
                                className: className,
                                types: types
                            },
                            body: body
                        });
                    });
                });
            });
        });
    });
});
var parseDeclInstanceChain = /* #__PURE__ */ (function () {
    return map(PureScript_CST_Types.DeclInstanceChain.create)(separated(parseInstanceChainSeparator)(parseInstance));
})();
var parseDeclClass1 = function (keyword) {
    return bind(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](apply(map(Data_Tuple.Tuple.create)(parseClassConstraints(parseType5)))(tokLeftFatArrow))))(function ($$super) {
        return bind(parseProper)(function (name) {
            return bind(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
                return bind(PureScript_CST_Parser_Monad.optional(apply(map(Data_Tuple.Tuple.create)(tokPipe))(separated(tokComma)(parseFundep))))(function (fundeps) {
                    return bind(PureScript_CST_Parser_Monad.optional(apply(map(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(parseClassMember))))(function (members) {
                        return pure(new PureScript_CST_Types.DeclClass({
                            keyword: keyword,
                            "super": $$super,
                            name: name,
                            vars: vars,
                            fundeps: fundeps
                        }, members));
                    });
                });
            });
        });
    });
};
var parseDeclClass = /* #__PURE__ */ bind(/* #__PURE__ */ tokKeyword("class"))(function (keyword) {
    return alt(parseDeclClassSignature(keyword))(parseDeclClass1(keyword));
});
var parseDeclData1 = function (keyword) {
    return function (name) {
        return bind(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
            return bind(PureScript_CST_Parser_Monad.optional(apply(map(Data_Tuple.Tuple.create)(tokEquals))(separated(tokPipe)(parseDataCtor))))(function (ctors) {
                return pure(new PureScript_CST_Types.DeclData({
                    keyword: keyword,
                    name: name,
                    vars: vars
                }, ctors));
            });
        });
    };
};
var parseDeclData = /* #__PURE__ */ bind(/* #__PURE__ */ tokKeyword("data"))(function (keyword) {
    return bind(parseProper)(function (name) {
        return alt(parseDeclKindSignature(keyword)(name))(parseDeclData1(keyword)(name));
    });
});
var parseDeclNewtype1 = function (keyword) {
    return function (name) {
        return bind(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
            return bind(tokEquals)(function (tok) {
                return bind(parseProper)(function (wrapper) {
                    return bind(parseTypeAtom)(function (body) {
                        return pure(new PureScript_CST_Types.DeclNewtype({
                            keyword: keyword,
                            name: name,
                            vars: vars
                        }, tok, wrapper, body));
                    });
                });
            });
        });
    };
};
var parseDeclNewtype = /* #__PURE__ */ bind(/* #__PURE__ */ tokKeyword("newtype"))(function (keyword) {
    return bind(parseProper)(function (name) {
        return alt(parseDeclKindSignature(keyword)(name))(parseDeclNewtype1(keyword)(name));
    });
});
var parseDeclType2 = function (keyword) {
    return function (name) {
        return bind(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function (vars) {
            return bind(tokEquals)(function (tok) {
                return bind(parseType)(function (body) {
                    return pure(new PureScript_CST_Types.DeclType({
                        keyword: keyword,
                        name: name,
                        vars: vars
                    }, tok, body));
                });
            });
        });
    };
};
var parseDeclType1 = function (keyword) {
    return bind(parseProper)(function (name) {
        return alt(parseDeclKindSignature(keyword)(name))(parseDeclType2(keyword)(name));
    });
};
var parseDeclType = /* #__PURE__ */ bind(/* #__PURE__ */ tokKeyword("type"))(function (keyword) {
    return alt(parseDeclRole(keyword))(parseDeclType1(keyword));
});
var parseDecl = /* #__PURE__ */ alt(parseDeclData)(/* #__PURE__ */ alt(parseDeclNewtype)(/* #__PURE__ */ alt(parseDeclType)(/* #__PURE__ */ alt(parseDeclClass)(/* #__PURE__ */ alt(parseDeclInstanceChain)(/* #__PURE__ */ alt(parseDeclDerive)(/* #__PURE__ */ alt(parseDeclValue)(/* #__PURE__ */ alt(parseDeclForeign)(parseDeclFixity))))))));
var parseModuleDecls = /* #__PURE__ */ PureScript_CST_Parser_Monad.many(/* #__PURE__ */ applyFirst(/* #__PURE__ */ recoverDecl(parseDecl))(/* #__PURE__ */ alt(tokLayoutSep)(/* #__PURE__ */ PureScript_CST_Parser_Monad.lookAhead(tokLayoutEnd))));
var parseModuleBody = /* #__PURE__ */ bind(/* #__PURE__ */ applyFirst(parseModuleDecls)(tokLayoutEnd))(function (decls) {
    return bind(PureScript_CST_Parser_Monad.eof)(function (v) {
        return pure({
            decls: decls,
            trailingComments: v.value1,
            end: v.value0
        });
    });
});
var parseModule = /* #__PURE__ */ bind(parseModuleHeader)(function (header) {
    return bind(parseModuleBody)(function (body) {
        return pure({
            header: header,
            body: body
        });
    });
});
export {
    parseModule,
    parseModuleHeader,
    parseModuleBody,
    parseImportDecl,
    parseDecl,
    parseType,
    parseExpr,
    parseBinder
};
//# sourceMappingURL=index.js.map
