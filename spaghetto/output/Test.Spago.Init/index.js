// Generated by purs version 0.15.10
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Spago_FS from "../Spago.FS/index.js";
import * as Test_Prelude from "../Test.Prelude/index.js";
import * as Test_Spec from "../Test.Spec/index.js";
import * as Test_Spec_Assertions from "../Test.Spec.Assertions/index.js";
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var discard1 = /* #__PURE__ */ discard(/* #__PURE__ */ Test_Spec.bindSpecT(Data_Identity.bindIdentity));
var it = /* #__PURE__ */ Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleFunc);
var bind = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var discard2 = /* #__PURE__ */ discard(Effect_Aff.bindAff);
var mkdirp = /* #__PURE__ */ Spago_FS.mkdirp(Effect_Aff_Class.monadAffAff);
var writeTextFile = /* #__PURE__ */ Spago_FS.writeTextFile(Effect_Aff_Class.monadAffAff);
var readTextFile = /* #__PURE__ */ Spago_FS.readTextFile(Effect_Aff_Class.monadAffAff);
var shouldEqual = /* #__PURE__ */ Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(Data_Show.showString)(Data_Eq.eqString);
var spec = /* #__PURE__ */ Test_Spec.around(Data_Identity.monadIdentity)(Test_Prelude.withTempDir)(/* #__PURE__ */ Test_Spec.describe(Data_Identity.monadIdentity)("init")(/* #__PURE__ */ discard1(/* #__PURE__ */ it("sets up a project")(function (v) {
    return bind(v.spago([ "init" ]))(Test_Prelude.shouldBeSuccess);
}))(function () {
    return discard1(it("does not overwrite files when initing a project")(function (v) {
        return discard2(mkdirp("src"))(function () {
            return discard2(writeTextFile("src/Main.purs")("Something"))(function () {
                return discard2(bind(v.spago([ "init" ]))(Test_Prelude.shouldBeSuccess))(function () {
                    return bind(readTextFile("src/Main.purs"))(function (fileContent) {
                        return shouldEqual(fileContent)("Something");
                    });
                });
            });
        });
    }))(function () {
        return discard1(it("always succeeds when doing init with force")(function (v) {
            return discard2(bind(v.spago([ "init" ]))(Test_Prelude.shouldBeSuccess))(function () {
                return bind(v.spago([ "init", "-f" ]))(Test_Prelude.shouldBeSuccess);
            });
        }))(function () {
            return it("should use user-specified tag if it exists instead of latest release")(function (v) {
                return discard2(bind(v.spago([ "init", "--package-set", "9.0.0", "--name", "7368613235362d47665357393342584955783641314b70674c" ]))(Test_Prelude.shouldBeSuccess))(function () {
                    return Test_Prelude.checkFixture("spago.yaml")(v.fixture("older-package-set-tag.yaml"));
                });
            });
        });
    });
})));
export {
    spec
};
//# sourceMappingURL=index.js.map
