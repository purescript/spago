{"comments":"This module defines functions for comparing numbers.\n","declarations":[{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"declType":"dataConstructor"},"sourceSpan":{"end":[20,35],"name":".spago/packages/numbers-9.0.1/src/Data/Number/Approximate.purs","start":[20,18]},"title":"Fraction"}],"comments":"A newtype for (small) numbers, typically in the range *[0:1]*. It is used\nas an argument for `eqRelative`.\n","info":{"dataDeclType":"newtype","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[20,35],"name":".spago/packages/numbers-9.0.1/src/Data/Number/Approximate.purs","start":[20,1]},"title":"Fraction"},{"children":[],"comments":"Compare two `Number`s and return `true` if they are equal up to the\ngiven *relative* error (`Fraction` parameter).\n\nThis comparison is scale-invariant, i.e. if `eqRelative frac x y`, then\n`eqRelative frac (s * x) (s * y)` for a given scale factor `s > 0.0`\n(unless one of x, y is exactly `0.0`).\n\nNote that the relation that `eqRelative frac` induces on `Number` is\nnot an equivalence relation. It is reflexive and symmetric, but not\ntransitive.\n\nExample:\n``` purs\n> (eqRelative (Fraction 0.01)) 133.7 133.0\ntrue\n\n> (eqRelative (Fraction 0.001)) 133.7 133.0\nfalse\n\n> (eqRelative (Fraction 0.01)) (0.1 + 0.2) 0.3\ntrue\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Number","Approximate"],"Fraction"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[44,54],"name":".spago/packages/numbers-9.0.1/src/Data/Number/Approximate.purs","start":[44,1]},"title":"eqRelative"},{"children":[],"comments":"Test if two numbers are approximately equal, up to a relative difference\nof one part in a million:\n``` purs\neqApproximate = eqRelative (Fraction 1.0e-6)\n```\n\nExample\n``` purs\n> 0.1 + 0.2 == 0.3\nfalse\n\n> 0.1 + 0.2 ≅ 0.3\ntrue\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[63,45],"name":".spago/packages/numbers-9.0.1/src/Data/Number/Approximate.purs","start":[63,1]},"title":"eqApproximate"},{"children":[],"comments":null,"info":{"alias":[["Data","Number","Approximate"],{"Right":{"Left":{"Ident":"eqApproximate"}}}],"declType":"alias","fixity":{"associativity":"infix","precedence":4}},"kind":null,"sourceSpan":{"end":[69,28],"name":".spago/packages/numbers-9.0.1/src/Data/Number/Approximate.purs","start":[69,1]},"title":"(~=)"},{"children":[],"comments":null,"info":{"alias":[["Data","Number","Approximate"],{"Right":{"Left":{"Ident":"eqApproximate"}}}],"declType":"alias","fixity":{"associativity":"infix","precedence":4}},"kind":null,"sourceSpan":{"end":[70,27],"name":".spago/packages/numbers-9.0.1/src/Data/Number/Approximate.purs","start":[70,1]},"title":"(≅)"},{"children":[],"comments":"The complement of `eqApproximate`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[73,46],"name":".spago/packages/numbers-9.0.1/src/Data/Number/Approximate.purs","start":[73,1]},"title":"neqApproximate"},{"children":[],"comments":null,"info":{"alias":[["Data","Number","Approximate"],{"Right":{"Left":{"Ident":"neqApproximate"}}}],"declType":"alias","fixity":{"associativity":"infix","precedence":4}},"kind":null,"sourceSpan":{"end":[76,28],"name":".spago/packages/numbers-9.0.1/src/Data/Number/Approximate.purs","start":[76,1]},"title":"(≇)"},{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"declType":"dataConstructor"},"sourceSpan":{"end":[79,37],"name":".spago/packages/numbers-9.0.1/src/Data/Number/Approximate.purs","start":[79,19]},"title":"Tolerance"}],"comments":"A newtype for (small) numbers. It is used as an argument for `eqAbsolute`.\n","info":{"dataDeclType":"newtype","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[79,37],"name":".spago/packages/numbers-9.0.1/src/Data/Number/Approximate.purs","start":[79,1]},"title":"Tolerance"},{"children":[],"comments":"Compare two `Number`s and return `true` if they are equal up to the given\n(absolute) tolerance value. Note that this type of comparison is *not*\nscale-invariant. The relation induced by `(eqAbsolute (Tolerance eps))` is\nsymmetric and reflexive, but not transitive.\n\nExample:\n``` purs\n> (eqAbsolute (Tolerance 1.0)) 133.7 133.0\ntrue\n\n> (eqAbsolute (Tolerance 0.1)) 133.7 133.0\nfalse\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Number","Approximate"],"Tolerance"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Number"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[94,55],"name":".spago/packages/numbers-9.0.1/src/Data/Number/Approximate.purs","start":[94,1]},"title":"eqAbsolute"}],"name":"Data.Number.Approximate","reExports":[]}