// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Data_Argonaut_Core from "../Data.Argonaut.Core/index.js";
import * as Data_Argonaut_Parser from "../Data.Argonaut.Parser/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Bifunctor from "../Data.Bifunctor/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Codec from "../Data.Codec/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_DateTime from "../Data.DateTime/index.js";
import * as Data_DateTime_Instant from "../Data.DateTime.Instant/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_TraversableWithIndex from "../Data.TraversableWithIndex/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Effect_Now from "../Effect.Now/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Foreign_Object from "../Foreign.Object/index.js";
import * as Node_Encoding from "../Node.Encoding/index.js";
import * as Node_FS_Aff from "../Node.FS.Aff/index.js";
import * as Node_FS_Perms from "../Node.FS.Perms/index.js";
import * as Node_FS_Stats from "../Node.FS.Stats/index.js";
import * as Node_FS_Sync from "../Node.FS.Sync/index.js";
import * as Node_Path from "../Node.Path/index.js";
import * as Spago_Core_Config from "../Spago.Core.Config/index.js";
import * as Spago_Core_Prelude from "../Spago.Core.Prelude/index.js";
import * as Spago_Log from "../Spago.Log/index.js";
import * as Spago_Psa_Output from "../Spago.Psa.Output/index.js";
import * as Spago_Psa_Printer from "../Spago.Psa.Printer/index.js";
import * as Spago_Psa_Types from "../Spago.Psa.Types/index.js";
import * as Spago_Purs from "../Spago.Purs/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Spago_Core_Prelude.bindSpago);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Spago_Core_Prelude.monadEffectSpago);
var filterA = /* #__PURE__ */ Data_Array.filterA(Spago_Core_Prelude.applicativeSpago);
var pure = /* #__PURE__ */ Control_Applicative.pure(Spago_Core_Prelude.applicativeSpago);
var member = /* #__PURE__ */ Data_Set.member(Data_Ord.ordString);
var map = /* #__PURE__ */ Data_Functor.map(Effect.functorEffect);
var liftAff = /* #__PURE__ */ Effect_Aff_Class.liftAff(Spago_Core_Prelude.monadAffSpago);
var $$try = /* #__PURE__ */ Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff);
var map1 = /* #__PURE__ */ Data_Functor.map(Effect_Aff.functorAff);
var greaterThan = /* #__PURE__ */ Data_Ord.greaterThan(Data_DateTime.ordDateTime);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var try1 = /* #__PURE__ */ Control_Monad_Error_Class["try"](Spago_Core_Prelude.monadErrorErrorSpago);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(Spago_Core_Prelude.bindSpago);
var foldr = /* #__PURE__ */ Data_Foldable.foldr(Data_Foldable.foldableArray);
var insert = /* #__PURE__ */ Data_Set.insert(Data_Ord.ordString);
var logDebug = /* #__PURE__ */ Spago_Log.logDebug(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var unless = /* #__PURE__ */ Control_Applicative.unless(Spago_Core_Prelude.applicativeSpago);
var map2 = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorFn);
var bind1 = /* #__PURE__ */ Control_Bind.bind(Data_Either.bindEither);
var lmap = /* #__PURE__ */ Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither);
var forWithIndex = /* #__PURE__ */ Data_TraversableWithIndex.forWithIndex(Spago_Core_Prelude.applicativeSpago)(Data_TraversableWithIndex.traversableWithIndexArray);
var logWarn = /* #__PURE__ */ Spago_Log.logWarn(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var intercalate = /* #__PURE__ */ Data_Array.intercalate(Data_Monoid.monoidString);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var eq2 = /* #__PURE__ */ Data_Eq.eq(Spago_Core_Config.eqShowSourceCode);
var for_ = /* #__PURE__ */ Data_Foldable.for_(Spago_Core_Prelude.applicativeSpago)(Data_Foldable.foldableMaybe);
var buildOutput = /* #__PURE__ */ Spago_Psa_Output.buildOutput(Spago_Core_Prelude.monadSpago);
var logSuccess = /* #__PURE__ */ Spago_Log.logSuccess(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var showMaybe = /* #__PURE__ */ Data_Maybe.showMaybe(Data_Show.showString);
var show1 = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Show.showRecord()()(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "escapedCommand";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "exitCode";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "failed";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "isCanceled";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "killed";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "message";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "originalMessage";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "shortMessage";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "signal";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "signalDescription";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "stderr";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "stdout";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil({
    reflectSymbol: function () {
        return "timedOut";
    }
})(Data_Show.showBoolean))(Data_Show.showString))(Data_Show.showString))(showMaybe))(/* #__PURE__ */ Data_Maybe.showMaybe(/* #__PURE__ */ Data_Either.showEither(Data_Show.showInt)(Data_Show.showString))))(Data_Show.showString))(showMaybe))(Data_Show.showString))(Data_Show.showBoolean))(Data_Show.showBoolean))(Data_Show.showBoolean))(/* #__PURE__ */ Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Show.showString)));
var die = /* #__PURE__ */ Spago_Log.die(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(/* #__PURE__ */ Spago_Log.loggableArray(Spago_Log.loggableString));
var toOutputOptions = function (v) {
    return function (options) {
        return {
            color: v.color,
            censorBuildWarnings: options.censorBuildWarnings,
            censorCodes: options.censorCodes,
            filterCodes: options.filterCodes,
            statVerbosity: options.statVerbosity,
            libraryDirs: v.libraryDirs,
            strict: options.strict
        };
    };
};
var psaCompile = function (globs) {
    return function (pursArgs) {
        return function (psaArgs) {
            return function (v) {
                var mergeWarnings = function (filenames) {
                    return function (date) {
                        return function (old) {
                            return function ($$new) {
                                return bind(liftEffect(Effect_Ref["new"](Foreign_Object.empty)))(function (fileStat) {
                                    return bind(Data_Function.flip(filterA)(old)(function (x) {
                                        if (x.filename instanceof Data_Maybe.Nothing) {
                                            return pure(false);
                                        };
                                        if (x.filename instanceof Data_Maybe.Just) {
                                            var $128 = member(x.filename.value0)(filenames);
                                            if ($128) {
                                                return pure(false);
                                            };
                                            return bind(liftEffect(map(Foreign_Object.lookup(x.filename.value0))(Effect_Ref.read(fileStat))))(function (stat) {
                                                if (stat instanceof Data_Maybe.Just) {
                                                    return pure(stat.value0);
                                                };
                                                if (stat instanceof Data_Maybe.Nothing) {
                                                    return bind(liftAff($$try(map1(function ($156) {
                                                        return (function (v1) {
                                                            return greaterThan(date)(v1);
                                                        })(Node_FS_Stats.modifiedTime($156));
                                                    })(Node_FS_Aff.stat(x.filename.value0)))))(function (s) {
                                                        var s$prime = Data_Either.either(Data_Function["const"](false))(identity)(s);
                                                        return bind(liftEffect(Effect_Ref.modify_(Foreign_Object.insert(x.filename.value0)(s$prime))(fileStat)))(function () {
                                                            return pure(s$prime);
                                                        });
                                                    });
                                                };
                                                throw new Error("Failed pattern match at Spago.Psa (line 183, column 13 - line 189, column 24): " + [ stat.constructor.name ]);
                                            });
                                        };
                                        throw new Error("Failed pattern match at Spago.Psa (line 177, column 7 - line 189, column 24): " + [ x.filename.constructor.name ]);
                                    }))(function (old$prime) {
                                        return pure(append(old$prime)($$new));
                                    });
                                });
                            };
                        };
                    };
                };
                var loadNothing = function (v1) {
                    return function (v2) {
                        return pure(Data_Maybe.Nothing.value);
                    };
                };
                var isEmptySpan = function (filename) {
                    return function (pos) {
                        return filename === "" || pos.startLine === 0 && (pos.endLine === 0 && (pos.startColumn === 0 && pos.endColumn === 0));
                    };
                };
                var loadLines = function (files) {
                    return function (filename) {
                        return function (pos) {
                            if (isEmptySpan(filename)(pos)) {
                                return pure(Data_Maybe.Nothing.value);
                            };
                            if (Data_Boolean.otherwise) {
                                return bind(try1(bind(liftEffect(map(Foreign_Object.lookup(filename))(Effect_Ref.read(files))))(function (cache) {
                                    return bind((function () {
                                        if (cache instanceof Data_Maybe.Just) {
                                            return pure(cache.value0);
                                        };
                                        if (cache instanceof Data_Maybe.Nothing) {
                                            return bind(liftAff(map1(Data_String_Common.split("\x0a"))(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(filename))))(function (lines) {
                                                return discard(liftEffect(Effect_Ref.modify_(Foreign_Object.insert(filename)(lines))(files)))(function () {
                                                    return pure(lines);
                                                });
                                            });
                                        };
                                        throw new Error("Failed pattern match at Spago.Psa (line 129, column 13 - line 134, column 27): " + [ cache.constructor.name ]);
                                    })())(function (contents) {
                                        var source = Data_Array.slice(pos.startLine - 1 | 0)(pos.endLine)(contents);
                                        return pure(new Data_Maybe.Just(source));
                                    });
                                })))(function (result) {
                                    return Data_Either.either(Data_Function["const"](pure(Data_Maybe.Nothing.value)))(pure)(result);
                                });
                            };
                            throw new Error("Failed pattern match at Spago.Psa (line 123, column 3 - line 137, column 50): " + [ files.constructor.name, filename.constructor.name, pos.constructor.name ]);
                        };
                    };
                };
                var insertFilenames = foldr(function (x) {
                    return function (s) {
                        return Data_Maybe.maybe(s)(Data_Function.flip(insert)(s))(x.filename);
                    };
                });
                var encodeStash = function (s) {
                    return Data_Codec.encode(Data_Codec_Argonaut.array(Spago_Psa_Types.psaErrorCodec))(s);
                };
                var writeStashFile = function (stashFile$prime) {
                    return function (warnings) {
                        return discard(logDebug("Writing stash file: " + stashFile$prime))(function () {
                            var file = Data_Argonaut_Core.stringify(encodeStash(warnings));
                            var dir = Node_Path.dirname(stashFile$prime);
                            return bind(liftEffect(Node_FS_Sync.exists(dir)))(function (dirExists) {
                                return discard(unless(dirExists)(liftAff(Node_FS_Aff["mkdir$prime"](dir)({
                                    recursive: true,
                                    mode: Node_FS_Perms.permsAll
                                }))))(function () {
                                    return liftAff(Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(stashFile$prime)(file));
                                });
                            });
                        });
                    };
                };
                var emptyStash = discard(logDebug("Using empty stash"))(function () {
                    return liftEffect(map(map2(function (v1) {
                        return {
                            date: v1,
                            stash: [  ]
                        };
                    })(Data_DateTime_Instant.toDateTime))(Effect_Now.now));
                });
                var decodeStash = function (s) {
                    return bind1(Data_Argonaut_Parser.jsonParser(s))((function () {
                        var $157 = lmap(Data_Codec_Argonaut.printJsonDecodeError);
                        var $158 = Data_Codec.decode(Data_Codec_Argonaut.array(Spago_Psa_Types.psaErrorCodec));
                        return function ($159) {
                            return $157($158($159));
                        };
                    })());
                };
                var readStashFile = function (stashFile$prime) {
                    return discard(logDebug("About to read stash file: " + stashFile$prime))(function () {
                        return bind(try1(bind(liftAff(Node_FS_Aff.stat(stashFile$prime)))(function (stat) {
                            return bind(liftAff(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(stashFile$prime)))(function (file) {
                                var v1 = decodeStash(file);
                                if (v1 instanceof Data_Either.Left) {
                                    return discard(logDebug("Error decoding stash file: " + v1.value0))(function () {
                                        return emptyStash;
                                    });
                                };
                                if (v1 instanceof Data_Either.Right) {
                                    return discard(logDebug("Successfully decoded stash file"))(function () {
                                        return pure({
                                            date: Node_FS_Stats.modifiedTime(stat),
                                            stash: v1.value0
                                        });
                                    });
                                };
                                throw new Error("Failed pattern match at Spago.Psa (line 151, column 7 - line 157, column 64): " + [ v1.constructor.name ]);
                            });
                        })))(function (result) {
                            if (result instanceof Data_Either.Left) {
                                return discard(logDebug("Reading stash file failed: " + Effect_Exception.message(result.value0)))(function () {
                                    return emptyStash;
                                });
                            };
                            if (result instanceof Data_Either.Right) {
                                return pure(result.value0);
                            };
                            throw new Error("Failed pattern match at Spago.Psa (line 158, column 5 - line 162, column 32): " + [ result.constructor.name ]);
                        });
                    });
                };
                var outputOptions = toOutputOptions(psaArgs)(v);
                return bind((function () {
                    if (v.stashFile instanceof Data_Maybe.Just) {
                        return readStashFile(v.stashFile.value0);
                    };
                    if (v.stashFile instanceof Data_Maybe.Nothing) {
                        return emptyStash;
                    };
                    throw new Error("Failed pattern match at Spago.Psa (line 76, column 16 - line 78, column 26): " + [ v.stashFile.constructor.name ]);
                })())(function (stashData) {
                    return bind(Spago_Purs.compile(globs)(Data_Array.snoc(pursArgs)("--json-errors")))(function (result) {
                        var result$prime = (function () {
                            if (result instanceof Data_Either.Left) {
                                return {
                                    output: result.value0.stdout,
                                    exitCode: result.value0.exitCode,
                                    err: new Data_Maybe.Just(result.value0)
                                };
                            };
                            if (result instanceof Data_Either.Right) {
                                return {
                                    output: result.value0.stdout,
                                    exitCode: new Data_Maybe.Just(result.value0.exitCode),
                                    err: Data_Maybe.Nothing.value
                                };
                            };
                            throw new Error("Failed pattern match at Spago.Psa (line 82, column 15 - line 84, column 97): " + [ result.constructor.name ]);
                        })();
                        return bind(forWithIndex(Data_String_Common.split("\x0a")(result$prime.output))(function (idx) {
                            return function (err) {
                                var v1 = bind1(Data_Argonaut_Parser.jsonParser(err))((function () {
                                    var $160 = lmap(Data_Codec_Argonaut.printJsonDecodeError);
                                    var $161 = Data_Codec.decode(Spago_Psa_Types.psaResultCodec);
                                    return function ($162) {
                                        return $160($161($162));
                                    };
                                })());
                                if (v1 instanceof Data_Either.Left) {
                                    return discard(logWarn(intercalate("\x0a")([ "Failed to decode PsaResult at index '" + (show(idx) + ("': " + v1.value0)), "Json was: " + err ])))(function () {
                                        return pure(true);
                                    });
                                };
                                if (v1 instanceof Data_Either.Right) {
                                    return bind(liftEffect(Effect_Ref["new"](Foreign_Object.empty)))(function (files) {
                                        var loadLinesImpl = (function () {
                                            var $150 = eq2(v.showSource)(Spago_Core_Config.ShowSourceCode.value);
                                            if ($150) {
                                                return loadLines(files);
                                            };
                                            return loadNothing;
                                        })();
                                        var filenames = insertFilenames(insertFilenames(Data_Set.empty)(v1.value0.errors))(v1.value0.warnings);
                                        return bind(mergeWarnings(filenames)(stashData.date)(stashData.stash)(v1.value0.warnings))(function (merged) {
                                            return discard(for_(v.stashFile)(function (f) {
                                                return writeStashFile(f)(merged);
                                            }))(function () {
                                                return bind(buildOutput(loadLinesImpl)(outputOptions)({
                                                    warnings: merged,
                                                    errors: v1.value0.errors
                                                }))(function (out$prime) {
                                                    return discard(liftEffect((function () {
                                                        if (psaArgs.jsonErrors) {
                                                            return Spago_Psa_Printer.printJsonOutputToOut(out$prime);
                                                        };
                                                        return Spago_Psa_Printer.printDefaultOutputToErr(outputOptions)(out$prime);
                                                    })()))(function () {
                                                        return pure(Foreign_Object.isEmpty(out$prime.stats.allErrors));
                                                    });
                                                });
                                            });
                                        });
                                    });
                                };
                                throw new Error("Failed pattern match at Spago.Psa (line 86, column 5 - line 107, column 47): " + [ v1.constructor.name ]);
                            };
                        }))(function (arrErrorsIsEmpty) {
                            var $153 = Data_Array.all(identity)(arrErrorsIsEmpty);
                            if ($153) {
                                return logSuccess("Build succeeded.");
                            };
                            return discard(for_(result$prime.err)(function ($163) {
                                return logDebug(show1($163));
                            }))(function () {
                                return die([ "Failed to build." ]);
                            });
                        });
                    });
                });
            };
        };
    };
};
var defaultParseOptions = /* #__PURE__ */ (function () {
    return {
        showSource: Spago_Core_Config.ShowSourceCode.value,
        stashFile: Data_Maybe.Nothing.value,
        censorBuildWarnings: Spago_Core_Config.CensorNoWarnings.value,
        censorCodes: Data_Set.empty,
        filterCodes: Data_Set.empty,
        statVerbosity: Spago_Core_Config.CompactStats.value,
        strict: false
    };
})();
export {
    defaultParseOptions,
    toOutputOptions,
    psaCompile
};
//# sourceMappingURL=index.js.map
