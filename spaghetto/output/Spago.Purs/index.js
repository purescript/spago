// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Codec from "../Data.Codec/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Codec_Argonaut_Record from "../Data.Codec.Argonaut.Record/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Profunctor from "../Data.Profunctor/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Node_Platform from "../Node.Platform/index.js";
import * as Node_Process from "../Node.Process/index.js";
import * as Registry_Internal_Codec from "../Registry.Internal.Codec/index.js";
import * as Registry_Version from "../Registry.Version/index.js";
import * as Spago_Cmd from "../Spago.Cmd/index.js";
import * as Spago_Core_Prelude from "../Spago.Core.Prelude/index.js";
import * as Spago_Json from "../Spago.Json/index.js";
import * as Spago_Log from "../Spago.Log/index.js";
import * as Spago_Prelude from "../Spago.Prelude/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Spago_Core_Prelude.bindSpago);
var ask = /* #__PURE__ */ Control_Monad_Reader_Class.ask(Spago_Core_Prelude.monadAskSpago);
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var toUnfoldable = /* #__PURE__ */ Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray);
var exec = /* #__PURE__ */ Spago_Cmd.exec(Spago_Core_Prelude.monadAffSpago);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(Spago_Core_Prelude.bindSpago);
var logDebug = /* #__PURE__ */ Spago_Log.logDebug(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago);
var loggableArray = /* #__PURE__ */ Spago_Log.loggableArray(Spago_Log.loggableString);
var logDebug1 = /* #__PURE__ */ logDebug(loggableArray);
var logDebug2 = /* #__PURE__ */ logDebug(Spago_Log.loggableString);
var pure = /* #__PURE__ */ Control_Applicative.pure(Spago_Core_Prelude.applicativeSpago);
var showMaybe = /* #__PURE__ */ Data_Maybe.showMaybe(Data_Show.showString);
var show = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Show.showRecord()()(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "escapedCommand";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "exitCode";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "failed";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "isCanceled";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "killed";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "message";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "originalMessage";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "shortMessage";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "signal";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "signalDescription";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "stderr";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "stdout";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil({
    reflectSymbol: function () {
        return "timedOut";
    }
})(Data_Show.showBoolean))(Data_Show.showString))(Data_Show.showString))(showMaybe))(/* #__PURE__ */ Data_Maybe.showMaybe(/* #__PURE__ */ Data_Either.showEither(Data_Show.showInt)(Data_Show.showString))))(Data_Show.showString))(showMaybe))(Data_Show.showString))(Data_Show.showBoolean))(Data_Show.showBoolean))(Data_Show.showBoolean))(/* #__PURE__ */ Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Show.showString)));
var die = /* #__PURE__ */ Spago_Log.die(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago);
var die1 = /* #__PURE__ */ die(loggableArray);
var die2 = /* #__PURE__ */ die(Spago_Log.loggableString);
var ModuleGraph = function (x) {
    return x;
};
var newtypeModuleGraph_ = {
    Coercible0: function () {
        return undefined;
    }
};
var repl = function (globs) {
    return function (pursArgs) {
        return bind(ask)(function (v) {
            var args = append([ "repl" ])(append(pursArgs)(toUnfoldable(globs)));
            return exec(v.purs.cmd)(args)({
                pipeStdin: Spago_Cmd.StdinPipeParent.value,
                pipeStdout: true,
                pipeStderr: true,
                cwd: Spago_Cmd.defaultExecOptions.cwd
            });
        });
    };
};
var moduleGraphNodeCodec = /* #__PURE__ */ Data_Codec_Argonaut_Record.object()(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(Data_Codec_Argonaut_Record.rowListCodecNil)()()({
    reflectSymbol: function () {
        return "path";
    }
}))()()({
    reflectSymbol: function () {
        return "depends";
    }
}))("ModuleGraphNode")({
    path: Data_Codec_Argonaut.string,
    depends: /* #__PURE__ */ Data_Codec_Argonaut.array(Data_Codec_Argonaut.string)
});
var moduleGraphCodec = /* #__PURE__ */ (function () {
    return Data_Profunctor.wrapIso(Data_Codec.profunctorCodec(Data_Either.functorEither))()(ModuleGraph)(Registry_Internal_Codec.strMap(Data_Ord.ordString)("ModuleGraph")(Data_Maybe.Just.create)(Control_Category.identity(Control_Category.categoryFn))(moduleGraphNodeCodec));
})();
var graph = function (globs) {
    return function (pursArgs) {
        return bind(ask)(function (v) {
            var args = append([ "graph" ])(append(pursArgs)(toUnfoldable(globs)));
            return discard(logDebug1([ "Running command:", "purs " + Data_String_Common.joinWith(" ")(args) ]))(function () {
                var execOpts = {
                    pipeStdout: false,
                    pipeStderr: false,
                    cwd: Spago_Cmd.defaultExecOptions.cwd,
                    pipeStdin: Spago_Cmd.defaultExecOptions.pipeStdin
                };
                return bind(exec(v.purs.cmd)(args)(execOpts))(function (v1) {
                    if (v1 instanceof Data_Either.Right) {
                        return discard(logDebug2("Called `purs graph`, decoding.."))(function () {
                            return pure(Spago_Json.parseJson(moduleGraphCodec)(v1.value0.stdout));
                        });
                    };
                    if (v1 instanceof Data_Either.Left) {
                        return discard(logDebug2(show(v1.value0)))(function () {
                            return die1([ "Failed to call `purs graph`, error: " + v1.value0.shortMessage ]);
                        });
                    };
                    throw new Error("Failed pattern match at Spago.Purs (line 118, column 39 - line 124, column 73): " + [ v1.constructor.name ]);
                });
            });
        });
    };
};
var getPurs = /* #__PURE__ */ (function () {
    var pursVersion = function (cmd) {
        return exec(cmd)([ "--version" ])({
            pipeStdin: Spago_Cmd.defaultExecOptions.pipeStdin,
            pipeStdout: false,
            pipeStderr: false,
            cwd: Spago_Cmd.defaultExecOptions.cwd
        });
    };
    var dropStuff = function (pattern) {
        var $136 = Data_Maybe.fromMaybe("");
        var $137 = Data_String_Common.split(pattern);
        return function ($138) {
            return $136(Data_Array.head($137($138)));
        };
    };
    var parseVersionOutput = function (cmd) {
        return function (result) {
            var v = Spago_Prelude.parseLenientVersion(dropStuff("-")(dropStuff(" ")(result.stdout)));
            if (v instanceof Data_Either.Left) {
                return die2("Failed to parse purs version. Was: " + result.stdout);
            };
            if (v instanceof Data_Either.Right) {
                var $121 = Registry_Version.minor(v.value0) >= 15 && Registry_Version.patch(v.value0) >= 4;
                if ($121) {
                    return pure({
                        cmd: cmd,
                        version: v.value0
                    });
                };
                return die1([ "Unsupported PureScript version " + Registry_Version.print(v.value0), "Please install PureScript v0.15.4 or higher." ]);
            };
            throw new Error("Failed pattern match at Spago.Purs (line 57, column 35 - line 64, column 117): " + [ v.constructor.name ]);
        };
    };
    var complain = function (err) {
        return discard(logDebug2(show(err)))(function () {
            return die1([ "Failed to find purs. Have you installed it, and is it in your PATH?" ]);
        });
    };
    if (Node_Process.platform instanceof Data_Maybe.Just && Node_Process.platform.value0 instanceof Node_Platform.Win32) {
        return bind(pursVersion("purs.cmd"))(function (v) {
            if (v instanceof Data_Either.Right) {
                return parseVersionOutput("purs.cmd")(v.value0);
            };
            if (v instanceof Data_Either.Left) {
                return discard(logDebug1([ "Failed to find purs.cmd. Trying with just purs...", show(v.value0) ]))(function () {
                    return bind(pursVersion("purs"))(function (v1) {
                        if (v1 instanceof Data_Either.Right) {
                            return parseVersionOutput("purs")(v1.value0);
                        };
                        if (v1 instanceof Data_Either.Left) {
                            return complain(v1.value0);
                        };
                        throw new Error("Failed pattern match at Spago.Purs (line 37, column 34 - line 39, column 37): " + [ v1.constructor.name ]);
                    });
                });
            };
            throw new Error("Failed pattern match at Spago.Purs (line 33, column 34 - line 39, column 37): " + [ v.constructor.name ]);
        });
    };
    return bind(pursVersion("purs"))(function (v) {
        if (v instanceof Data_Either.Right) {
            return parseVersionOutput("purs")(v.value0);
        };
        if (v instanceof Data_Either.Left) {
            return complain(v.value0);
        };
        throw new Error("Failed pattern match at Spago.Purs (line 42, column 30 - line 44, column 33): " + [ v.constructor.name ]);
    });
})();
var compile = function (globs) {
    return function (pursArgs) {
        return bind(ask)(function (v) {
            var args = append([ "compile" ])(append(pursArgs)(toUnfoldable(globs)));
            return discard(logDebug1([ "Running command:", "purs " + Data_String_Common.joinWith(" ")(args) ]))(function () {
                return exec(v.purs.cmd)(args)({
                    pipeStdin: Spago_Cmd.defaultExecOptions.pipeStdin,
                    pipeStdout: false,
                    pipeStderr: Spago_Cmd.defaultExecOptions.pipeStderr,
                    cwd: Spago_Cmd.defaultExecOptions.cwd
                });
            });
        });
    };
};
export {
    getPurs,
    compile,
    repl,
    ModuleGraph,
    moduleGraphCodec,
    moduleGraphNodeCodec,
    graph,
    newtypeModuleGraph_
};
//# sourceMappingURL=index.js.map
