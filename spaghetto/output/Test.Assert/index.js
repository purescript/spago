// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
var unless = /* #__PURE__ */ Control_Applicative.unless(Effect.applicativeEffect);
var bindFlipped = /* #__PURE__ */ Control_Bind.bindFlipped(Effect.bindEffect);
var assert$prime = $foreign.assertImpl;
var assertEqual$prime = function (dictEq) {
    var eq1 = Data_Eq.eq(dictEq);
    return function (dictShow) {
        var show = Data_Show.show(dictShow);
        return function (userMessage) {
            return function (v) {
                var result = eq1(v.actual)(v.expected);
                var message = (function () {
                    var $21 = userMessage === "";
                    if ($21) {
                        return "";
                    };
                    return userMessage + "\x0a";
                })() + ("Expected: " + (show(v.expected) + ("\x0aActual:   " + show(v.actual))));
                return function __do() {
                    unless(result)(Effect_Console.error(message))();
                    return assert$prime(message)(result)();
                };
            };
        };
    };
};
var assertEqual$prime1 = /* #__PURE__ */ assertEqual$prime(Data_Eq.eqBoolean)(Data_Show.showBoolean);
var assertEqual = function (dictEq) {
    var assertEqual$prime2 = assertEqual$prime(dictEq);
    return function (dictShow) {
        return assertEqual$prime2(dictShow)("");
    };
};
var assertEqual1 = /* #__PURE__ */ assertEqual(Data_Eq.eqBoolean)(Data_Show.showBoolean);
var assertFalse = function (actual) {
    return assertEqual1({
        actual: actual,
        expected: false
    });
};
var assertTrue = function (actual) {
    return assertEqual1({
        actual: actual,
        expected: true
    });
};
var assertFalse$prime = function (message) {
    return function (actual) {
        return assertEqual$prime1(message)({
            actual: actual,
            expected: false
        });
    };
};
var assertTrue$prime = function (message) {
    return function (actual) {
        return assertEqual$prime1(message)({
            actual: actual,
            expected: true
        });
    };
};
var assertThrows$prime = function (msg) {
    return function (fn) {
        return bindFlipped(assert$prime(msg))($foreign.checkThrows(fn));
    };
};
var assertThrows = /* #__PURE__ */ assertThrows$prime("Assertion failed: An error should have been thrown");
var assert = /* #__PURE__ */ assert$prime("Assertion failed");
export {
    assert,
    assert$prime,
    assertEqual,
    assertEqual$prime,
    assertFalse,
    assertFalse$prime,
    assertThrows,
    assertThrows$prime,
    assertTrue,
    assertTrue$prime
};
//# sourceMappingURL=index.js.map
