{"builtWith":"0.15.10","comments":[{"LineComment":" | This module defines the `Ref` type for mutable value references, as well"},{"LineComment":" | as actions for working with them."},{"LineComment":" |"},{"LineComment":" | You'll notice that all of the functions that operate on a `Ref` (e.g."},{"LineComment":" | `new`, `read`, `write`) return their result wrapped in an `Effect`."},{"LineComment":" | Working with mutable references is considered effectful in PureScript"},{"LineComment":" | because of the principle of purity: functions should not have side"},{"LineComment":" | effects, and should return the same result when called with the same"},{"LineComment":" | arguments. If a `Ref` could be written to without using `Effect`, that"},{"LineComment":" | would cause a side effect (the effect of changing the result of subsequent"},{"LineComment":" | reads for that `Ref`). If there were a function for reading the current"},{"LineComment":" | value of a `Ref` without the result being wrapped in `Effect`, the result"},{"LineComment":" | of calling that function would change each time a new value was written to"},{"LineComment":" | the `Ref`. Even creating a new `Ref` is effectful: if there were a"},{"LineComment":" | function for creating a new `Ref` with the type `forall s. s -> Ref s`,"},{"LineComment":" | then calling that function twice with the same argument would not give the"},{"LineComment":" | same result in each case, since you'd end up with two distinct references"},{"LineComment":" | which could be updated independently of each other."},{"LineComment":" |"},{"LineComment":" | _Note_: `Control.Monad.ST` provides a pure alternative to `Ref` when"},{"LineComment":" | mutation is restricted to a local scope."}],"decls":[{"annotation":{"meta":null,"sourceSpan":{"end":[0,0],"start":[0,0]}},"bindType":"NonRec","expression":{"abstraction":{"annotation":{"meta":{"metaType":"IsForeign"},"sourceSpan":{"end":[70,19],"start":[70,15]}},"type":"Var","value":{"identifier":"void","moduleName":["Data","Functor"]}},"annotation":{"meta":{"metaType":"IsSyntheticApp"},"sourceSpan":{"end":[70,19],"start":[70,15]}},"argument":{"annotation":{"meta":null,"sourceSpan":{"end":[0,0],"start":[0,0]}},"type":"Var","value":{"identifier":"functorEffect","moduleName":["Effect"]}},"type":"App"},"identifier":"void"},{"annotation":{"meta":null,"sourceSpan":{"end":[46,37],"start":[46,1]}},"bindType":"NonRec","expression":{"annotation":{"meta":{"metaType":"IsForeign"},"sourceSpan":{"end":[47,11],"start":[47,7]}},"type":"Var","value":{"identifier":"_new","moduleName":["Effect","Ref"]}},"identifier":"new"},{"annotation":{"meta":null,"sourceSpan":{"end":[58,78],"start":[58,1]}},"bindType":"NonRec","expression":{"annotation":{"meta":{"metaType":"IsForeign"},"sourceSpan":{"end":[59,21],"start":[59,11]}},"type":"Var","value":{"identifier":"modifyImpl","moduleName":["Effect","Ref"]}},"identifier":"modify'"},{"annotation":{"meta":null,"sourceSpan":{"end":[65,50],"start":[65,1]}},"bindType":"NonRec","expression":{"annotation":{"meta":null,"sourceSpan":{"end":[65,50],"start":[65,1]}},"argument":"f","body":{"abstraction":{"annotation":{"meta":null,"sourceSpan":{"end":[66,19],"start":[66,12]}},"type":"Var","value":{"identifier":"modify'","moduleName":["Effect","Ref"]}},"annotation":{"meta":null,"sourceSpan":{"end":[66,66],"start":[66,12]}},"argument":{"annotation":{"meta":null,"sourceSpan":{"end":[66,66],"start":[66,20]}},"argument":"s","body":{"annotation":{"meta":null,"sourceSpan":{"end":[66,66],"start":[66,26]}},"binds":[{"annotation":{"meta":null,"sourceSpan":{"end":[66,38],"start":[66,30]}},"bindType":"NonRec","expression":{"abstraction":{"annotation":{"meta":null,"sourceSpan":{"end":[66,36],"start":[66,35]}},"type":"Var","value":{"identifier":"f","sourcePos":[66,1]}},"annotation":{"meta":null,"sourceSpan":{"end":[66,38],"start":[66,35]}},"argument":{"annotation":{"meta":null,"sourceSpan":{"end":[66,38],"start":[66,37]}},"type":"Var","value":{"identifier":"s","sourcePos":[66,21]}},"type":"App"},"identifier":"s'"}],"expression":{"annotation":{"meta":null,"sourceSpan":{"end":[66,66],"start":[66,42]}},"type":"Literal","value":{"literalType":"ObjectLiteral","value":[["state",{"annotation":{"meta":null,"sourceSpan":{"end":[66,53],"start":[66,51]}},"type":"Var","value":{"identifier":"s'","sourcePos":[66,30]}}],["value",{"annotation":{"meta":null,"sourceSpan":{"end":[66,64],"start":[66,62]}},"type":"Var","value":{"identifier":"s'","sourcePos":[66,30]}}]]}},"type":"Let"},"type":"Abs"},"type":"App"},"type":"Abs"},"identifier":"modify"},{"annotation":{"meta":null,"sourceSpan":{"end":[69,54],"start":[69,1]}},"bindType":"NonRec","expression":{"annotation":{"meta":null,"sourceSpan":{"end":[69,54],"start":[69,1]}},"argument":"f","body":{"annotation":{"meta":null,"sourceSpan":{"end":[69,54],"start":[69,1]}},"argument":"s","body":{"abstraction":{"annotation":{"meta":null,"sourceSpan":{"end":[0,0],"start":[0,0]}},"type":"Var","value":{"identifier":"void","moduleName":["Effect","Ref"]}},"annotation":{"meta":null,"sourceSpan":{"end":[70,32],"start":[70,15]}},"argument":{"abstraction":{"abstraction":{"annotation":{"meta":null,"sourceSpan":{"end":[70,28],"start":[70,22]}},"type":"Var","value":{"identifier":"modify","moduleName":["Effect","Ref"]}},"annotation":{"meta":null,"sourceSpan":{"end":[70,30],"start":[70,22]}},"argument":{"annotation":{"meta":null,"sourceSpan":{"end":[70,30],"start":[70,29]}},"type":"Var","value":{"identifier":"f","sourcePos":[70,1]}},"type":"App"},"annotation":{"meta":null,"sourceSpan":{"end":[70,32],"start":[70,22]}},"argument":{"annotation":{"meta":null,"sourceSpan":{"end":[70,32],"start":[70,31]}},"type":"Var","value":{"identifier":"s","sourcePos":[70,1]}},"type":"App"},"type":"App"},"type":"Abs"},"type":"Abs"},"identifier":"modify_"}],"exports":["new","newWithSelf","read","modify'","modify","modify_","write"],"foreign":["_new","newWithSelf","read","modifyImpl","write"],"imports":[{"annotation":{"meta":null,"sourceSpan":{"end":[73,60],"start":[22,1]}},"moduleName":["Data","Function"]},{"annotation":{"meta":null,"sourceSpan":{"end":[73,60],"start":[22,1]}},"moduleName":["Data","Functor"]},{"annotation":{"meta":null,"sourceSpan":{"end":[73,60],"start":[22,1]}},"moduleName":["Effect"]},{"annotation":{"meta":null,"sourceSpan":{"end":[73,60],"start":[22,1]}},"moduleName":["Effect","Ref"]},{"annotation":{"meta":null,"sourceSpan":{"end":[33,15],"start":[33,1]}},"moduleName":["Prelude"]},{"annotation":{"meta":null,"sourceSpan":{"end":[73,60],"start":[22,1]}},"moduleName":["Prim"]}],"moduleName":["Effect","Ref"],"modulePath":".spago/packages/refs-6.0.0/src/Effect/Ref.purs","reExports":{},"sourceSpan":{"end":[73,60],"start":[22,1]}}