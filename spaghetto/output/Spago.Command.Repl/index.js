// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Registry_PackageName from "../Registry.PackageName/index.js";
import * as Spago_Command_Build from "../Spago.Command.Build/index.js";
import * as Spago_Config from "../Spago.Config/index.js";
import * as Spago_Core_Prelude from "../Spago.Core.Prelude/index.js";
import * as Spago_Prelude from "../Spago.Prelude/index.js";
import * as Spago_Purs from "../Spago.Purs/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Spago_Core_Prelude.bindSpago);
var ask = /* #__PURE__ */ Control_Monad_Reader_Class.ask(Spago_Core_Prelude.monadAskSpago);
var pure = /* #__PURE__ */ Control_Applicative.pure(Spago_Core_Prelude.applicativeSpago);
var filterWithKey = /* #__PURE__ */ Data_Map_Internal.filterWithKey(Registry_PackageName.ordPackageName);
var eq = /* #__PURE__ */ Data_Eq.eq(Registry_PackageName.eqPackageName);
var runSpago = /* #__PURE__ */ Spago_Core_Prelude.runSpago(Spago_Core_Prelude.monadAffSpago);
var $$void = /* #__PURE__ */ Data_Functor["void"](Spago_Core_Prelude.functorSpago);
var supportPackageName = /* #__PURE__ */ Spago_Prelude.unsafeFromRight(/* #__PURE__ */ Registry_PackageName.parse("psci-support"));
var supportPackage = function (packageSet) {
    return bind(ask)(function (v) {
        if (packageSet instanceof Spago_Config.PackageSet) {
            return pure(filterWithKey(function (k) {
                return function (_v) {
                    return eq(k)(supportPackageName);
                };
            })(packageSet.value0));
        };
        if (packageSet instanceof Spago_Config.Registry) {
            return bind(runSpago({
                logOptions: v.logOptions
            })(v.getMetadata(supportPackageName)))(function (maybeMetadata) {
                return pure((function () {
                    if (maybeMetadata instanceof Data_Either.Right) {
                        var v1 = Data_Map_Internal.findMax(maybeMetadata.value0.published);
                        if (v1 instanceof Data_Maybe.Nothing) {
                            return Data_Map_Internal.empty;
                        };
                        if (v1 instanceof Data_Maybe.Just) {
                            return Data_Map_Internal.singleton(supportPackageName)(new Spago_Config.RegistryVersion(v1.value0.key));
                        };
                        throw new Error("Failed pattern match at Spago.Command.Repl (line 53, column 38 - line 55, column 81): " + [ v1.constructor.name ]);
                    };
                    if (maybeMetadata instanceof Data_Either.Left) {
                        return Data_Map_Internal.empty;
                    };
                    throw new Error("Failed pattern match at Spago.Command.Repl (line 52, column 12 - line 56, column 31): " + [ maybeMetadata.constructor.name ]);
                })());
            });
        };
        throw new Error("Failed pattern match at Spago.Command.Repl (line 47, column 3 - line 56, column 31): " + [ packageSet.constructor.name ]);
    });
};
var run = /* #__PURE__ */ bind(ask)(function (v) {
    var globs = Spago_Command_Build.getBuildGlobs({
        selected: v.selected,
        dependencies: v.dependencies,
        depsOnly: v.depsOnly,
        withTests: true
    });
    return $$void(runSpago({
        purs: v.purs,
        logOptions: v.logOptions
    })(Spago_Purs.repl(globs)(v.pursArgs)));
});
export {
    run,
    supportPackage
};
