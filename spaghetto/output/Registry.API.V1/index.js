// Generated by purs version 0.15.10
import * as Data_Codec from "../Data.Codec/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Codec_Argonaut_Record from "../Data.Codec.Argonaut.Record/index.js";
import * as Data_Codec_Argonaut_Sum from "../Data.Codec.Argonaut.Sum/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Formatter_DateTime from "../Data.Formatter.DateTime/index.js";
import * as Data_Generic_Rep from "../Data.Generic.Rep/index.js";
import * as Data_Lens_Iso_Newtype from "../Data.Lens.Iso.Newtype/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Profunctor from "../Data.Profunctor/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Registry_Internal_Codec from "../Registry.Internal.Codec/index.js";
import * as Registry_Internal_Format from "../Registry.Internal.Format/index.js";
import * as Registry_PackageName from "../Registry.PackageName/index.js";
import * as Routing_Duplex from "../Routing.Duplex/index.js";
import * as Routing_Duplex_Generic from "../Routing.Duplex.Generic/index.js";
import * as Routing_Duplex_Generic_Syntax from "../Routing.Duplex.Generic.Syntax/index.js";
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showString);
var show1 = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var gsep = /* #__PURE__ */ Routing_Duplex_Generic_Syntax.gsep(/* #__PURE__ */ Routing_Duplex_Generic_Syntax.gsepStringRoute(Routing_Duplex_Generic.gRouteNoArguments));
var levelIsSymbol = {
    reflectSymbol: function () {
        return "level";
    }
};
var object = /* #__PURE__ */ Data_Codec_Argonaut_Record.object();
var rowListCodecCons = /* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(Data_Codec_Argonaut_Record.rowListCodecNil)()();
var jobIdIsSymbol = {
    reflectSymbol: function () {
        return "jobId";
    }
};
var Debug = /* #__PURE__ */ (function () {
    function Debug() {

    };
    Debug.value = new Debug();
    return Debug;
})();
var Info = /* #__PURE__ */ (function () {
    function Info() {

    };
    Info.value = new Info();
    return Info;
})();
var Warn = /* #__PURE__ */ (function () {
    function Warn() {

    };
    Warn.value = new Warn();
    return Warn;
})();
var $$Error = /* #__PURE__ */ (function () {
    function $$Error() {

    };
    $$Error.value = new $$Error();
    return $$Error;
})();
var PublishJob = /* #__PURE__ */ (function () {
    function PublishJob() {

    };
    PublishJob.value = new PublishJob();
    return PublishJob;
})();
var UnpublishJob = /* #__PURE__ */ (function () {
    function UnpublishJob() {

    };
    UnpublishJob.value = new UnpublishJob();
    return UnpublishJob;
})();
var TransferJob = /* #__PURE__ */ (function () {
    function TransferJob() {

    };
    TransferJob.value = new TransferJob();
    return TransferJob;
})();
var JobId = function (x) {
    return x;
};
var Publish = /* #__PURE__ */ (function () {
    function Publish() {

    };
    Publish.value = new Publish();
    return Publish;
})();
var Unpublish = /* #__PURE__ */ (function () {
    function Unpublish() {

    };
    Unpublish.value = new Unpublish();
    return Unpublish;
})();
var Transfer = /* #__PURE__ */ (function () {
    function Transfer() {

    };
    Transfer.value = new Transfer();
    return Transfer;
})();
var Jobs = /* #__PURE__ */ (function () {
    function Jobs() {

    };
    Jobs.value = new Jobs();
    return Jobs;
})();
var Job = /* #__PURE__ */ (function () {
    function Job(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Job.create = function (value0) {
        return function (value1) {
            return new Job(value0, value1);
        };
    };
    return Job;
})();
var newtypeJobId_ = {
    Coercible0: function () {
        return undefined;
    }
};
var genericRoute_ = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return Publish.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return Unpublish.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
            return Transfer.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
            return Jobs.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inr))) {
            return new Job(x.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value1);
        };
        throw new Error("Failed pattern match at Registry.API.V1 (line 37, column 1 - line 37, column 32): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof Publish) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof Unpublish) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
        };
        if (x instanceof Transfer) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
        };
        if (x instanceof Jobs) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
        };
        if (x instanceof Job) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Product(x.value0, x.value1)))));
        };
        throw new Error("Failed pattern match at Registry.API.V1 (line 37, column 1 - line 37, column 32): " + [ x.constructor.name ]);
    }
};
var eqLogLevel = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Debug && y instanceof Debug) {
                return true;
            };
            if (x instanceof Info && y instanceof Info) {
                return true;
            };
            if (x instanceof Warn && y instanceof Warn) {
                return true;
            };
            if (x instanceof $$Error && y instanceof $$Error) {
                return true;
            };
            return false;
        };
    }
};
var ordLogLevel = {
    compare: function (x) {
        return function (y) {
            if (x instanceof Debug && y instanceof Debug) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Debug) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Debug) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Info && y instanceof Info) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Info) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Info) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Warn && y instanceof Warn) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Warn) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Warn) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof $$Error && y instanceof $$Error) {
                return Data_Ordering.EQ.value;
            };
            throw new Error("Failed pattern match at Registry.API.V1 (line 0, column 0 - line 0, column 0): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqLogLevel;
    }
};
var eqJobType = {
    eq: function (x) {
        return function (y) {
            if (x instanceof PublishJob && y instanceof PublishJob) {
                return true;
            };
            if (x instanceof UnpublishJob && y instanceof UnpublishJob) {
                return true;
            };
            if (x instanceof TransferJob && y instanceof TransferJob) {
                return true;
            };
            return false;
        };
    }
};
var timestampP = /* #__PURE__ */ (function () {
    var printTimestamp = function (t) {
        return Data_Formatter_DateTime.format(Registry_Internal_Format.iso8601DateTime)(t);
    };
    var parseTimestamp = function (s) {
        return Data_Formatter_DateTime.unformat(Registry_Internal_Format.iso8601DateTime)(s);
    };
    return Routing_Duplex.as(printTimestamp)(parseTimestamp);
})();
var printLogLevel = function (v) {
    if (v instanceof Debug) {
        return "DEBUG";
    };
    if (v instanceof Info) {
        return "INFO";
    };
    if (v instanceof Warn) {
        return "WARN";
    };
    if (v instanceof $$Error) {
        return "ERROR";
    };
    throw new Error("Failed pattern match at Registry.API.V1 (line 141, column 17 - line 145, column 19): " + [ v.constructor.name ]);
};
var printJobType = function (v) {
    if (v instanceof PublishJob) {
        return "publish";
    };
    if (v instanceof UnpublishJob) {
        return "unpublish";
    };
    if (v instanceof TransferJob) {
        return "transfer";
    };
    throw new Error("Failed pattern match at Registry.API.V1 (line 112, column 16 - line 115, column 28): " + [ v.constructor.name ]);
};
var parseLogLevel = function (v) {
    if (v === "DEBUG") {
        return new Data_Either.Right(Debug.value);
    };
    if (v === "INFO") {
        return new Data_Either.Right(Info.value);
    };
    if (v === "WARN") {
        return new Data_Either.Right(Warn.value);
    };
    if (v === "ERROR") {
        return new Data_Either.Right($$Error.value);
    };
    return new Data_Either.Left("Invalid log level: " + v);
};
var parseJobType = function (v) {
    if (v === "publish") {
        return new Data_Either.Right(PublishJob.value);
    };
    if (v === "unpublish") {
        return new Data_Either.Right(UnpublishJob.value);
    };
    if (v === "transfer") {
        return new Data_Either.Right(TransferJob.value);
    };
    return new Data_Either.Left("Invalid job type " + show(v));
};
var logLevelToPriority = function (v) {
    if (v instanceof Debug) {
        return 0;
    };
    if (v instanceof Info) {
        return 10;
    };
    if (v instanceof Warn) {
        return 20;
    };
    if (v instanceof $$Error) {
        return 30;
    };
    throw new Error("Failed pattern match at Registry.API.V1 (line 149, column 22 - line 153, column 14): " + [ v.constructor.name ]);
};
var logLevelP = /* #__PURE__ */ Routing_Duplex.as(printLogLevel)(parseLogLevel);
var logLevelFromPriority = function (v) {
    if (v === 0) {
        return new Data_Either.Right(Debug.value);
    };
    if (v === 10) {
        return new Data_Either.Right(Info.value);
    };
    if (v === 20) {
        return new Data_Either.Right(Warn.value);
    };
    if (v === 30) {
        return new Data_Either.Right($$Error.value);
    };
    return new Data_Either.Left("Invalid log level priority: " + show1(v));
};
var jobTypeCodec = /* #__PURE__ */ Data_Codec_Argonaut_Sum.enumSum(printJobType)(function ($174) {
    return Data_Either.hush(parseJobType($174));
});
var jobIdS = /* #__PURE__ */ Data_Lens_Iso_Newtype["_Newtype"]()()(Routing_Duplex.profunctorRouteDuplex)(Routing_Duplex.segment);
var routes = /* #__PURE__ */ Routing_Duplex.root(/* #__PURE__ */ Routing_Duplex.prefix("api")(/* #__PURE__ */ Routing_Duplex.prefix("v1")(/* #__PURE__ */ Routing_Duplex_Generic.sum(genericRoute_)(/* #__PURE__ */ Routing_Duplex_Generic.gRouteSum(/* #__PURE__ */ Routing_Duplex_Generic.gRouteConstructor({
    reflectSymbol: function () {
        return "Publish";
    }
})()(Routing_Duplex_Generic.gRouteNoArguments))(/* #__PURE__ */ Routing_Duplex_Generic.gRouteSum(/* #__PURE__ */ Routing_Duplex_Generic.gRouteConstructor({
    reflectSymbol: function () {
        return "Unpublish";
    }
})()(Routing_Duplex_Generic.gRouteNoArguments))(/* #__PURE__ */ Routing_Duplex_Generic.gRouteSum(/* #__PURE__ */ Routing_Duplex_Generic.gRouteConstructor({
    reflectSymbol: function () {
        return "Transfer";
    }
})()(Routing_Duplex_Generic.gRouteNoArguments))(/* #__PURE__ */ Routing_Duplex_Generic.gRouteSum(/* #__PURE__ */ Routing_Duplex_Generic.gRouteConstructor({
    reflectSymbol: function () {
        return "Jobs";
    }
})()(Routing_Duplex_Generic.gRouteNoArguments))(/* #__PURE__ */ Routing_Duplex_Generic.gRouteConstructor({
    reflectSymbol: function () {
        return "Job";
    }
})()(Routing_Duplex_Generic.gRouteProduct))))))({
    Publish: /* #__PURE__ */ gsep("publish")(Routing_Duplex_Generic.noArgs),
    Unpublish: /* #__PURE__ */ gsep("unpublish")(Routing_Duplex_Generic.noArgs),
    Transfer: /* #__PURE__ */ gsep("transfer")(Routing_Duplex_Generic.noArgs),
    Jobs: /* #__PURE__ */ gsep("jobs")(Routing_Duplex_Generic.noArgs),
    Job: /* #__PURE__ */ Routing_Duplex_Generic_Syntax.gsep(/* #__PURE__ */ Routing_Duplex_Generic_Syntax.gsepStringRoute(Routing_Duplex_Generic.gRouteProduct))("jobs")(/* #__PURE__ */ Routing_Duplex_Generic_Syntax.gparams(/* #__PURE__ */ Routing_Duplex_Generic_Syntax.gparamsRoute(/* #__PURE__ */ Routing_Duplex.routeDuplexParams()(/* #__PURE__ */ Routing_Duplex.buildParamsCons(levelIsSymbol)()()()()(/* #__PURE__ */ Routing_Duplex.buildParamsCons({
        reflectSymbol: function () {
            return "since";
        }
    })()()()()(Routing_Duplex.buildParamsNil)))))(jobIdS)({
        level: function ($175) {
            return Routing_Duplex.optional(logLevelP(Routing_Duplex.string($175)));
        },
        since: function ($176) {
            return Routing_Duplex.optional(timestampP(Routing_Duplex.string($176)));
        }
    }))
}))));
var jobIdCodec = /* #__PURE__ */ Data_Profunctor.wrapIso(/* #__PURE__ */ Data_Codec.profunctorCodec(Data_Either.functorEither))()(JobId)(Data_Codec_Argonaut.string);
var logLineCodec = /* #__PURE__ */ object(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ rowListCodecCons({
    reflectSymbol: function () {
        return "timestamp";
    }
}))()()({
    reflectSymbol: function () {
        return "message";
    }
}))()()(levelIsSymbol))()()(jobIdIsSymbol))("LogLine")({
    level: /* #__PURE__ */ Data_Codec_Argonaut_Sum.enumSum(printLogLevel)(function ($177) {
        return Data_Either.hush(parseLogLevel($177));
    }),
    message: Data_Codec_Argonaut.string,
    jobId: jobIdCodec,
    timestamp: Registry_Internal_Codec.iso8601DateTime
});
var jobCreatedResponseCodec = /* #__PURE__ */ object(/* #__PURE__ */ rowListCodecCons(jobIdIsSymbol))("JobCreatedResponse")({
    jobId: jobIdCodec
});
var jobCodec = /* #__PURE__ */ object(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecConsOptional(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ rowListCodecCons({
    reflectSymbol: function () {
        return "success";
    }
}))()()({
    reflectSymbol: function () {
        return "ref";
    }
}))()()({
    reflectSymbol: function () {
        return "packageName";
    }
}))()()({
    reflectSymbol: function () {
        return "logs";
    }
}))()()({
    reflectSymbol: function () {
        return "jobType";
    }
}))()()(jobIdIsSymbol))()()({
    reflectSymbol: function () {
        return "finishedAt";
    }
}))()()({
    reflectSymbol: function () {
        return "createdAt";
    }
}))("Job")({
    jobId: jobIdCodec,
    jobType: jobTypeCodec,
    packageName: Registry_PackageName.codec,
    ref: Data_Codec_Argonaut.string,
    createdAt: Registry_Internal_Codec.iso8601DateTime,
    finishedAt: /* #__PURE__ */ Data_Codec_Argonaut_Record.optional(Registry_Internal_Codec.iso8601DateTime),
    success: Data_Codec_Argonaut["boolean"],
    logs: /* #__PURE__ */ Data_Codec_Argonaut.array(logLineCodec)
});
export {
    Publish,
    Unpublish,
    Transfer,
    Jobs,
    Job,
    routes,
    jobIdS,
    logLevelP,
    timestampP,
    jobCreatedResponseCodec,
    jobCodec,
    JobId,
    jobIdCodec,
    PublishJob,
    UnpublishJob,
    TransferJob,
    parseJobType,
    printJobType,
    jobTypeCodec,
    logLineCodec,
    Debug,
    Info,
    Warn,
    $$Error as Error,
    printLogLevel,
    logLevelToPriority,
    logLevelFromPriority,
    parseLogLevel,
    genericRoute_,
    newtypeJobId_,
    eqJobType,
    eqLogLevel,
    ordLogLevel
};
//# sourceMappingURL=index.js.map
