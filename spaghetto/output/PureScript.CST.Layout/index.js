// Generated by purs version 0.15.10
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as PureScript_CST_Types from "../PureScript.CST.Types/index.js";
var find = /* #__PURE__ */ Data_Foldable.find(Data_List_Types.foldableList);
var LytRoot = /* #__PURE__ */ (function () {
    function LytRoot() {

    };
    LytRoot.value = new LytRoot();
    return LytRoot;
})();
var LytTopDecl = /* #__PURE__ */ (function () {
    function LytTopDecl() {

    };
    LytTopDecl.value = new LytTopDecl();
    return LytTopDecl;
})();
var LytTopDeclHead = /* #__PURE__ */ (function () {
    function LytTopDeclHead() {

    };
    LytTopDeclHead.value = new LytTopDeclHead();
    return LytTopDeclHead;
})();
var LytDeclGuard = /* #__PURE__ */ (function () {
    function LytDeclGuard() {

    };
    LytDeclGuard.value = new LytDeclGuard();
    return LytDeclGuard;
})();
var LytCase = /* #__PURE__ */ (function () {
    function LytCase() {

    };
    LytCase.value = new LytCase();
    return LytCase;
})();
var LytCaseBinders = /* #__PURE__ */ (function () {
    function LytCaseBinders() {

    };
    LytCaseBinders.value = new LytCaseBinders();
    return LytCaseBinders;
})();
var LytCaseGuard = /* #__PURE__ */ (function () {
    function LytCaseGuard() {

    };
    LytCaseGuard.value = new LytCaseGuard();
    return LytCaseGuard;
})();
var LytLambdaBinders = /* #__PURE__ */ (function () {
    function LytLambdaBinders() {

    };
    LytLambdaBinders.value = new LytLambdaBinders();
    return LytLambdaBinders;
})();
var LytParen = /* #__PURE__ */ (function () {
    function LytParen() {

    };
    LytParen.value = new LytParen();
    return LytParen;
})();
var LytBrace = /* #__PURE__ */ (function () {
    function LytBrace() {

    };
    LytBrace.value = new LytBrace();
    return LytBrace;
})();
var LytSquare = /* #__PURE__ */ (function () {
    function LytSquare() {

    };
    LytSquare.value = new LytSquare();
    return LytSquare;
})();
var LytIf = /* #__PURE__ */ (function () {
    function LytIf() {

    };
    LytIf.value = new LytIf();
    return LytIf;
})();
var LytThen = /* #__PURE__ */ (function () {
    function LytThen() {

    };
    LytThen.value = new LytThen();
    return LytThen;
})();
var LytProperty = /* #__PURE__ */ (function () {
    function LytProperty() {

    };
    LytProperty.value = new LytProperty();
    return LytProperty;
})();
var LytForall = /* #__PURE__ */ (function () {
    function LytForall() {

    };
    LytForall.value = new LytForall();
    return LytForall;
})();
var LytTick = /* #__PURE__ */ (function () {
    function LytTick() {

    };
    LytTick.value = new LytTick();
    return LytTick;
})();
var LytLet = /* #__PURE__ */ (function () {
    function LytLet() {

    };
    LytLet.value = new LytLet();
    return LytLet;
})();
var LytLetStmt = /* #__PURE__ */ (function () {
    function LytLetStmt() {

    };
    LytLetStmt.value = new LytLetStmt();
    return LytLetStmt;
})();
var LytWhere = /* #__PURE__ */ (function () {
    function LytWhere() {

    };
    LytWhere.value = new LytWhere();
    return LytWhere;
})();
var LytOf = /* #__PURE__ */ (function () {
    function LytOf() {

    };
    LytOf.value = new LytOf();
    return LytOf;
})();
var LytDo = /* #__PURE__ */ (function () {
    function LytDo() {

    };
    LytDo.value = new LytDo();
    return LytDo;
})();
var LytAdo = /* #__PURE__ */ (function () {
    function LytAdo() {

    };
    LytAdo.value = new LytAdo();
    return LytAdo;
})();
var lytToken = function (pos) {
    return function (value) {
        return {
            range: {
                start: pos,
                end: pos
            },
            leadingComments: [  ],
            trailingComments: [  ],
            value: value
        };
    };
};
var isTopDecl = function (tokPos) {
    return function (v) {
        if (v instanceof Data_List_Types.Cons && (v.value0.value1 instanceof LytWhere && (v.value1 instanceof Data_List_Types.Cons && (v.value1.value0.value1 instanceof LytRoot && (v.value1.value1 instanceof Data_List_Types.Nil && tokPos.column === v.value0.value0.column))))) {
            return true;
        };
        return false;
    };
};
var isIndented = function (v) {
    if (v instanceof LytLet) {
        return true;
    };
    if (v instanceof LytLetStmt) {
        return true;
    };
    if (v instanceof LytWhere) {
        return true;
    };
    if (v instanceof LytOf) {
        return true;
    };
    if (v instanceof LytDo) {
        return true;
    };
    if (v instanceof LytAdo) {
        return true;
    };
    return false;
};
var eqLayoutDelim = {
    eq: function (x) {
        return function (y) {
            if (x instanceof LytRoot && y instanceof LytRoot) {
                return true;
            };
            if (x instanceof LytTopDecl && y instanceof LytTopDecl) {
                return true;
            };
            if (x instanceof LytTopDeclHead && y instanceof LytTopDeclHead) {
                return true;
            };
            if (x instanceof LytDeclGuard && y instanceof LytDeclGuard) {
                return true;
            };
            if (x instanceof LytCase && y instanceof LytCase) {
                return true;
            };
            if (x instanceof LytCaseBinders && y instanceof LytCaseBinders) {
                return true;
            };
            if (x instanceof LytCaseGuard && y instanceof LytCaseGuard) {
                return true;
            };
            if (x instanceof LytLambdaBinders && y instanceof LytLambdaBinders) {
                return true;
            };
            if (x instanceof LytParen && y instanceof LytParen) {
                return true;
            };
            if (x instanceof LytBrace && y instanceof LytBrace) {
                return true;
            };
            if (x instanceof LytSquare && y instanceof LytSquare) {
                return true;
            };
            if (x instanceof LytIf && y instanceof LytIf) {
                return true;
            };
            if (x instanceof LytThen && y instanceof LytThen) {
                return true;
            };
            if (x instanceof LytProperty && y instanceof LytProperty) {
                return true;
            };
            if (x instanceof LytForall && y instanceof LytForall) {
                return true;
            };
            if (x instanceof LytTick && y instanceof LytTick) {
                return true;
            };
            if (x instanceof LytLet && y instanceof LytLet) {
                return true;
            };
            if (x instanceof LytLetStmt && y instanceof LytLetStmt) {
                return true;
            };
            if (x instanceof LytWhere && y instanceof LytWhere) {
                return true;
            };
            if (x instanceof LytOf && y instanceof LytOf) {
                return true;
            };
            if (x instanceof LytDo && y instanceof LytDo) {
                return true;
            };
            if (x instanceof LytAdo && y instanceof LytAdo) {
                return true;
            };
            return false;
        };
    }
};
var eq1 = /* #__PURE__ */ Data_Eq.eq(eqLayoutDelim);
var insertLayout = function (v) {
    return function (nextPos) {
        return function (stack) {
            var sepP = function (lytPos) {
                return v.range.start.column === lytPos.column && v.range.start.line !== lytPos.line;
            };
            var pushStack = function (lytPos) {
                return function (lyt) {
                    return function (v1) {
                        return new Data_Tuple.Tuple(new Data_List_Types.Cons(new Data_Tuple.Tuple(lytPos, lyt), v1.value0), v1.value1);
                    };
                };
            };
            var popStack = function (v1) {
                return function (v2) {
                    if (v2.value0 instanceof Data_List_Types.Cons && v1(v2.value0.value0.value1)) {
                        return new Data_Tuple.Tuple(v2.value0.value1, v2.value1);
                    };
                    return v2;
                };
            };
            var offsideP = function (lytPos) {
                return function (lyt) {
                    return isIndented(lyt) && v.range.start.column < lytPos.column;
                };
            };
            var offsideEndP = function (lytPos) {
                return function (lyt) {
                    return isIndented(lyt) && v.range.start.column <= lytPos.column;
                };
            };
            var insertToken = function (token) {
                return function (v1) {
                    return new Data_Tuple.Tuple(v1.value0, Data_Array.snoc(v1.value1)(new Data_Tuple.Tuple(token, v1.value0)));
                };
            };
            var insertStart = function (lyt) {
                return function (v1) {
                    var v2 = find(function ($307) {
                        return isIndented(Data_Tuple.snd($307));
                    })(v1.value0);
                    if (v2 instanceof Data_Maybe.Just && nextPos.column <= v2.value0.value0.column) {
                        return v1;
                    };
                    return insertToken(lytToken(nextPos)(new PureScript_CST_Types.TokLayoutStart(nextPos.column)))(pushStack(nextPos)(lyt)(v1));
                };
            };
            var insertEnd = function (indent) {
                return insertToken(lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutEnd(indent)));
            };
            var indentedP = Data_Function["const"](isIndented);
            var indentSepP = function (lytPos) {
                return function (lyt) {
                    return isIndented(lyt) && sepP(lytPos);
                };
            };
            var insertSep = function (v1) {
                var sepTok = lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutSep(v.range.start.column));
                if (v1.value0 instanceof Data_List_Types.Cons && (v1.value0.value0.value1 instanceof LytTopDecl && sepP(v1.value0.value0.value0))) {
                    return insertToken(sepTok)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
                };
                if (v1.value0 instanceof Data_List_Types.Cons && (v1.value0.value0.value1 instanceof LytTopDeclHead && sepP(v1.value0.value0.value0))) {
                    return insertToken(sepTok)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
                };
                if (v1.value0 instanceof Data_List_Types.Cons && indentSepP(v1.value0.value0.value0)(v1.value0.value0.value1)) {
                    if (v1.value0.value0.value1 instanceof LytOf) {
                        return pushStack(v.range.start)(LytCaseBinders.value)(insertToken(sepTok)(v1));
                    };
                    return insertToken(sepTok)(v1);
                };
                return v1;
            };
            var collapse = function (p) {
                var go = function ($copy_v1) {
                    return function ($copy_v2) {
                        var $tco_var_v1 = $copy_v1;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v1, v2) {
                            if (v1 instanceof Data_List_Types.Cons && p(v1.value0.value0)(v1.value0.value1)) {
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = (function () {
                                    var $120 = isIndented(v1.value0.value1);
                                    if ($120) {
                                        return Data_Array.snoc(v2)(new Data_Tuple.Tuple(lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutEnd(v1.value0.value0.column)), v1.value1));
                                    };
                                    return v2;
                                })();
                                return;
                            };
                            $tco_done = true;
                            return new Data_Tuple.Tuple(v1, v2);
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                        };
                        return $tco_result;
                    };
                };
                return Data_Tuple.uncurry(go);
            };
            var insertDefault = function (state) {
                return insertToken(v)(insertSep(collapse(offsideP)(state)));
            };
            var insertKwProperty = function (k) {
                return function (state) {
                    var v1 = insertDefault(state);
                    if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytProperty) {
                        return new Data_Tuple.Tuple(v1.value0.value1, v1.value1);
                    };
                    return k(v1);
                };
            };
            var insert = function (v1) {
                if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "data")) {
                    var v2 = insertDefault(v1);
                    if (isTopDecl(v.range.start)(v2.value0)) {
                        return pushStack(v.range.start)(LytTopDecl.value)(v2);
                    };
                    return popStack(function (v3) {
                        return eq1(v3)(LytProperty.value);
                    })(v2);
                };
                if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "class")) {
                    var v2 = insertDefault(v1);
                    if (isTopDecl(v.range.start)(v2.value0)) {
                        return pushStack(v.range.start)(LytTopDeclHead.value)(v2);
                    };
                    return popStack(function (v3) {
                        return eq1(v3)(LytProperty.value);
                    })(v2);
                };
                if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "where")) {
                    var whereP = function (v2) {
                        return function (v3) {
                            if (v3 instanceof LytDo) {
                                return true;
                            };
                            return offsideEndP(v2)(v3);
                        };
                    };
                    if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytTopDeclHead) {
                        return insertStart(LytWhere.value)(insertToken(v)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1)));
                    };
                    if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytProperty) {
                        return insertToken(v)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
                    };
                    return insertStart(LytWhere.value)(insertToken(v)(collapse(whereP)(v1)));
                };
                if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "in")) {
                    var inP = function (v2) {
                        return function (v3) {
                            if (v3 instanceof LytLet) {
                                return false;
                            };
                            if (v3 instanceof LytAdo) {
                                return false;
                            };
                            return isIndented(v3);
                        };
                    };
                    var v2 = collapse(inP)(v1);
                    if (v2.value0 instanceof Data_List_Types.Cons && (v2.value0.value0.value1 instanceof LytLetStmt && (v2.value0.value1 instanceof Data_List_Types.Cons && v2.value0.value1.value0.value1 instanceof LytAdo))) {
                        return insertToken(v)(insertEnd(v2.value0.value1.value0.value0.column)(insertEnd(v2.value0.value0.value0.column)(new Data_Tuple.Tuple(v2.value0.value1.value1, v2.value1))));
                    };
                    if (v2.value0 instanceof Data_List_Types.Cons && isIndented(v2.value0.value0.value1)) {
                        return insertToken(v)(insertEnd(v2.value0.value0.value0.column)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1)));
                    };
                    return popStack(function (v3) {
                        return eq1(v3)(LytProperty.value);
                    })(insertDefault(v1));
                };
                if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "let")) {
                    var next = function (v2) {
                        if (v2.value0 instanceof Data_List_Types.Cons && (v2.value0.value0.value1 instanceof LytDo && v2.value0.value0.value0.column === v.range.start.column)) {
                            return insertStart(LytLetStmt.value)(v2);
                        };
                        if (v2.value0 instanceof Data_List_Types.Cons && (v2.value0.value0.value1 instanceof LytAdo && v2.value0.value0.value0.column === v.range.start.column)) {
                            return insertStart(LytLetStmt.value)(v2);
                        };
                        return insertStart(LytLet.value)(v2);
                    };
                    return insertKwProperty(next)(v1);
                };
                if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value1 === "do") {
                    return insertKwProperty(insertStart(LytDo.value))(v1);
                };
                if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value1 === "ado") {
                    return insertKwProperty(insertStart(LytAdo.value))(v1);
                };
                if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "case")) {
                    return insertKwProperty(pushStack(v.range.start)(LytCase.value))(v1);
                };
                if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "of")) {
                    var v2 = collapse(indentedP)(v1);
                    if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytCase) {
                        return pushStack(nextPos)(LytCaseBinders.value)(insertStart(LytOf.value)(insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1))));
                    };
                    return popStack(function (v3) {
                        return eq1(v3)(LytProperty.value);
                    })(insertDefault(v2));
                };
                if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "if")) {
                    return insertKwProperty(pushStack(v.range.start)(LytIf.value))(v1);
                };
                if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "then")) {
                    var v2 = collapse(indentedP)(v1);
                    if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytIf) {
                        return pushStack(v.range.start)(LytThen.value)(insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1)));
                    };
                    return popStack(function (v3) {
                        return eq1(v3)(LytProperty.value);
                    })(insertDefault(v1));
                };
                if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "else")) {
                    var v2 = collapse(indentedP)(v1);
                    if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytThen) {
                        return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
                    };
                    var v3 = collapse(offsideP)(v1);
                    if (isTopDecl(v.range.start)(v3.value0)) {
                        return insertToken(v)(v3);
                    };
                    return popStack(function (v4) {
                        return eq1(v4)(LytProperty.value);
                    })(insertToken(v)(insertSep(v3)));
                };
                if (v.value instanceof PureScript_CST_Types.TokForall) {
                    return insertKwProperty(pushStack(v.range.start)(LytForall.value))(v1);
                };
                if (v.value instanceof PureScript_CST_Types.TokBackslash) {
                    return pushStack(v.range.start)(LytLambdaBinders.value)(insertDefault(v1));
                };
                if (v.value instanceof PureScript_CST_Types.TokRightArrow) {
                    var guardP = function (v2) {
                        if (v2 instanceof LytCaseBinders) {
                            return true;
                        };
                        if (v2 instanceof LytCaseGuard) {
                            return true;
                        };
                        if (v2 instanceof LytLambdaBinders) {
                            return true;
                        };
                        return false;
                    };
                    var arrowP = function (v2) {
                        return function (v3) {
                            if (v3 instanceof LytDo) {
                                return true;
                            };
                            if (v3 instanceof LytOf) {
                                return false;
                            };
                            return offsideEndP(v2)(v3);
                        };
                    };
                    return insertToken(v)(popStack(guardP)(collapse(arrowP)(v1)));
                };
                if (v.value instanceof PureScript_CST_Types.TokEquals) {
                    var equalsP = function (v2) {
                        return function (v3) {
                            if (v3 instanceof LytWhere) {
                                return true;
                            };
                            if (v3 instanceof LytLet) {
                                return true;
                            };
                            if (v3 instanceof LytLetStmt) {
                                return true;
                            };
                            return false;
                        };
                    };
                    var v2 = collapse(equalsP)(v1);
                    if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytDeclGuard) {
                        return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
                    };
                    return insertDefault(v1);
                };
                if (v.value instanceof PureScript_CST_Types.TokPipe) {
                    var v2 = collapse(offsideEndP)(v1);
                    if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytOf) {
                        return insertToken(v)(pushStack(v.range.start)(LytCaseGuard.value)(v2));
                    };
                    if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytLet) {
                        return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
                    };
                    if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytLetStmt) {
                        return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
                    };
                    if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytWhere) {
                        return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
                    };
                    return insertDefault(v1);
                };
                if (v.value instanceof PureScript_CST_Types.TokTick) {
                    var v2 = collapse(indentedP)(v1);
                    if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytTick) {
                        return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
                    };
                    return pushStack(v.range.start)(LytTick.value)(insertToken(v)(insertSep(collapse(offsideEndP)(v1))));
                };
                if (v.value instanceof PureScript_CST_Types.TokComma) {
                    var v2 = collapse(indentedP)(v1);
                    if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytBrace) {
                        return pushStack(v.range.start)(LytProperty.value)(insertToken(v)(v2));
                    };
                    return insertToken(v)(v2);
                };
                if (v.value instanceof PureScript_CST_Types.TokDot) {
                    var v2 = insertDefault(v1);
                    if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytForall) {
                        return new Data_Tuple.Tuple(v2.value0.value1, v2.value1);
                    };
                    return pushStack(v.range.start)(LytProperty.value)(v2);
                };
                if (v.value instanceof PureScript_CST_Types.TokLeftParen) {
                    return pushStack(v.range.start)(LytParen.value)(insertDefault(v1));
                };
                if (v.value instanceof PureScript_CST_Types.TokLeftBrace) {
                    return pushStack(v.range.start)(LytProperty.value)(pushStack(v.range.start)(LytBrace.value)(insertDefault(v1)));
                };
                if (v.value instanceof PureScript_CST_Types.TokLeftSquare) {
                    return pushStack(v.range.start)(LytSquare.value)(insertDefault(v1));
                };
                if (v.value instanceof PureScript_CST_Types.TokRightParen) {
                    return insertToken(v)(popStack(function (v2) {
                        return eq1(v2)(LytParen.value);
                    })(collapse(indentedP)(v1)));
                };
                if (v.value instanceof PureScript_CST_Types.TokRightBrace) {
                    return insertToken(v)(popStack(function (v2) {
                        return eq1(v2)(LytBrace.value);
                    })(popStack(function (v2) {
                        return eq1(v2)(LytProperty.value);
                    })(collapse(indentedP)(v1))));
                };
                if (v.value instanceof PureScript_CST_Types.TokRightSquare) {
                    return insertToken(v)(popStack(function (v2) {
                        return eq1(v2)(LytSquare.value);
                    })(collapse(indentedP)(v1)));
                };
                if (v.value instanceof PureScript_CST_Types.TokString) {
                    return popStack(function (v2) {
                        return eq1(v2)(LytProperty.value);
                    })(insertDefault(v1));
                };
                if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value0 instanceof Data_Maybe.Nothing) {
                    return popStack(function (v2) {
                        return eq1(v2)(LytProperty.value);
                    })(insertDefault(v1));
                };
                if (v.value instanceof PureScript_CST_Types.TokOperator) {
                    return insertToken(v)(insertSep(collapse(offsideEndP)(v1)));
                };
                return insertDefault(v1);
            };
            return insert(new Data_Tuple.Tuple(stack, [  ]));
        };
    };
};
var ordLayoutDelim = {
    compare: function (x) {
        return function (y) {
            if (x instanceof LytRoot && y instanceof LytRoot) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytRoot) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytRoot) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytTopDecl && y instanceof LytTopDecl) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytTopDecl) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytTopDecl) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytTopDeclHead && y instanceof LytTopDeclHead) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytTopDeclHead) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytTopDeclHead) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytDeclGuard && y instanceof LytDeclGuard) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytDeclGuard) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytDeclGuard) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytCase && y instanceof LytCase) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytCase) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytCase) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytCaseBinders && y instanceof LytCaseBinders) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytCaseBinders) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytCaseBinders) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytCaseGuard && y instanceof LytCaseGuard) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytCaseGuard) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytCaseGuard) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytLambdaBinders && y instanceof LytLambdaBinders) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytLambdaBinders) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytLambdaBinders) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytParen && y instanceof LytParen) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytParen) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytParen) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytBrace && y instanceof LytBrace) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytBrace) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytBrace) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytSquare && y instanceof LytSquare) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytSquare) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytSquare) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytIf && y instanceof LytIf) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytIf) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytIf) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytThen && y instanceof LytThen) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytThen) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytThen) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytProperty && y instanceof LytProperty) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytProperty) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytProperty) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytForall && y instanceof LytForall) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytForall) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytForall) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytTick && y instanceof LytTick) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytTick) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytTick) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytLet && y instanceof LytLet) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytLet) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytLet) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytLetStmt && y instanceof LytLetStmt) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytLetStmt) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytLetStmt) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytWhere && y instanceof LytWhere) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytWhere) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytWhere) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytOf && y instanceof LytOf) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytOf) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytOf) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytDo && y instanceof LytDo) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LytDo) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LytDo) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LytAdo && y instanceof LytAdo) {
                return Data_Ordering.EQ.value;
            };
            throw new Error("Failed pattern match at PureScript.CST.Layout (line 0, column 0 - line 0, column 0): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqLayoutDelim;
    }
};
var currentIndent = /* #__PURE__ */ (function () {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Types.Cons) {
                if (isIndented(v.value0.value1)) {
                    $tco_done = true;
                    return new Data_Maybe.Just(v.value0.value0);
                };
                if (Data_Boolean.otherwise) {
                    $copy_v = v.value1;
                    return;
                };
            };
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return go;
})();
export {
    LytRoot,
    LytTopDecl,
    LytTopDeclHead,
    LytDeclGuard,
    LytCase,
    LytCaseBinders,
    LytCaseGuard,
    LytLambdaBinders,
    LytParen,
    LytBrace,
    LytSquare,
    LytIf,
    LytThen,
    LytProperty,
    LytForall,
    LytTick,
    LytLet,
    LytLetStmt,
    LytWhere,
    LytOf,
    LytDo,
    LytAdo,
    currentIndent,
    isIndented,
    insertLayout,
    lytToken,
    eqLayoutDelim,
    ordLayoutDelim
};
//# sourceMappingURL=index.js.map
