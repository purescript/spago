// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Options_Applicative_Common from "../Options.Applicative.Common/index.js";
import * as Options_Applicative_Help_Chunk from "../Options.Applicative.Help.Chunk/index.js";
import * as Options_Applicative_Types from "../Options.Applicative.Types/index.js";
import * as Text_PrettyPrint_Leijen from "../Text.PrettyPrint.Leijen/index.js";
var over = /* #__PURE__ */ Data_Newtype.over()();
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var lookup = /* #__PURE__ */ Data_Foldable.lookup(Data_Foldable.foldableArray)(Data_Eq.eqString);
var alt = /* #__PURE__ */ Control_Alt.alt(Data_Maybe.altMaybe);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var apply = /* #__PURE__ */ Control_Apply.apply(Data_Maybe.applyMaybe);
var alt1 = /* #__PURE__ */ Control_Alt.alt(Options_Applicative_Types.parserAlt);
var pure = /* #__PURE__ */ Control_Applicative.pure(Options_Applicative_Types.parserApplicative);
var OptionFields = function (x) {
    return x;
};
var FlagFields = function (x) {
    return x;
};
var DefaultProp = /* #__PURE__ */ (function () {
    function DefaultProp(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DefaultProp.create = function (value0) {
        return function (value1) {
            return new DefaultProp(value0, value1);
        };
    };
    return DefaultProp;
})();
var Mod = /* #__PURE__ */ (function () {
    function Mod(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Mod.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Mod(value0, value1, value2);
            };
        };
    };
    return Mod;
})();
var CommandFields = function (x) {
    return x;
};
var ArgumentFields = function (x) {
    return x;
};
var optionFieldsHasValue = {
    hasValueDummy: function (v) {
        return Data_Unit.unit;
    }
};
var optionFieldsHasMetavar = {
    hasMetavarDummy: function (v) {
        return Data_Unit.unit;
    }
};
var newtypeOptionFields = {
    Coercible0: function () {
        return undefined;
    }
};
var optionFieldsHasCompleter = {
    modCompleter: function (f) {
        return over(OptionFields)(function (p) {
            return {
                optCompleter: f(p.optCompleter),
                optNames: p.optNames,
                optNoArgError: p.optNoArgError
            };
        });
    }
};
var optionFieldsHasName = {
    name: function (n) {
        return over(OptionFields)(function (fields) {
            return {
                optNames: append([ n ])(fields.optNames),
                optCompleter: fields.optCompleter,
                optNoArgError: fields.optNoArgError
            };
        });
    }
};
var newtypeFlagFields = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeCommandFields = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeArgumentFields = {
    Coercible0: function () {
        return undefined;
    }
};
var name = function (dict) {
    return dict.name;
};
var modCompleter = function (dict) {
    return dict.modCompleter;
};
var mkCommand = function (m) {
    var v = m.value0({
        cmdCommands: [  ],
        cmdGroup: Data_Maybe.Nothing.value
    });
    return new Data_Tuple.Tuple(v.cmdGroup, new Data_Tuple.Tuple(map(Data_Tuple.fst)(v.cmdCommands), new Data_Tuple.Tuple(function (v1) {
        return lookup(v1)(v.cmdCommands);
    }, Data_Unit.unit)));
};
var hasValueDummy = function (dict) {
    return dict.hasValueDummy;
};
var hasMetavarDummy = function (dict) {
    return dict.hasMetavarDummy;
};
var flagFieldsHasName = {
    name: function (n) {
        return over(FlagFields)(function (fields) {
            return {
                flagNames: append([ n ])(fields.flagNames),
                flagActive: fields.flagActive
            };
        });
    }
};
var defaultPropSemigroup = {
    append: function (v) {
        return function (v1) {
            return new DefaultProp(alt(v.value0)(v1.value0), alt(v.value1)(v1.value1));
        };
    }
};
var append1 = /* #__PURE__ */ Data_Semigroup.append(defaultPropSemigroup);
var modSemigroup = {
    append: function (v) {
        return function (v1) {
            return new Mod(function ($69) {
                return v1.value0(v.value0($69));
            }, append1(v1.value1)(v.value1), function ($70) {
                return v1.value2(v.value2($70));
            });
        };
    }
};
var defaultPropMonoid = /* #__PURE__ */ (function () {
    return {
        mempty: new DefaultProp(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value),
        Semigroup0: function () {
            return defaultPropSemigroup;
        }
    };
})();
var mempty = /* #__PURE__ */ Data_Monoid.mempty(defaultPropMonoid);
var fieldMod = function (f) {
    return new Mod(f, mempty, identity);
};
var modMonoid = /* #__PURE__ */ (function () {
    return {
        mempty: new Mod(identity, mempty, identity),
        Semigroup0: function () {
            return modSemigroup;
        }
    };
})();
var optionMod = /* #__PURE__ */ (function () {
    return Mod.create(identity)(mempty);
})();
var internal = /* #__PURE__ */ optionMod(/* #__PURE__ */ over(Options_Applicative_Types.OptProperties)(function (p) {
    return {
        propVisibility: Options_Applicative_Types.Internal.value,
        propDescMod: p.propDescMod,
        propHelp: p.propHelp,
        propMetaVar: p.propMetaVar,
        propShowDefault: p.propShowDefault
    };
}));
var commandFieldsHasMetavar = {
    hasMetavarDummy: function (v) {
        return Data_Unit.unit;
    }
};
var baseProps = /* #__PURE__ */ (function () {
    return {
        propMetaVar: "",
        propVisibility: Options_Applicative_Types.Visible.value,
        propHelp: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
        propShowDefault: Data_Maybe.Nothing.value,
        propDescMod: Data_Maybe.Nothing.value
    };
})();
var mkProps = function (v) {
    return function (g) {
        var props = over(Options_Applicative_Types.OptProperties)(function (r) {
            return {
                propShowDefault: apply(v.value1)(v.value0),
                propDescMod: r.propDescMod,
                propHelp: r.propHelp,
                propMetaVar: r.propMetaVar,
                propVisibility: r.propVisibility
            };
        })(g(baseProps));
        return props;
    };
};
var mkOption = function (d) {
    return function (g) {
        return function (rdr) {
            return {
                optMain: rdr,
                optProps: mkProps(d)(g)
            };
        };
    };
};
var mkParser = function (v) {
    return function (g) {
        return function (rdr) {
            var o = Options_Applicative_Common.liftOpt(mkOption(v)(g)(rdr));
            return Data_Maybe.maybe(o)(function (a) {
                return alt1(o)(pure(a));
            })(v.value0);
        };
    };
};
var argumentFieldsHasValue = {
    hasValueDummy: function (v) {
        return Data_Unit.unit;
    }
};
var argumentFieldsHasMetavar = {
    hasMetavarDummy: function (v) {
        return Data_Unit.unit;
    }
};
var argumentFieldsHasCompleter = {
    modCompleter: function (f) {
        return over(ArgumentFields)(function (p) {
            return {
                argCompleter: f(p.argCompleter)
            };
        });
    }
};
export {
    Mod,
    name,
    modCompleter,
    hasValueDummy,
    hasMetavarDummy,
    OptionFields,
    FlagFields,
    CommandFields,
    ArgumentFields,
    DefaultProp,
    optionMod,
    fieldMod,
    baseProps,
    mkCommand,
    mkParser,
    mkOption,
    mkProps,
    internal,
    newtypeOptionFields,
    newtypeFlagFields,
    newtypeCommandFields,
    newtypeArgumentFields,
    optionFieldsHasName,
    flagFieldsHasName,
    optionFieldsHasCompleter,
    argumentFieldsHasCompleter,
    optionFieldsHasValue,
    argumentFieldsHasValue,
    optionFieldsHasMetavar,
    argumentFieldsHasMetavar,
    commandFieldsHasMetavar,
    defaultPropMonoid,
    defaultPropSemigroup,
    modMonoid,
    modSemigroup
};
//# sourceMappingURL=index.js.map
