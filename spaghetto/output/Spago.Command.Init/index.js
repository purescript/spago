// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Registry_PackageName from "../Registry.PackageName/index.js";
import * as Registry_Version from "../Registry.Version/index.js";
import * as Spago_Config from "../Spago.Config/index.js";
import * as Spago_Core_Config from "../Spago.Core.Config/index.js";
import * as Spago_Core_Prelude from "../Spago.Core.Prelude/index.js";
import * as Spago_FS from "../Spago.FS/index.js";
import * as Spago_Log from "../Spago.Log/index.js";
import * as Spago_Prelude from "../Spago.Prelude/index.js";
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showString);
var fromFoldable = /* #__PURE__ */ Data_Map_Internal.fromFoldable(Registry_PackageName.ordPackageName)(Data_Foldable.foldableArray);
var map = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var bind = /* #__PURE__ */ Control_Bind.bind(Spago_Core_Prelude.bindSpago);
var exists = /* #__PURE__ */ Spago_FS.exists(Spago_Core_Prelude.monadEffectSpago);
var logInfo = /* #__PURE__ */ Spago_Log.logInfo(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var applySecond = /* #__PURE__ */ Control_Apply.applySecond(Spago_Core_Prelude.applySpago);
var mkdirp = /* #__PURE__ */ Spago_FS.mkdirp(Spago_Core_Prelude.monadAffSpago);
var writeTextFile = /* #__PURE__ */ Spago_FS.writeTextFile(Spago_Core_Prelude.monadAffSpago);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(Spago_Core_Prelude.bindSpago);
var ask = /* #__PURE__ */ Control_Monad_Reader_Class.ask(Spago_Core_Prelude.monadAskSpago);
var liftAff = /* #__PURE__ */ Effect_Aff_Class.liftAff(Spago_Core_Prelude.monadAffSpago);
var pure = /* #__PURE__ */ Control_Applicative.pure(Spago_Core_Prelude.applicativeSpago);
var testMainTemplate = function (moduleName) {
    return "module " + (moduleName + " where\x0a\x0aimport Prelude\x0a\x0aimport Effect (Effect)\x0aimport Effect.Class.Console (log)\x0a\x0amain :: Effect Unit\x0amain = do\x0a  log \"\ud83c\udf55\"\x0a  log \"You should add some tests.\"\x0a\x0a");
};
var srcMainTemplate = function (moduleName) {
    return "module " + (moduleName + " where\x0a\x0aimport Prelude\x0a\x0aimport Effect (Effect)\x0aimport Effect.Console (log)\x0a\x0amain :: Effect Unit\x0amain = do\x0a  log \"\ud83c\udf5d\"\x0a\x0a");
};
var pursReplTemplate = "\x0aimport Prelude\x0a";
var gitignoreTemplate = "\x0abower_components/\x0anode_modules/\x0a.pulp-cache/\x0aoutput/\x0agenerated-docs/\x0a.psc-package/\x0a.psc*\x0a.purs*\x0a.psa*\x0a.spago\x0a";
var foundExistingProject = function (path) {
    return "Found a " + (show(path) + " file, skipping copy.");
};
var foundExistingFile = function (file) {
    return "Found existing file " + (show(file) + ", not overwriting it");
};
var foundExistingDirectory = function (dir) {
    return "Found existing directory " + (show(dir) + ", skipping copy of sample sources");
};
var defaultConfig = function (name) {
    return function (setVersion) {
        return function (testModuleName) {
            var mkDep = function (p) {
                return new Data_Tuple.Tuple(Spago_Prelude.unsafeFromRight(Registry_PackageName.parse(p)), Data_Maybe.Nothing.value);
            };
            return {
                "package": new Data_Maybe.Just({
                    name: name,
                    dependencies: fromFoldable([ mkDep("effect"), mkDep("console"), mkDep("prelude") ]),
                    description: Data_Maybe.Nothing.value,
                    run: Data_Maybe.Nothing.value,
                    test: new Data_Maybe.Just({
                        dependencies: Data_Map_Internal.empty,
                        execArgs: Data_Maybe.Nothing.value,
                        main: testModuleName
                    }),
                    publish: Data_Maybe.Nothing.value,
                    bundle: Data_Maybe.Nothing.value
                }),
                workspace: map(function (set) {
                    return {
                        extra_packages: new Data_Maybe.Just(Data_Map_Internal.empty),
                        package_set: new Data_Maybe.Just(new Spago_Core_Config.SetFromRegistry({
                            registry: set
                        })),
                        build_opts: Data_Maybe.Nothing.value,
                        backend: Data_Maybe.Nothing.value,
                        lock: Data_Maybe.Nothing.value
                    };
                })(setVersion)
            };
        };
    };
};
var run = function (opts) {
    var whenDirNotExists = function (dirPath) {
        return function (action) {
            return bind(exists(dirPath))(function (v) {
                if (v) {
                    return logInfo(foundExistingDirectory(dirPath));
                };
                if (!v) {
                    return applySecond(mkdirp(dirPath))(action);
                };
                throw new Error("Failed pattern match at Spago.Command.Init (line 63, column 29 - line 65, column 43): " + [ v.constructor.name ]);
            });
        };
    };
    var copyIfNotExists = function (dest) {
        return function (srcTemplate) {
            return bind(exists(dest))(function (v) {
                if (v) {
                    return logInfo(foundExistingFile(dest));
                };
                if (!v) {
                    return writeTextFile(dest)(srcTemplate);
                };
                throw new Error("Failed pattern match at Spago.Command.Init (line 68, column 26 - line 70, column 49): " + [ v.constructor.name ]);
            });
        };
    };
    return discard(logInfo("Initializing a new project..."))(function () {
        return bind(Spago_Config.findPackageSet(opts.setVersion))(function (packageSetVersion) {
            return bind(ask)(function (v) {
                return discard(logInfo("Found PureScript " + (Registry_Version.print(v.purs.version) + (", will use package set " + Registry_Version.print(packageSetVersion)))))(function () {
                    var config = defaultConfig(opts.packageName)(new Data_Maybe.Just(packageSetVersion))("Test.Main");
                    return discard(bind(exists("spago.yaml"))(function (v1) {
                        if (v1) {
                            return logInfo(foundExistingProject("spago.yaml"));
                        };
                        if (!v1) {
                            return liftAff(Spago_FS.writeYamlFile(Spago_Core_Config.configCodec)("spago.yaml")(config));
                        };
                        throw new Error("Failed pattern match at Spago.Command.Init (line 40, column 30 - line 42, column 77): " + [ v1.constructor.name ]);
                    }))(function () {
                        return discard(whenDirNotExists("src")(copyIfNotExists("src/" + ("Main" + ".purs"))(srcMainTemplate("Main"))))(function () {
                            return discard(whenDirNotExists("test")(discard(mkdirp("test/Test"))(function () {
                                return copyIfNotExists("test/Test/Main.purs")(testMainTemplate("Test.Main"));
                            })))(function () {
                                return discard(copyIfNotExists(".gitignore")(gitignoreTemplate))(function () {
                                    return discard(copyIfNotExists(".purs-repl")(pursReplTemplate))(function () {
                                        return pure(config);
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};
export {
    run,
    srcMainTemplate,
    testMainTemplate,
    defaultConfig
};
