// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Pipes_Core from "../Pipes.Core/index.js";
import * as Pipes_Internal from "../Pipes.Internal/index.js";
var $$yield = function (dictMonad) {
    return Pipes_Core.respond(dictMonad);
};
var replaceAwait = function (dictMonad) {
    var composeRequest = Pipes_Core.composeRequest(dictMonad);
    return function (p1) {
        return function (p2) {
            return composeRequest(Data_Function["const"](p1))(p2);
        };
    };
};
var replaceAwait$prime = function (dictMonad) {
    return Data_Function.flip(replaceAwait(dictMonad));
};
var next = function (dictMonad) {
    var pure = Control_Applicative.pure(dictMonad.Applicative0());
    var bind = Control_Bind.bind(dictMonad.Bind1());
    var go = function (p) {
        if (p instanceof Pipes_Internal.Request) {
            return Pipes_Internal.closed(p.value0);
        };
        if (p instanceof Pipes_Internal.Respond) {
            return pure(new Data_Either.Right(new Data_Tuple.Tuple(p.value0, p.value1(Data_Unit.unit))));
        };
        if (p instanceof Pipes_Internal.M) {
            return bind(p.value0)(go);
        };
        if (p instanceof Pipes_Internal.Pure) {
            return pure(new Data_Either.Left(p.value0));
        };
        throw new Error("Failed pattern match at Pipes (line 96, column 12 - line 100, column 38): " + [ p.constructor.name ]);
    };
    return go;
};
var $$for = function (dictMonad) {
    return Pipes_Core.composeResponse(dictMonad);
};
var each = function (dictMonad) {
    var applySecond = Control_Apply.applySecond(Pipes_Internal.applyProxy(dictMonad));
    var yield1 = $$yield(dictMonad);
    var pure = Control_Applicative.pure(Pipes_Internal.applicativeProxy(dictMonad));
    return function (dictFoldable) {
        var foldr = Data_Foldable.foldr(dictFoldable);
        return function (xs) {
            return foldr(function (a) {
                return function (p) {
                    return applySecond(yield1(a))(p);
                };
            })(pure(Data_Unit.unit))(xs);
        };
    };
};
var discard = function (dictMonad) {
    var pure = Control_Applicative.pure(dictMonad.Applicative0());
    return function (v) {
        return pure(Data_Unit.unit);
    };
};
var composePipes = function (dictMonad) {
    var composePull$prime = Pipes_Core["composePull$prime"](dictMonad);
    return function (p1) {
        return function (p2) {
            return composePull$prime(Data_Function["const"](p1))(p2);
        };
    };
};
var composePipes$prime = function (dictMonad) {
    return Data_Function.flip(composePipes(dictMonad));
};
var composeLoopBodies = function (dictMonad) {
    return Pipes_Core["composeResponse$prime"](dictMonad);
};
var composeLoopBodies$prime = function (dictMonad) {
    return Data_Function.flip(composeLoopBodies(dictMonad));
};
var cat = function (dictMonad) {
    return Pipes_Core.pull(dictMonad)(Data_Unit.unit);
};
var $$await = function (dictMonad) {
    return Pipes_Core.request(dictMonad)(Data_Unit.unit);
};
export {
    $$for as for,
    composeLoopBodies,
    composeLoopBodies$prime,
    $$await as await,
    replaceAwait,
    replaceAwait$prime,
    cat,
    composePipes,
    composePipes$prime,
    $$yield as yield,
    next,
    each,
    discard
};
//# sourceMappingURL=index.js.map
