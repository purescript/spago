// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Node_Library_Execa_Utils from "../Node.Library.Execa.Utils/index.js";
import * as Node_Stream from "../Node.Stream/index.js";
import * as Unsafe_Coerce from "../Unsafe.Coerce/index.js";
import * as Unsafe_Reference from "../Unsafe.Reference/index.js";
var when = /* #__PURE__ */ Control_Applicative.when(Effect.applicativeEffect);
var mempty = /* #__PURE__ */ Data_Monoid.mempty(/* #__PURE__ */ Data_Monoid.monoidFn(/* #__PURE__ */ Effect.monoidEffect(Data_Monoid.monoidUnit)));
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect.applicativeEffect);
var ifM = /* #__PURE__ */ Control_Bind.ifM(Effect.bindEffect);
var Interface = function (x) {
    return x;
};
var toReadableOnlyStream = Unsafe_Coerce.unsafeCoerce;
var remove = function (source) {
    return function (v) {
        return function __do() {
            var arr = Effect_Ref.read(v.sources)();
            var arr$prime = Data_Array.filter((function () {
                var $22 = Unsafe_Reference.unsafeRefEq(toReadableOnlyStream(source));
                return function ($23) {
                    return !$22($23);
                };
            })())(arr);
            var stillReadable = $foreign.readable(v.output);
            return when(Data_Array.length(arr$prime) === 0 && stillReadable)(Node_Stream.end(v.output)(mempty))();
        };
    };
};
var buildInterface = function __do() {
    var sources = Effect_Ref["new"]([  ])();
    var output = Node_Library_Execa_Utils.newPassThroughStream();
    return {
        sources: sources,
        output: output
    };
};
var mergeStreams = function (useInterface) {
    return function __do() {
        var v = buildInterface();
        useInterface(v)();
        return v.output;
    };
};
var add = function (source) {
    return function (v) {
        return ifM(function () {
            return $foreign.readable(v.output);
        })((function () {
            var readStream = toReadableOnlyStream(source);
            return function __do() {
                Effect_Ref.modify_(Data_Function.flip(Data_Array.snoc)(readStream))(v.sources)();
                $foreign.onceEnd(readStream, remove(readStream)(v));
                $foreign.onceError(readStream, v.output);
                $foreign.pipeImpl(readStream, v.output, {
                    end: false
                });
                return true;
            };
        })())(pure(false));
    };
};
export {
    mergeStreams,
    add
};
//# sourceMappingURL=index.js.map
