// Generated by purs version 0.15.10
import * as Control_Alternative from "../Control.Alternative/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_NonEmpty from "../Data.Array.NonEmpty/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_String_Regex from "../Data.String.Regex/index.js";
import * as Data_String_Regex_Flags from "../Data.String.Regex.Flags/index.js";
import * as Data_String_Regex_Unsafe from "../Data.String.Regex.Unsafe/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Maybe.bindMaybe);
var voidRight = /* #__PURE__ */ Data_Functor.voidRight(Data_Maybe.functorMaybe);
var guard = /* #__PURE__ */ Control_Alternative.guard(Data_Maybe.alternativeMaybe);
var pure = /* #__PURE__ */ Control_Applicative.pure(Data_Maybe.applicativeMaybe);
var shebangCommand = function (firstLineOfFile) {
    var shebangRegex = Data_String_Regex_Unsafe.unsafeRegex("^#! ?(.*)")(Data_String_Regex_Flags.noFlags);
    return bind(Data_String_Regex.match(shebangRegex)(firstLineOfFile))(function (parts) {
        var extractBinary = (function () {
            var $14 = Data_String_Common.split("/");
            return function ($15) {
                return Data_Array.last($14($15));
            };
        })();
        return bind(Data_Array_NonEmpty.head(parts))(function (everythingAfterShebang) {
            var v = Data_String_Common.split(" ")(everythingAfterShebang);
            if (v.length === 1) {
                return bind(extractBinary(v[0]))(function (binary) {
                    return voidRight(binary)(guard(binary !== "env"));
                });
            };
            if (v.length === 2) {
                return bind(extractBinary(v[0]))(function (binary) {
                    return pure((function () {
                        var $11 = binary === "env";
                        if ($11) {
                            return v[1];
                        };
                        return binary + (" " + v[1]);
                    })());
                });
            };
            return Data_Maybe.Nothing.value;
        });
    });
};
export {
    shebangCommand
};
//# sourceMappingURL=index.js.map
