// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Control_Monad_Trans_Class from "../Control.Monad.Trans.Class/index.js";
import * as Control_Parallel from "../Control.Parallel/index.js";
import * as Control_Parallel_Class from "../Control.Parallel.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_NonEmpty from "../Data.Array.NonEmpty/index.js";
import * as Data_DateTime_Instant from "../Data.DateTime.Instant/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Ring from "../Data.Ring/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Time_Duration from "../Data.Time.Duration/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_AVar from "../Effect.Aff.AVar/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Effect_Now from "../Effect.Now/index.js";
import * as Pipes from "../Pipes/index.js";
import * as Pipes_Core from "../Pipes.Core/index.js";
import * as Pipes_Internal from "../Pipes.Internal/index.js";
import * as Test_Spec from "../Test.Spec/index.js";
import * as Test_Spec_Console from "../Test.Spec.Console/index.js";
import * as Test_Spec_Result from "../Test.Spec.Result/index.js";
import * as Test_Spec_Runner_Event from "../Test.Spec.Runner.Event/index.js";
import * as Test_Spec_Speed from "../Test.Spec.Speed/index.js";
import * as Test_Spec_Style from "../Test.Spec.Style/index.js";
import * as Test_Spec_Summary from "../Test.Spec.Summary/index.js";
import * as Test_Spec_Tree from "../Test.Spec.Tree/index.js";
var $runtime_lazy = function (name, moduleName, init) {
    var state = 0;
    var val;
    return function (lineNumber) {
        if (state === 2) return val;
        if (state === 1) throw new ReferenceError(name + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
        state = 1;
        val = init();
        state = 2;
        return val;
    };
};
var bindProxy = /* #__PURE__ */ Pipes_Internal.bindProxy(Effect_Aff.monadAff);
var bind = /* #__PURE__ */ Control_Bind.bind(bindProxy);
var lift = /* #__PURE__ */ Control_Monad_Trans_Class.lift(Pipes_Internal.monadTransProxy)(Effect_Aff.monadAff);
var applyProxy = /* #__PURE__ */ Pipes_Internal.applyProxy(Effect_Aff.monadAff);
var applySecond = /* #__PURE__ */ Control_Apply.applySecond(applyProxy);
var applicativeProxy = /* #__PURE__ */ Pipes_Internal.applicativeProxy(Effect_Aff.monadAff);
var pure = /* #__PURE__ */ Control_Applicative.pure(applicativeProxy);
var bind1 = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var parTraverse = /* #__PURE__ */ Control_Parallel.parTraverse(Effect_Aff.parallelAff);
var runEffectRec = /* #__PURE__ */ Pipes_Core.runEffectRec(Effect_Aff.monadRecAff);
var composeResponse = /* #__PURE__ */ Pipes_Core.composeResponse(Effect_Aff.monadAff);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var discard1 = /* #__PURE__ */ discard(Effect_Aff.bindAff);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(Effect_Aff.applicativeAff);
var $$try = /* #__PURE__ */ Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff);
var discard2 = /* #__PURE__ */ discard(bindProxy);
var $$yield = /* #__PURE__ */ Pipes["yield"](Effect_Aff.monadAff);
var voidRight = /* #__PURE__ */ Data_Functor.voidRight(Effect.functorEffect);
var mempty = /* #__PURE__ */ Data_Monoid.mempty(Effect_Aff.monoidCanceler);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var sequential = /* #__PURE__ */ Control_Parallel_Class.sequential(Effect_Aff.parallelAff);
var alt = /* #__PURE__ */ Control_Alt.alt(Effect_Aff.altParAff);
var parallel = /* #__PURE__ */ Control_Parallel_Class.parallel(Effect_Aff.parallelAff);
var throwError = /* #__PURE__ */ Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
var liftEffect1 = /* #__PURE__ */ Effect_Class.liftEffect(/* #__PURE__ */ Pipes_Internal.proxyMonadEffect(Effect_Aff.monadEffectAff));
var sub = /* #__PURE__ */ Data_Ring.sub(Data_Ring.ringNumber);
var un = /* #__PURE__ */ Data_Newtype.un();
var append1 = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var applyFirst = /* #__PURE__ */ Control_Apply.applyFirst(applyProxy);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var map1 = /* #__PURE__ */ Data_Functor.map(/* #__PURE__ */ Pipes_Internal.functorProxy(Effect_Aff.monadAff));
var join = /* #__PURE__ */ Control_Bind.join(Control_Bind.bindArray);
var $$for = /* #__PURE__ */ Data_Traversable["for"](applicativeProxy)(Data_Traversable.traversableArray);
var foldl = /* #__PURE__ */ Data_Foldable.foldl(Data_Foldable.foldableArray);
var composePipes = /* #__PURE__ */ Pipes.composePipes(Effect_Aff.monadAff);
var show1 = /* #__PURE__ */ Data_Show.show(Effect_Exception.showError);
var $$void = /* #__PURE__ */ Data_Functor["void"](Effect_Aff.functorAff);
var mergeProducers = function (dictTraversable) {
    var parTraverse1 = parTraverse(dictTraversable);
    return function (ps) {
        return bind(lift(Effect_Aff_AVar.empty))(function ($$var) {
            return bind(lift(Effect_Aff.forkAff((function () {
                var consumer = function (i) {
                    return applySecond(lift(Effect_Aff_AVar.put(i)($$var)))(pure(Data_Unit.unit));
                };
                return bind1(parTraverse1(function (p) {
                    return runEffectRec(composeResponse(p)(consumer));
                })(ps))(function (x) {
                    return discard1(Effect_Aff_AVar.kill(Effect_Exception.error("finished"))($$var))(function () {
                        return pure1(x);
                    });
                });
            })())))(function (fib) {
                var $lazy_loop = $runtime_lazy("loop", "Test.Spec.Runner", function () {
                    return bind(lift($$try(Effect_Aff_AVar.take($$var))))(function (res) {
                        if (res instanceof Data_Either.Left) {
                            return lift(Effect_Aff.joinFiber(fib));
                        };
                        if (res instanceof Data_Either.Right) {
                            return discard2($$yield(res.value0))(function () {
                                return $lazy_loop(158);
                            });
                        };
                        throw new Error("Failed pattern match at Test.Spec.Runner (line 154, column 7 - line 158, column 15): " + [ res.constructor.name ]);
                    });
                });
                var loop = $lazy_loop(152);
                return loop;
            });
        });
    };
};
var mergeProducers1 = /* #__PURE__ */ mergeProducers(Data_Traversable.traversableArray);
var makeTimeout = function (v) {
    return discard1(Effect_Aff.delay(v))(function () {
        return Effect_Aff.makeAff(function (cb) {
            return voidRight(mempty)(cb(Data_Either.Left.create(Effect_Exception.error("test timed out after " + (show(Data_Int.round(v)) + "ms")))));
        });
    });
};
var timeout = function (time) {
    return function (t) {
        return bind1(sequential(alt(parallel($$try(makeTimeout(time))))(parallel($$try(t)))))(Data_Either.either(throwError)(pure1));
    };
};
var defaultConfig = /* #__PURE__ */ (function () {
    return {
        slow: 75.0,
        timeout: new Data_Maybe.Just(2000.0),
        exit: true
    };
})();
var _run = function (dictFunctor) {
    var collect = Test_Spec.collect(dictFunctor);
    var map2 = Data_Functor.map(dictFunctor);
    return function (config) {
        var runGroup = function (v) {
            if (v.test instanceof Test_Spec_Tree.Leaf && v.test.value1 instanceof Data_Maybe.Just) {
                return discard2($$yield(new Test_Spec_Runner_Event.Test((function () {
                    if (v.isParallelizable) {
                        return Test_Spec_Runner_Event.Parallel.value;
                    };
                    return Test_Spec_Runner_Event.Sequential.value;
                })(), v.path, v.test.value0)))(function () {
                    var example = v.test.value1.value0.example(function (a) {
                        return a(Data_Unit.unit);
                    });
                    return bind(lift(liftEffect(Effect_Now.now)))(function (start) {
                        return bind(lift(Effect_Aff.attempt((function () {
                            if (config.timeout instanceof Data_Maybe.Just) {
                                return timeout(config.timeout.value0)(example);
                            };
                            return example;
                        })())))(function (e) {
                            return bind(liftEffect1(Effect_Now.now))(function (end) {
                                var duration = Data_Function.on(sub)((function () {
                                    var $95 = un(Data_Time_Duration.Milliseconds);
                                    return function ($96) {
                                        return $95(Data_DateTime_Instant.unInstant($96));
                                    };
                                })())(end)(start);
                                var res = Data_Either.either(Test_Spec_Result.Failure.create)(Data_Function["const"](new Test_Spec_Result.Success(Test_Spec_Speed.speedOf(config.slow)(duration), duration)))(e);
                                return discard2($$yield(new Test_Spec_Runner_Event.TestEnd(v.path, v.test.value0, res)))(function () {
                                    return pure([ new Test_Spec_Tree.Leaf(v.test.value0, new Data_Maybe.Just(res)) ]);
                                });
                            });
                        });
                    });
                });
            };
            if (v.test instanceof Test_Spec_Tree.Leaf && v.test.value1 instanceof Data_Maybe.Nothing) {
                return discard2($$yield(new Test_Spec_Runner_Event.Pending(v.path, v.test.value0)))(function () {
                    return pure([ new Test_Spec_Tree.Leaf(v.test.value0, Data_Maybe.Nothing.value) ]);
                });
            };
            if (v.test instanceof Test_Spec_Tree.Node && v.test.value0 instanceof Data_Either.Right) {
                var indexer = function (index) {
                    return function (x) {
                        return {
                            test: x,
                            path: append1(v.path)([ {
                                name: Data_Maybe.Nothing.value,
                                index: index
                            } ])
                        };
                    };
                };
                return applyFirst(loop(Data_Array.mapWithIndex(indexer)(v.test.value1)))(lift(v.test.value0.value0(Data_Unit.unit)));
            };
            if (v.test instanceof Test_Spec_Tree.Node && v.test.value0 instanceof Data_Either.Left) {
                return discard2($$yield(new Test_Spec_Runner_Event.Suite((function () {
                    if (v.isParallelizable) {
                        return Test_Spec_Runner_Event.Parallel.value;
                    };
                    return Test_Spec_Runner_Event.Sequential.value;
                })(), v.path, v.test.value0.value0)))(function () {
                    var indexer = function (index) {
                        return function (x) {
                            return {
                                test: x,
                                path: append1(v.path)([ {
                                    name: new Data_Maybe.Just(v.test.value0.value0),
                                    index: index
                                } ])
                            };
                        };
                    };
                    return bind(loop(Data_Array.mapWithIndex(indexer)(v.test.value1)))(function (res) {
                        return discard2($$yield(new Test_Spec_Runner_Event.SuiteEnd(v.path)))(function () {
                            return pure([ new Test_Spec_Tree.Node(new Data_Either.Left(v.test.value0.value0), res) ]);
                        });
                    });
                });
            };
            throw new Error("Failed pattern match at Test.Spec.Runner (line 114, column 47 - line 138, column 38): " + [ v.test.constructor.name ]);
        };
        var loop = function (tests) {
            var noteWithIsAllParallelizable = map(function (v) {
                return {
                    isParallelizable: Test_Spec_Tree.isAllParallelizable(v.test),
                    test: v.test,
                    path: v.path
                };
            });
            var groupByIsParallelizable = Data_Array.groupBy(function (a) {
                return function (b) {
                    return a.isParallelizable && b.isParallelizable;
                };
            });
            return map1(join)($$for(groupByIsParallelizable(noteWithIsAllParallelizable(tests)))(function (g) {
                return map1(join)((function () {
                    var $89 = (Data_Array_NonEmpty.head(g)).isParallelizable;
                    if ($89) {
                        return mergeProducers1(map(runGroup)(Data_Array_NonEmpty.toArray(g)));
                    };
                    return $$for(Data_Array_NonEmpty.toArray(g))(runGroup);
                })());
            }));
        };
        var $97 = map2(function (tests) {
            return discard2($$yield(new Test_Spec_Runner_Event.Start(Test_Spec_Tree.countTests(tests))))(function () {
                var indexer = function (index) {
                    return function (test) {
                        return {
                            test: test,
                            path: [ {
                                name: Data_Maybe.Nothing.value,
                                index: index
                            } ]
                        };
                    };
                };
                return bind(loop(Data_Array.mapWithIndex(indexer)(tests)))(function (r) {
                    return discard2($$yield(new Test_Spec_Runner_Event.End(r)))(function () {
                        return pure(r);
                    });
                });
            });
        });
        return function ($98) {
            return $97(collect($98));
        };
    };
};
var runSpecT = function (dictFunctor) {
    var mapFlipped = Data_Functor.mapFlipped(dictFunctor);
    var _run1 = _run(dictFunctor);
    return function (config) {
        return function (reporters) {
            return function (spec) {
                return mapFlipped(_run1(config)(spec))(function (runner) {
                    var events = foldl(composePipes)(runner)(reporters);
                    var drain = Data_Function["const"](pure(Data_Unit.unit));
                    var reportedEvents = runEffectRec(composeResponse(events)(drain));
                    if (config.exit) {
                        return bind1($$try(reportedEvents))(function (v) {
                            if (v instanceof Data_Either.Left) {
                                return discard1(liftEffect(Test_Spec_Console.write(Test_Spec_Style.styled(Test_Spec_Style.red)(show1(v.value0) + "\x0a"))))(function () {
                                    return discard1(liftEffect($foreign.exit(1)))(function () {
                                        return throwError(v.value0);
                                    });
                                });
                            };
                            if (v instanceof Data_Either.Right) {
                                return liftEffect((function () {
                                    var code = (function () {
                                        var $93 = Test_Spec_Summary.successful(v.value0);
                                        if ($93) {
                                            return 0;
                                        };
                                        return 1;
                                    })();
                                    return function __do() {
                                        $foreign.exit(code)();
                                        return v.value0;
                                    };
                                })());
                            };
                            throw new Error("Failed pattern match at Test.Spec.Runner (line 182, column 33 - line 190, column 21): " + [ v.constructor.name ]);
                        });
                    };
                    return reportedEvents;
                });
            };
        };
    };
};
var runSpecT1 = /* #__PURE__ */ runSpecT(Data_Identity.functorIdentity);
var runSpec$prime = function (config) {
    return function (reporters) {
        return function (spec) {
            return $$void(un(Data_Identity.Identity)(runSpecT1(config)(reporters)(spec)));
        };
    };
};
var run = function () {
    return runSpec$prime(defaultConfig);
};
var runSpec = /* #__PURE__ */ runSpec$prime(defaultConfig);
export {
    run,
    runSpecT,
    runSpec,
    runSpec$prime,
    defaultConfig
};
//# sourceMappingURL=index.js.map
