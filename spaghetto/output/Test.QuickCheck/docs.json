{"comments":"This module is a partial port of the Haskell QuickCheck library.\n\nQuickCheck provides a way to write _property-based_ tests.\n\nThe `Arbitrary` and `CoArbitrary` type classes allow us to create\nrandom data with which we can run our tests. This module provides\ninstances of both classes for PureScript's core data structures,\nas well as functions for writing new instances.\n\nTest suites can use the `quickCheck` and `quickCheckPure` functions\nto test properties.\n\nFor example:\n\n```purescript\nmain = quickCheck \\n -> n + 1 > n\n```\n","declarations":[{"children":[],"comments":"Test a property.\n\nThis function generates a new random seed, runs 100 tests and\nprints the test results to the console.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"prop","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"prop","tag":"TypeVar"}],"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"prop","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[76,64],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[76,1]},"title":"quickCheck"},{"children":[],"comments":"A version of `quickCheck` with the property specialized to `Gen`.\n\nThe `quickCheckGen` variants are useful for writing property tests where a\n`MonadGen` constraint (or QuickCheck's `Gen` directly) is being used,\nrather than relying on `Arbitrary` instances. Especially useful for the\n`MonadGen`-constrained properties as they will not infer correctly when\nused with the `quickCheck` functions unless an explicit type annotation is\nused.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"prop","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"prop","tag":"TypeVar"}],"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","QuickCheck","Gen"],"Gen"],"tag":"TypeConstructor"},{"annotation":[],"contents":"prop","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[87,71],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[87,1]},"title":"quickCheckGen"},{"children":[],"comments":"A variant of the `quickCheck` function which accepts an extra parameter\nrepresenting the number of tests which should be run.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"prop","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"prop","tag":"TypeVar"}],"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"prop","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[92,72],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[92,1]},"title":"quickCheck'"},{"children":[],"comments":"A version of `quickCheck'` with the property specialized to `Gen`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"prop","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"prop","tag":"TypeVar"}],"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","QuickCheck","Gen"],"Gen"],"tag":"TypeConstructor"},{"annotation":[],"contents":"prop","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[98,79],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[98,1]},"title":"quickCheckGen'"},{"children":[],"comments":"A variant of the `quickCheck'` function that accepts a specific seed as\nwell as the number tests that should be run.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"prop","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"prop","tag":"TypeVar"}],"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Random","LCG"],"Seed"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"prop","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[104,70],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[103,1]},"title":"quickCheckWithSeed"},{"children":[],"comments":"A version of `quickCheckWithSeed` with the property specialized to `Gen`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"prop","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"prop","tag":"TypeVar"}],"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Random","LCG"],"Seed"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","QuickCheck","Gen"],"Gen"],"tag":"TypeConstructor"},{"annotation":[],"contents":"prop","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[136,94],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[136,1]},"title":"quickCheckGenWithSeed"},{"children":[],"comments":"Test a property, returning all test results as a List.\n\nThe first argument is the _random seed_ to be passed to the random generator.\nThe second argument is the number of tests to run.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"prop","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"prop","tag":"TypeVar"}],"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Random","LCG"],"Seed"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"prop","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","List","Types"],"List"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Test","QuickCheck"],"Result"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[150,83],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[150,1]},"title":"quickCheckPure"},{"children":[],"comments":"Test a property, returning all test results as a List, with the Seed that\nwas used for each result.\n\nThe first argument is the _random seed_ to be passed to the random generator.\nThe second argument is the number of tests to run.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"prop","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"prop","tag":"TypeVar"}],"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Random","LCG"],"Seed"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"prop","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","List","Types"],"List"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Tuple"],"Tuple"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Random","LCG"],"Seed"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Test","QuickCheck"],"Result"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[158,97],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[158,1]},"title":"quickCheckPure'"},{"children":[],"comments":"A version of `quickCheckPure` with the property specialized to `Gen`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"prop","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"prop","tag":"TypeVar"}],"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Random","LCG"],"Seed"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","QuickCheck","Gen"],"Gen"],"tag":"TypeConstructor"},{"annotation":[],"contents":"prop","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","List","Types"],"List"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Test","QuickCheck"],"Result"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[180,90],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[180,1]},"title":"quickCheckGenPure"},{"children":[],"comments":"A version of `quickCheckPure'` with the property specialized to `Gen`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"prop","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"prop","tag":"TypeVar"}],"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Random","LCG"],"Seed"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","QuickCheck","Gen"],"Gen"],"tag":"TypeConstructor"},{"annotation":[],"contents":"prop","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","List","Types"],"List"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Tuple"],"Tuple"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Random","LCG"],"Seed"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Test","QuickCheck"],"Result"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[184,104],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[184,1]},"title":"quickCheckGenPure'"},{"children":[],"comments":"A type used to summarise the results from `quickCheckPure'`\n","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":["total",{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"},{"annotation":[],"contents":["successes",{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"},{"annotation":[],"contents":["failures",{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","List","Types"],"List"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":["index",{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"},{"annotation":[],"contents":["seed",{"annotation":[],"contents":[["Random","LCG"],"Seed"],"tag":"TypeConstructor"},{"annotation":[],"contents":["message",{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"},{"annotation":[],"tag":"REmpty"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"tag":"REmpty"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[192,4],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[188,1]},"title":"ResultSummary"},{"children":[],"comments":"Processes the results from `quickCheckPure'` to produce a `ResultSummary`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","List","Types"],"List"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Tuple"],"Tuple"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Random","LCG"],"Seed"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Test","QuickCheck"],"Result"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Test","QuickCheck"],"ResultSummary"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[195,58],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[195,1]},"title":"checkResults"},{"children":[],"comments":"Print a one-line summary in the form \"x/y test(s) passed.\"\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Test","QuickCheck"],"ResultSummary"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[207,40],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[207,1]},"title":"printSummary"},{"children":[{"comments":null,"info":{"declType":"typeClassMember","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"prop","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","QuickCheck","Gen"],"Gen"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Test","QuickCheck"],"Result"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[219,29],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[219,3]},"title":"test"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","QuickCheck"],"Testable"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Test","QuickCheck"],"Result"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[222,14],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[221,1]},"title":"testableResult"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","QuickCheck"],"Testable"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[226,51],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[224,1]},"title":"testableBoolean"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"t","tag":"TypeVar"}],"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintData":null,"constraintKindArgs":[]},{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"prop","tag":"TypeVar"}],"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","QuickCheck"],"Testable"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"t","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"prop","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[229,36],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[228,1]},"title":"testableFunction"},{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"prop","tag":"TypeVar"}],"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","QuickCheck"],"Testable"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","QuickCheck","Gen"],"Gen"],"tag":"TypeConstructor"},{"annotation":[],"contents":"prop","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[232,24],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[231,1]},"title":"testableGen"}],"comments":"The `Testable` class represents _testable properties_.\n\nA testable property is a function of zero or more `Arbitrary` arguments,\nreturning a `Boolean` or `Result`.\n\nTestable properties can be passed to the `quickCheck` function.\n","info":{"arguments":[["prop",null]],"declType":"typeClass","fundeps":[],"superclasses":[]},"kind":null,"sourceSpan":{"end":[219,29],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[218,1]},"title":"Testable"},{"children":[{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[235,22],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[235,13]},"title":"Success"},{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"declType":"dataConstructor"},"sourceSpan":{"end":[235,31],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[235,23]},"title":"Failed"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","QuickCheck"],"Testable"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Test","QuickCheck"],"Result"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[222,14],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[221,1]},"title":"testableResult"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Show"],"Show"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Test","QuickCheck"],"Result"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[239,40],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[237,1]},"title":"showResult"}],"comments":"The result of a test: success or failure (with an error message).\n","info":{"dataDeclType":"data","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[235,38],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[235,1]},"title":"Result"},{"children":[],"comments":"This operator attaches an error message to a failed test.\n\nFor example:\n\n```purescript\ntest x = myProperty x <?> (\"myProperty did not hold for \" <> show x)\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Test","QuickCheck"],"Result"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[248,40],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[248,1]},"title":"withHelp"},{"children":[],"comments":null,"info":{"alias":[["Test","QuickCheck"],{"Right":{"Left":{"Ident":"withHelp"}}}],"declType":"alias","fixity":{"associativity":"infix","precedence":2}},"kind":null,"sourceSpan":{"end":[252,24],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[252,1]},"title":"(<?>)"},{"children":[],"comments":"Self-documenting equality assertion\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Eq"],"Eq"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Show"],"Show"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Test","QuickCheck"],"Result"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[259,61],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[259,1]},"title":"assertEquals"},{"children":[],"comments":null,"info":{"alias":[["Test","QuickCheck"],{"Right":{"Left":{"Ident":"assertEquals"}}}],"declType":"alias","fixity":{"associativity":"infix","precedence":2}},"kind":null,"sourceSpan":{"end":[262,28],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[262,1]},"title":"(===)"},{"children":[],"comments":null,"info":{"alias":[["Test","QuickCheck"],{"Right":{"Left":{"Ident":"assertEquals"}}}],"declType":"alias","fixity":{"associativity":"infix","precedence":2}},"kind":null,"sourceSpan":{"end":[263,28],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[263,1]},"title":"(==?)"},{"children":[],"comments":"Self-documenting inequality assertion\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Eq"],"Eq"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Show"],"Show"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Test","QuickCheck"],"Result"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[266,64],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[266,1]},"title":"assertNotEquals"},{"children":[],"comments":null,"info":{"alias":[["Test","QuickCheck"],{"Right":{"Left":{"Ident":"assertNotEquals"}}}],"declType":"alias","fixity":{"associativity":"infix","precedence":2}},"kind":null,"sourceSpan":{"end":[269,31],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[269,1]},"title":"(/==)"},{"children":[],"comments":null,"info":{"alias":[["Test","QuickCheck"],{"Right":{"Left":{"Ident":"assertNotEquals"}}}],"declType":"alias","fixity":{"associativity":"infix","precedence":2}},"kind":null,"sourceSpan":{"end":[270,31],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[270,1]},"title":"(/=?)"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Ord"],"Ord"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Show"],"Show"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Test","QuickCheck"],"Result"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[272,64],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[272,1]},"title":"assertLessThan"},{"children":[],"comments":null,"info":{"alias":[["Test","QuickCheck"],{"Right":{"Left":{"Ident":"assertLessThan"}}}],"declType":"alias","fixity":{"associativity":"infix","precedence":2}},"kind":null,"sourceSpan":{"end":[275,29],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[275,1]},"title":"(<?)"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Ord"],"Ord"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Show"],"Show"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Test","QuickCheck"],"Result"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[277,66],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[277,1]},"title":"assertLessThanEq"},{"children":[],"comments":null,"info":{"alias":[["Test","QuickCheck"],{"Right":{"Left":{"Ident":"assertLessThanEq"}}}],"declType":"alias","fixity":{"associativity":"infix","precedence":2}},"kind":null,"sourceSpan":{"end":[280,32],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[280,1]},"title":"(<=?)"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Ord"],"Ord"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Show"],"Show"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Test","QuickCheck"],"Result"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[282,67],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[282,1]},"title":"assertGreaterThan"},{"children":[],"comments":null,"info":{"alias":[["Test","QuickCheck"],{"Right":{"Left":{"Ident":"assertGreaterThan"}}}],"declType":"alias","fixity":{"associativity":"infix","precedence":2}},"kind":null,"sourceSpan":{"end":[285,32],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[285,1]},"title":"(>?)"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Ord"],"Ord"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Show"],"Show"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Test","QuickCheck"],"Result"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[287,69],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[287,1]},"title":"assertGreaterThanEq"},{"children":[],"comments":null,"info":{"alias":[["Test","QuickCheck"],{"Right":{"Left":{"Ident":"assertGreaterThanEq"}}}],"declType":"alias","fixity":{"associativity":"infix","precedence":2}},"kind":null,"sourceSpan":{"end":[290,35],"name":".spago/packages/quickcheck-8.0.1/src/Test/QuickCheck.purs","start":[290,1]},"title":"(>=?)"}],"name":"Test.QuickCheck","reExports":[]}