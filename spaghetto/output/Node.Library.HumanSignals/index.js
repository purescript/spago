// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Generic_Rep from "../Data.Generic.Rep/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Show_Generic from "../Data.Show.Generic/index.js";
import * as Foreign_Object from "../Foreign.Object/index.js";
var genericShowConstructor = /* #__PURE__ */ Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var eq = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Maybe.eqMaybe(Data_Eq.eqInt));
var eq1 = /* #__PURE__ */ Data_Eq.eq(Data_Eq.eqInt);
var insert = /* #__PURE__ */ Data_Map_Internal.insert(Data_Ord.ordInt);
var alt = /* #__PURE__ */ Control_Alt.alt(Data_Maybe.altMaybe);
var Terminate = /* #__PURE__ */ (function () {
    function Terminate() {

    };
    Terminate.value = new Terminate();
    return Terminate;
})();
var Core = /* #__PURE__ */ (function () {
    function Core() {

    };
    Core.value = new Core();
    return Core;
})();
var Ignore = /* #__PURE__ */ (function () {
    function Ignore() {

    };
    Ignore.value = new Ignore();
    return Ignore;
})();
var Pause = /* #__PURE__ */ (function () {
    function Pause() {

    };
    Pause.value = new Pause();
    return Pause;
})();
var Unpause = /* #__PURE__ */ (function () {
    function Unpause() {

    };
    Unpause.value = new Unpause();
    return Unpause;
})();
var Ansi = /* #__PURE__ */ (function () {
    function Ansi() {

    };
    Ansi.value = new Ansi();
    return Ansi;
})();
var Posix = /* #__PURE__ */ (function () {
    function Posix() {

    };
    Posix.value = new Posix();
    return Posix;
})();
var Bsd = /* #__PURE__ */ (function () {
    function Bsd() {

    };
    Bsd.value = new Bsd();
    return Bsd;
})();
var Systemv = /* #__PURE__ */ (function () {
    function Systemv() {

    };
    Systemv.value = new Systemv();
    return Systemv;
})();
var Other = /* #__PURE__ */ (function () {
    function Other() {

    };
    Other.value = new Other();
    return Other;
})();
var genericUnhandledAction_ = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return Terminate.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return Core.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
            return Ignore.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
            return Pause.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inr))) {
            return Unpause.value;
        };
        throw new Error("Failed pattern match at Node.Library.HumanSignals (line 30, column 1 - line 30, column 42): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof Terminate) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof Core) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
        };
        if (x instanceof Ignore) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
        };
        if (x instanceof Pause) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
        };
        if (x instanceof Unpause) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value))));
        };
        throw new Error("Failed pattern match at Node.Library.HumanSignals (line 30, column 1 - line 30, column 42): " + [ x.constructor.name ]);
    }
};
var showUnhandledAction = {
    show: /* #__PURE__ */ Data_Show_Generic.genericShow(genericUnhandledAction_)(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ genericShowConstructor({
        reflectSymbol: function () {
            return "Terminate";
        }
    }))(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ genericShowConstructor({
        reflectSymbol: function () {
            return "Core";
        }
    }))(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ genericShowConstructor({
        reflectSymbol: function () {
            return "Ignore";
        }
    }))(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ genericShowConstructor({
        reflectSymbol: function () {
            return "Pause";
        }
    }))(/* #__PURE__ */ genericShowConstructor({
        reflectSymbol: function () {
            return "Unpause";
        }
    }))))))
};
var genericStandardSource_ = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return Ansi.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return Posix.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
            return Bsd.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
            return Systemv.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inr))) {
            return Other.value;
        };
        throw new Error("Failed pattern match at Node.Library.HumanSignals (line 43, column 1 - line 43, column 41): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof Ansi) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof Posix) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
        };
        if (x instanceof Bsd) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
        };
        if (x instanceof Systemv) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
        };
        if (x instanceof Other) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value))));
        };
        throw new Error("Failed pattern match at Node.Library.HumanSignals (line 43, column 1 - line 43, column 41): " + [ x.constructor.name ]);
    }
};
var showStandardSource = {
    show: /* #__PURE__ */ Data_Show_Generic.genericShow(genericStandardSource_)(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ genericShowConstructor({
        reflectSymbol: function () {
            return "Ansi";
        }
    }))(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ genericShowConstructor({
        reflectSymbol: function () {
            return "Posix";
        }
    }))(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ genericShowConstructor({
        reflectSymbol: function () {
            return "Bsd";
        }
    }))(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ genericShowConstructor({
        reflectSymbol: function () {
            return "Systemv";
        }
    }))(/* #__PURE__ */ genericShowConstructor({
        reflectSymbol: function () {
            return "Other";
        }
    }))))))
};
var eqUnhandledAction = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Terminate && y instanceof Terminate) {
                return true;
            };
            if (x instanceof Core && y instanceof Core) {
                return true;
            };
            if (x instanceof Ignore && y instanceof Ignore) {
                return true;
            };
            if (x instanceof Pause && y instanceof Pause) {
                return true;
            };
            if (x instanceof Unpause && y instanceof Unpause) {
                return true;
            };
            return false;
        };
    }
};
var eqStandardSource = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Ansi && y instanceof Ansi) {
                return true;
            };
            if (x instanceof Posix && y instanceof Posix) {
                return true;
            };
            if (x instanceof Bsd && y instanceof Bsd) {
                return true;
            };
            if (x instanceof Systemv && y instanceof Systemv) {
                return true;
            };
            if (x instanceof Other && y instanceof Other) {
                return true;
            };
            return false;
        };
    }
};
var signals = /* #__PURE__ */ (function () {
    var normalizeSignal = function (v) {
        var mbConstantSignal = Foreign_Object.lookup(v.name)($foreign.osConstants.signals);
        return {
            name: v.name,
            number: Data_Maybe.fromMaybe(v.number)(mbConstantSignal),
            description: v.description,
            supported: Data_Maybe.isJust(mbConstantSignal),
            action: v.action,
            standard: v.standard,
            forced: v.forced
        };
    };
    var byName = {
        SIGHUP: normalizeSignal({
            name: "SIGHUP",
            number: 1,
            action: Terminate.value,
            description: "Terminal closed",
            standard: Posix.value,
            forced: false
        }),
        SIGINT: normalizeSignal({
            name: "SIGINT",
            number: 2,
            action: Terminate.value,
            description: "User interruption with CTRL-C",
            standard: Ansi.value,
            forced: false
        }),
        SIGQUIT: normalizeSignal({
            name: "SIGQUIT",
            number: 3,
            action: Core.value,
            description: "User interruption with CTRL-\\",
            standard: Posix.value,
            forced: false
        }),
        SIGILL: normalizeSignal({
            name: "SIGILL",
            number: 4,
            action: Core.value,
            description: "Invalid machine instruction",
            standard: Ansi.value,
            forced: false
        }),
        SIGTRAP: normalizeSignal({
            name: "SIGTRAP",
            number: 5,
            action: Core.value,
            description: "Debugger breakpoint",
            standard: Posix.value,
            forced: false
        }),
        SIGABRT: normalizeSignal({
            name: "SIGABRT",
            number: 6,
            action: Core.value,
            description: "Aborted",
            standard: Ansi.value,
            forced: false
        }),
        SIGIOT: normalizeSignal({
            name: "SIGIOT",
            number: 6,
            action: Core.value,
            description: "Aborted",
            standard: Bsd.value,
            forced: false
        }),
        SIGBUS: normalizeSignal({
            name: "SIGBUS",
            number: 7,
            action: Core.value,
            description: "Bus error due to misaligned, non-existing address or paging error",
            standard: Bsd.value,
            forced: false
        }),
        SIGEMT: normalizeSignal({
            name: "SIGEMT",
            number: 7,
            action: Terminate.value,
            description: "Command should be emulated but is not implemented",
            standard: Other.value,
            forced: false
        }),
        SIGFPE: normalizeSignal({
            name: "SIGFPE",
            number: 8,
            action: Core.value,
            description: "Floating point arithmetic error",
            standard: Ansi.value,
            forced: false
        }),
        SIGKILL: normalizeSignal({
            name: "SIGKILL",
            number: 9,
            action: Terminate.value,
            description: "Forced termination",
            standard: Posix.value,
            forced: true
        }),
        SIGUSR1: normalizeSignal({
            name: "SIGUSR1",
            number: 10,
            action: Terminate.value,
            description: "Application-specific signal",
            standard: Posix.value,
            forced: false
        }),
        SIGSEGV: normalizeSignal({
            name: "SIGSEGV",
            number: 11,
            action: Core.value,
            description: "Segmentation fault",
            standard: Ansi.value,
            forced: false
        }),
        SIGUSR2: normalizeSignal({
            name: "SIGUSR2",
            number: 12,
            action: Terminate.value,
            description: "Application-specific signal",
            standard: Posix.value,
            forced: false
        }),
        SIGPIPE: normalizeSignal({
            name: "SIGPIPE",
            number: 13,
            action: Terminate.value,
            description: "Broken pipe or socket",
            standard: Posix.value,
            forced: false
        }),
        SIGALRM: normalizeSignal({
            name: "SIGALRM",
            number: 14,
            action: Terminate.value,
            description: "Timeout or timer",
            standard: Posix.value,
            forced: false
        }),
        SIGTERM: normalizeSignal({
            name: "SIGTERM",
            number: 15,
            action: Terminate.value,
            description: "Termination",
            standard: Ansi.value,
            forced: false
        }),
        SIGSTKFLT: normalizeSignal({
            name: "SIGSTKFLT",
            number: 16,
            action: Terminate.value,
            description: "Stack is empty or overflowed",
            standard: Other.value,
            forced: false
        }),
        SIGCHLD: normalizeSignal({
            name: "SIGCHLD",
            number: 17,
            action: Ignore.value,
            description: "Child process terminated, paused or unpaused",
            standard: Posix.value,
            forced: false
        }),
        SIGCLD: normalizeSignal({
            name: "SIGCLD",
            number: 17,
            action: Ignore.value,
            description: "Child process terminated, paused or unpaused",
            standard: Other.value,
            forced: false
        }),
        SIGCONT: normalizeSignal({
            name: "SIGCONT",
            number: 18,
            action: Unpause.value,
            description: "Unpaused",
            standard: Posix.value,
            forced: true
        }),
        SIGSTOP: normalizeSignal({
            name: "SIGSTOP",
            number: 19,
            action: Pause.value,
            description: "Paused",
            standard: Posix.value,
            forced: true
        }),
        SIGTSTP: normalizeSignal({
            name: "SIGTSTP",
            number: 20,
            action: Pause.value,
            description: "Paused using CTRL-Z or \"suspend\"",
            standard: Posix.value,
            forced: false
        }),
        SIGTTIN: normalizeSignal({
            name: "SIGTTIN",
            number: 21,
            action: Pause.value,
            description: "Background process cannot read terminal input",
            standard: Posix.value,
            forced: false
        }),
        SIGBREAK: normalizeSignal({
            name: "SIGBREAK",
            number: 21,
            action: Terminate.value,
            description: "User interruption with CTRL-BREAK",
            standard: Other.value,
            forced: false
        }),
        SIGTTOU: normalizeSignal({
            name: "SIGTTOU",
            number: 22,
            action: Pause.value,
            description: "Background process cannot write to terminal output",
            standard: Posix.value,
            forced: false
        }),
        SIGURG: normalizeSignal({
            name: "SIGURG",
            number: 23,
            action: Ignore.value,
            description: "Socket received out-of-band data",
            standard: Bsd.value,
            forced: false
        }),
        SIGXCPU: normalizeSignal({
            name: "SIGXCPU",
            number: 24,
            action: Core.value,
            description: "Process timed out",
            standard: Bsd.value,
            forced: false
        }),
        SIGXFSZ: normalizeSignal({
            name: "SIGXFSZ",
            number: 25,
            action: Core.value,
            description: "File too big",
            standard: Bsd.value,
            forced: false
        }),
        SIGVTALRM: normalizeSignal({
            name: "SIGVTALRM",
            number: 26,
            action: Terminate.value,
            description: "Timeout or timer",
            standard: Bsd.value,
            forced: false
        }),
        SIGPROF: normalizeSignal({
            name: "SIGPROF",
            number: 27,
            action: Terminate.value,
            description: "Timeout or timer",
            standard: Bsd.value,
            forced: false
        }),
        SIGWINCH: normalizeSignal({
            name: "SIGWINCH",
            number: 28,
            action: Ignore.value,
            description: "Terminal window size changed",
            standard: Bsd.value,
            forced: false
        }),
        SIGIO: normalizeSignal({
            name: "SIGIO",
            number: 29,
            action: Terminate.value,
            description: "I/O is available",
            standard: Other.value,
            forced: false
        }),
        SIGPOLL: normalizeSignal({
            name: "SIGPOLL",
            number: 29,
            action: Terminate.value,
            description: "Watched event",
            standard: Other.value,
            forced: false
        }),
        SIGINFO: normalizeSignal({
            name: "SIGINFO",
            number: 29,
            action: Ignore.value,
            description: "Request for process information",
            standard: Other.value,
            forced: false
        }),
        SIGPWR: normalizeSignal({
            name: "SIGPWR",
            number: 30,
            action: Terminate.value,
            description: "Device running out of power",
            standard: Systemv.value,
            forced: false
        }),
        SIGSYS: normalizeSignal({
            name: "SIGSYS",
            number: 31,
            action: Core.value,
            description: "Invalid system call",
            standard: Other.value,
            forced: false
        }),
        SIGUNUSED: normalizeSignal({
            name: "SIGUNUSED",
            number: 31,
            action: Terminate.value,
            description: "Invalid system call",
            standard: Other.value,
            forced: false
        }),
        SIGRT1: normalizeSignal({
            name: "SIGRT1",
            number: 34,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT2: normalizeSignal({
            name: "SIGRT2",
            number: 35,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT3: normalizeSignal({
            name: "SIGRT3",
            number: 36,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT4: normalizeSignal({
            name: "SIGRT4",
            number: 37,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT5: normalizeSignal({
            name: "SIGRT5",
            number: 38,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT6: normalizeSignal({
            name: "SIGRT6",
            number: 39,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT7: normalizeSignal({
            name: "SIGRT7",
            number: 40,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT8: normalizeSignal({
            name: "SIGRT8",
            number: 41,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT9: normalizeSignal({
            name: "SIGRT9",
            number: 42,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT10: normalizeSignal({
            name: "SIGRT10",
            number: 43,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT11: normalizeSignal({
            name: "SIGRT11",
            number: 44,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT12: normalizeSignal({
            name: "SIGRT12",
            number: 45,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT13: normalizeSignal({
            name: "SIGRT13",
            number: 46,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT14: normalizeSignal({
            name: "SIGRT14",
            number: 47,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT15: normalizeSignal({
            name: "SIGRT15",
            number: 48,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT16: normalizeSignal({
            name: "SIGRT16",
            number: 49,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT17: normalizeSignal({
            name: "SIGRT17",
            number: 50,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT18: normalizeSignal({
            name: "SIGRT18",
            number: 51,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT19: normalizeSignal({
            name: "SIGRT19",
            number: 52,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT20: normalizeSignal({
            name: "SIGRT20",
            number: 53,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT21: normalizeSignal({
            name: "SIGRT21",
            number: 54,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT22: normalizeSignal({
            name: "SIGRT22",
            number: 55,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT23: normalizeSignal({
            name: "SIGRT23",
            number: 56,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT24: normalizeSignal({
            name: "SIGRT24",
            number: 57,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT25: normalizeSignal({
            name: "SIGRT25",
            number: 58,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT26: normalizeSignal({
            name: "SIGRT26",
            number: 59,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT27: normalizeSignal({
            name: "SIGRT27",
            number: 60,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT28: normalizeSignal({
            name: "SIGRT28",
            number: 61,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT29: normalizeSignal({
            name: "SIGRT29",
            number: 62,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT30: normalizeSignal({
            name: "SIGRT30",
            number: 63,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        }),
        SIGRT31: normalizeSignal({
            name: "SIGRT31",
            number: 64,
            action: Terminate.value,
            description: "Application-specific signal (realtime)",
            standard: Posix.value,
            forced: false
        })
    };
    var byString = Foreign_Object.fromHomogeneous()(byName);
    var signalsArray = Foreign_Object.toArrayWithKey(function (v) {
        return identity;
    })(byString);
    var byNumber = Data_Function.flip(Data_Array.foldl)(Data_Map_Internal.empty)(function (acc) {
        return function (number) {
            var byOsConstant = Data_Array.find(function (v) {
                return eq(new Data_Maybe.Just(number))(Foreign_Object.lookup(v.name)($foreign.osConstants.signals));
            })(signalsArray);
            var byDefinedNumber = Data_Array.find((function () {
                var $110 = eq1(number);
                return function ($111) {
                    return $110((function (v) {
                        return v.number;
                    })($111));
                };
            })())(signalsArray);
            return Data_Maybe.maybe(acc)(function (sig) {
                return insert(number)(sig)(acc);
            })(alt(byOsConstant)(byDefinedNumber));
        };
    })(Data_Array.range(0)(64));
    return {
        byName: byName,
        byNumber: byNumber,
        byString: byString
    };
})();
export {
    Terminate,
    Core,
    Ignore,
    Pause,
    Unpause,
    Ansi,
    Posix,
    Bsd,
    Systemv,
    Other,
    signals,
    eqUnhandledAction,
    genericUnhandledAction_,
    showUnhandledAction,
    eqStandardSource,
    genericStandardSource_,
    showStandardSource
};
//# sourceMappingURL=index.js.map
