{"comments":null,"declarations":[{"children":[],"comments":"Selects the first 128 characters of the Unicode character set,\ncorresponding to the ASCII character set.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[337,32],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[337,1]},"title":"isAscii"},{"children":[],"comments":"Selects ASCII lower-case letters,\ni.e. characters satisfying both `isAscii` and `isLower`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[347,37],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[347,1]},"title":"isAsciiLower"},{"children":[],"comments":"Selects ASCII upper-case letters,\ni.e. characters satisfying both `isAscii` and `isUpper`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[352,37],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[352,1]},"title":"isAsciiUpper"},{"children":[],"comments":"Selects the first 256 characters of the Unicode character set,\ncorresponding to the ISO 8859-1 (Latin-1) character set.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[342,33],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[342,1]},"title":"isLatin1"},{"children":[],"comments":"Selects lower-case alphabetic Unicode characters (letters).\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[387,32],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[387,1]},"title":"isLower"},{"children":[],"comments":"Selects upper-case or title-case alphabetic Unicode characters (letters).\nTitle case is used by a small number of letter ligatures like the\nsingle-character form of /Lj/.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[383,32],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[383,1]},"title":"isUpper"},{"children":[],"comments":"Selects alphabetic Unicode characters (lower-case, upper-case and\ntitle-case letters, plus letters of caseless scripts and modifiers letters).\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[392,32],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[392,1]},"title":"isAlpha"},{"children":[],"comments":"Selects alphabetic or numeric digit Unicode characters.\n\nNote that numeric digits outside the ASCII range are selected by this\nfunction but not by `isDigit`.  Such digits may be part of identifiers\nbut are not used by the printer and reader to represent numbers.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[400,35],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[400,1]},"title":"isAlphaNum"},{"children":[],"comments":"Selects alphabetic Unicode characters (lower-case, upper-case and\ntitle-case letters, plus letters of caseless scripts and\nmodifiers letters).\n\nThis function returns `true` if its argument has one of the\nfollowing `GeneralCategory`s, or `false` otherwise:\n\n- `UppercaseLetter`\n- `LowercaseLetter`\n- `TitlecaseLetter`\n- `ModifierLetter`\n- `OtherLetter`\n\nThese classes are defined in the\n[Unicode Character Database](http://www.unicode.org/reports/tr44/tr44-14.html#GC_Values_Table)\npart of the Unicode standard. The same document defines what is\nand is not a \"Letter\".\n\n*Examples*\n\nBasic usage:\n\n```\n>>> isLetter (codePointFromChar 'a')\ntrue\n>>> isLetter (codePointFromChar 'A')\ntrue\n>>> isLetter (codePointFromChar '0')\nfalse\n>>> isLetter (codePointFromChar '%')\nfalse\n>>> isLetter (codePointFromChar 'â™¥')\nfalse\n>>> isLetter (codePointFromChar '\\x1F')\nfalse\n```\n\nEnsure that 'isLetter' and 'isAlpha' are equivalent.\n\n```\n>>> chars = enumFromTo bottom top :: Array CodePoint\n>>> letters = map isLetter chars\n>>> alphas = map isAlpha chars\n>>> letters == alphas\ntrue\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[690,33],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[690,1]},"title":"isLetter"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim","TypeError"],"Text"],"tag":"TypeConstructor"},{"annotation":[],"contents":"'isDigit' is deprecated, use 'isDecDigit', 'isHexDigit', or 'isOctDigit' instead","tag":"TypeLevelString"}],"tag":"TypeApp"},"tag":"ParensInType"}],"constraintClass":[["Prim","TypeError"],"Warn"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}},"kind":null,"sourceSpan":{"end":[426,130],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[426,1]},"title":"isDigit"},{"children":[],"comments":"Selects ASCII decimal digits, i.e. `0..9`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[404,35],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[404,1]},"title":"isDecDigit"},{"children":[],"comments":"Selects ASCII octal digits, i.e. `0..7`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[412,35],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[412,1]},"title":"isOctDigit"},{"children":[],"comments":"Selects ASCII hexadecimal digits,\ni.e. `0..9, A..F, a..f`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[421,35],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[421,1]},"title":"isHexDigit"},{"children":[],"comments":"Selects control characters, which are the non-printing characters of\nthe Latin-1 subset of Unicode.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[357,34],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[357,1]},"title":"isControl"},{"children":[],"comments":"Selects printable Unicode characters\n(letters, numbers, marks, punctuation, symbols and spaces).\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[362,32],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[362,1]},"title":"isPrint"},{"children":[],"comments":"Returns `true` for any Unicode space character, and the control\ncharacters `\\t`, `\\n`, `\\r`, `\\f`, `\\v`.\n\n`isSpace` includes non-breaking space.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[369,32],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[369,1]},"title":"isSpace"},{"children":[],"comments":"Selects Unicode symbol characters, including mathematical and\ncurrency symbols.\n\nThis function returns `true` if its argument has one of the\nfollowing `GeneralCategory`s, or `false` otherwise:\n\n- `MathSymbol`\n- `CurrencySymbol`\n- `ModifierSymbol`\n- `OtherSymbol`\n\nThese classes are defined in the\n[Unicode Character Database](http://www.unicode.org/reports/tr44/tr44-14.html#GC_Values_Table),\npart of the Unicode standard. The same document defines what is\nand is not a \"Symbol\".\n\n*Examples*\n\nBasic usage:\n\n```\n>>> isSymbol (codePointFromChar 'a')\nfalse\n>>> isSymbol (codePointFromChar '6')\nfalse\n>>> isSymbol (codePointFromChar '=')\ntrue\n```\n\nThe definition of \\\"math symbol\\\" may be a little\ncounter-intuitive depending on one's background:\n\n```\n>>> isSymbol (codePointFromChar '+')\ntrue\n>>> isSymbol (codePointFromChar '-')\nfalse\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[516,33],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[516,1]},"title":"isSymbol"},{"children":[],"comments":"Selects Unicode space and separator characters.\n\nThis function returns `true` if its argument has one of the\nfollowing `GeneralCategory`s, or `false` otherwise:\n\n- `Space`\n- `LineSeparator`\n- `ParagraphSeparator`\n\nThese classes are defined in the\n[Unicode Character Database](http://www.unicode.org/reports/tr44/tr44-14.html#GC_Values_Table)\npart of the Unicode standard. The same document defines what is\nand is not a \"Separator\".\n\n*Examples*\n\nBasic usage:\n\n```\n>>> isSeparator (codePointFromChar 'a')\nfalse\n>>> isSeparator (codePointFromChar '6')\nfalse\n>>> isSeparator (codePointFromChar ' ')\ntrue\n>>> isSeparator (codePointFromChar '-')\nfalse\n```\n\nWarning: newlines and tab characters are not considered\nseparators.\n\n```\n>>> isSeparator (codePointFromChar '\\n')\nfalse\n>>> isSeparator (codePointFromChar '\\t')\nfalse\n```\n\nBut some more exotic characters are (like HTML's @&nbsp;@):\n\n```\n>>> isSeparator (codePointFromChar '\\xA0')\ntrue\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[842,36],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[842,1]},"title":"isSeparator"},{"children":[],"comments":"Selects Unicode punctuation characters, including various kinds\nof connectors, brackets and quotes.\n\nThis function returns `true` if its argument has one of the\nfollowing `GeneralCategory`s, or `false` otherwise:\n\n- `ConnectorPunctuation`\n- `DashPunctuation`\n- `OpenPunctuation`\n- `ClosePunctuation`\n- `InitialQuote`\n- `FinalQuote`\n- `OtherPunctuation`\n\nThese classes are defined in the\n[Unicode Character Database])http://www.unicode.org/reports/tr44/tr44-14.html#GC_Values_Table)\npart of the Unicode standard. The same document defines what is\nand is not a \"Punctuation\".\n\n*Examples*\n\nBasic usage:\n\n```\n>>> isPunctuation (codePointFromChar 'a')\nfalse\n>>> isPunctuation (codePointFromChar '7')\nfalse\n>>> isPunctuation (codePointFromChar 'â™¥')\nfalse\n>>> isPunctuation (codePointFromChar '\"')\ntrue\n>>> isPunctuation (codePointFromChar '?')\ntrue\n>>> isPunctuation (codePointFromChar 'â€”')\ntrue\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[466,38],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[466,1]},"title":"isPunctuation"},{"children":[],"comments":"Selects Unicode mark characters, for example accents and the\nlike, which combine with preceding characters.\n\nThis function returns `true` if its argument has one of the\nfollowing `GeneralCategory`s, or `false` otherwise:\n\n- `NonSpacingMark`\n- `SpacingCombiningMark`\n- `EnclosingMark`\n\nThese classes are defined in the\n[Unicode Character Database](http://www.unicode.org/reports/tr44/tr44-14.html#GC_Values_Table),\npart of the Unicode standard. The same document defines what is\nand is not a \"Mark\".\n\n*Examples*\n\nBasic usage:\n\n```\n>>> isMark (codePointFromChar 'a')\nfalse\n>>> isMark (codePointFromChar '0')\nfalse\n```\n\nCombining marks such as accent characters usually need to follow\nanother character before they become printable:\n\n```\n>>> map isMark (toCodePointArray \"oÌ€\")\n[false,true]\n```\n\nPuns are not necessarily supported:\n\n```\n>>> isMark (codePointFromChar 'âœ“')\nfalse\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[740,31],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[740,1]},"title":"isMark"},{"children":[],"comments":"Selects Unicode numeric characters, including digits from various\nscripts, Roman numerals, et cetera.\n\nThis function returns `true` if its argument has one of the\nfollowing `GeneralCategory`s, or `false` otherwise:\n\n* `DecimalNumber`\n* `LetterNumber`\n* `OtherNumber`\n\nThese classes are defined in the\n[Unicode Character Database](http://www.unicode.org/reports/tr44/tr44-14.html#GC_Values_Table),\npart of the Unicode standard. The same document defines what is\nand is not a \"Number\".\n\n*Examples*\n\nBasic usage:\n\n```\n>>> isNumber (codePointFromChar 'a')\nfalse\n>>> isNumber (codePointFromChar '%')\nfalse\n>>> isNumber (codePointFromChar '3')\ntrue\n```\n\nASCII @\\'0\\'@ through @\\'9\\'@ are all numbers:\n\n```\n>>> and $ map (isNumber <<< codePointFromChar) (enumFromTo '0' '9' :: Array Char)\ntrue\n```\n\nUnicode Roman numerals are \\\"numbers\\\" as well:\n\n```\n>>> isNumber (codePointFromChar 'â…¨')\ntrue\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[789,33],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[789,1]},"title":"isNumber"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim","TypeError"],"Text"],"tag":"TypeConstructor"},{"annotation":[],"contents":"'digitToInt' is deprecated, use 'decDigitToInt', 'hexDigitToInt', or 'octDigitToInt' instead","tag":"TypeLevelString"}],"tag":"TypeApp"},"tag":"ParensInType"}],"constraintClass":[["Prim","TypeError"],"Warn"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}},"kind":null,"sourceSpan":{"end":[641,147],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[641,1]},"title":"digitToInt"},{"children":[],"comments":"Convert a single digit `Char` to the corresponding `Just Int` if its argument\nsatisfies `isHexDigit` (one of `0..9, A..F, a..f`). Anything else converts to `Nothing`\n\n```\n>>> import Data.Traversable\n\n>>> traverse (hexDigitToInt <<< codePointFromChar) ['0','1','2','3','4','5','6','7','8','9']\n(Just [0,1,2,3,4,5,6,7,8,9])\n\n>>> traverse (hexDigitToInt <<< codePointFromChar) ['a','b','c','d','e','f']\n(Just [10,11,12,13,14,15])\n\n>>> traverse (hexDigitToInt <<< codePointFromChar) ['A','B','C','D','E','F']\n(Just [10,11,12,13,14,15])\n\n>>> hexDigitToInt (codePointFromChar 'G')\nNothing\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[588,40],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[588,1]},"title":"hexDigitToInt"},{"children":[],"comments":"Convert a single digit `Char` to the corresponding `Just Int` if its argument\nsatisfies `isDecDigit` (one of `0..9`). Anything else converts to `Nothing`\n\n```\n>>> import Data.Traversable\n\n>>> traverse decDigitToInt ['0','1','2','3','4','5','6','7','8','9']\n(Just [0,1,2,3,4,5,6,7,8,9])\n\n>>> decDigitToInt 'a'\nNothing\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[619,40],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[619,1]},"title":"decDigitToInt"},{"children":[],"comments":"Convert a single digit `Char` to the corresponding `Just Int` if its argument\nsatisfies `isOctDigit` (one of `0..7`). Anything else converts to `Nothing`\n\n```\n>>> import Data.Traversable\n\n>>> traverse octDigitToInt ['0','1','2','3','4','5','6','7']\n(Just [0,1,2,3,4,5,6,7])\n\n>>> octDigitToInt '8'\nNothing\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[636,40],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[636,1]},"title":"octDigitToInt"},{"children":[],"comments":"Convert a code point to the corresponding lower-case sequence of code points.\nAny other character is returned unchanged.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[532,40],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[532,1]},"title":"toLower"},{"children":[],"comments":"Convert a code point to the corresponding upper-case sequence of code points.\nAny other character is returned unchanged.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[527,40],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[527,1]},"title":"toUpper"},{"children":[],"comments":"Convert a code point to the corresponding title-case or upper-case\nsequence of code points.  (Title case differs from upper case only for a\nsmall number of ligature characters.)\nAny other character is returned unchanged.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[539,40],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[539,1]},"title":"toTitle"},{"children":[],"comments":"Convert a code point to the corresponding case-folded sequence of code\npoints, for implementing caseless matching.\nAny other character is returned unchanged.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[545,41],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[545,1]},"title":"caseFold"},{"children":[],"comments":"Convert a code point to the corresponding lower-case code point, if any.\nAny other character is returned unchanged.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[555,40],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[555,1]},"title":"toLowerSimple"},{"children":[],"comments":"Convert a code point to the corresponding upper-case code point, if any.\nAny other character is returned unchanged.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[550,40],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[550,1]},"title":"toUpperSimple"},{"children":[],"comments":"Convert a code point to the corresponding title-case or upper-case\ncode point, if any.  (Title case differs from upper case only for a small\nnumber of ligature characters.)\nAny other character is returned unchanged.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[562,40],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[562,1]},"title":"toTitleSimple"},{"children":[],"comments":"Convert a code point to the corresponding case-folded code point.\nAny other character is returned unchanged.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[567,41],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[567,1]},"title":"caseFoldSimple"},{"children":[{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[111,20],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[111,3]},"title":"UppercaseLetter"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[112,20],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[112,3]},"title":"LowercaseLetter"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[113,20],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[113,3]},"title":"TitlecaseLetter"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[114,19],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[114,3]},"title":"ModifierLetter"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[115,16],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[115,3]},"title":"OtherLetter"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[116,19],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[116,3]},"title":"NonSpacingMark"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[117,25],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[117,3]},"title":"SpacingCombiningMark"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[118,18],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[118,3]},"title":"EnclosingMark"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[119,18],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[119,3]},"title":"DecimalNumber"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[120,17],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[120,3]},"title":"LetterNumber"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[121,16],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[121,3]},"title":"OtherNumber"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[122,25],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[122,3]},"title":"ConnectorPunctuation"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[123,20],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[123,3]},"title":"DashPunctuation"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[124,20],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[124,3]},"title":"OpenPunctuation"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[125,21],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[125,3]},"title":"ClosePunctuation"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[126,17],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[126,3]},"title":"InitialQuote"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[127,15],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[127,3]},"title":"FinalQuote"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[128,21],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[128,3]},"title":"OtherPunctuation"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[129,15],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[129,3]},"title":"MathSymbol"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[130,19],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[130,3]},"title":"CurrencySymbol"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[131,19],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[131,3]},"title":"ModifierSymbol"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[132,16],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[132,3]},"title":"OtherSymbol"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[133,10],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[133,3]},"title":"Space"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[134,18],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[134,3]},"title":"LineSeparator"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[135,23],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[135,3]},"title":"ParagraphSeparator"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[136,12],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[136,3]},"title":"Control"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[137,11],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[137,3]},"title":"Format"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[138,14],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[138,3]},"title":"Surrogate"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[139,15],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[139,3]},"title":"PrivateUse"},{"comments":null,"info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":{"end":[140,16],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[140,3]},"title":"NotAssigned"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Show"],"Show"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","CodePoint","Unicode"],"GeneralCategory"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[268,35],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[238,1]},"title":"showGeneralCategory"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Eq"],"Eq"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","CodePoint","Unicode"],"GeneralCategory"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[301,17],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[270,1]},"title":"eqGeneralCategory"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Ord"],"Ord"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","CodePoint","Unicode"],"GeneralCategory"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[304,76],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[303,1]},"title":"ordGeneralCategory"},{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Bounded"],"Bounded"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","CodePoint","Unicode"],"GeneralCategory"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[308,20],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[306,1]},"title":"boundedGeneralCategory"}],"comments":"Unicode General Categories (column 2 of the UnicodeData table) in\nthe order they are listed in the Unicode standard (the Unicode\nCharacter Database, in particular).\n\n*Examples*\n\nBasic usage:\n\n```\n>>> :t OtherLetter\nOtherLetter :: GeneralCategory\n```\n\n`Eq` instance:\n\n```\n>>> UppercaseLetter == UppercaseLetter\ntrue\n>>> UppercaseLetter == LowercaseLetter\nfalse\n```\n\n`Ord` instance:\n\n```\n>>> NonSpacingMark <= MathSymbol\ntrue\n```\n\n`Enum` instance (TODO: this is not implemented yet):\n\n```\n>>> enumFromTo ModifierLetter SpacingCombiningMark\n[ModifierLetter,OtherLetter,NonSpacingMark,SpacingCombiningMark]\n```\n\n`Show` instance:\n\n```\n>>> show EnclosingMark\n\"EnclosingMark\"\n```\n\n`Bounded` instance:\n\n```\n>>> bottom :: GeneralCategory\nUppercaseLetter\n>>> top :: GeneralCategory\nNotAssigned\n```\n","info":{"dataDeclType":"data","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[140,16],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[110,1]},"title":"GeneralCategory"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","CodePoint","Unicode","Internal"],"UnicodeCategory"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","CodePoint","Unicode"],"GeneralCategory"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[206,61],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[206,1]},"title":"unicodeCatToGeneralCat"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","CodePoint","Unicode"],"GeneralCategory"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[142,42],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[142,1]},"title":"generalCatToInt"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","CodePoint","Unicode"],"GeneralCategory"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","CodePoint","Unicode","Internal"],"UnicodeCategory"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[174,61],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[174,1]},"title":"generalCatToUnicodeCat"},{"children":[],"comments":"The Unicode general category of the character.\n\n*Examples*\n\nBasic usage:\n\n```\n>>> generalCategory (codePointFromChar 'a')\nJust LowercaseLetter\n>>> generalCategory (codePointFromChar 'A')\nJust UppercaseLetter\n>>> generalCategory (codePointFromChar '0')\nJust DecimalNumber\n>>> generalCategory (codePointFromChar '%')\nJust OtherPunctuation\n>>> generalCategory (codePointFromChar 'â™¥')\nJust OtherSymbol\n>>> generalCategory (codePointFromChar '\\31')\nJust Control\n>>> generalCategory (codePointFromChar ' ')\nJust Space\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","String","CodePoints"],"CodePoint"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","CodePoint","Unicode"],"GeneralCategory"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[332,54],"name":".spago/packages/unicode-6.0.0/src/Data/CodePoint/Unicode.purs","start":[332,1]},"title":"generalCategory"}],"name":"Data.CodePoint.Unicode","reExports":[]}