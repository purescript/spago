// Generated by purs version 0.15.10
import * as Control_Lazy from "../Control.Lazy/index.js";
import * as Data_Bounded from "../Data.Bounded/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor_Invariant from "../Data.Functor.Invariant/index.js";
import * as Data_Generic_Rep from "../Data.Generic.Rep/index.js";
import * as Data_HeytingAlgebra from "../Data.HeytingAlgebra/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Ring from "../Data.Ring/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Semiring from "../Data.Semiring/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
var Tuple = /* #__PURE__ */ (function () {
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    return Tuple;
})();
var uncurry = function (f) {
    return function (v) {
        return f(v.value0)(v.value1);
    };
};
var swap = function (v) {
    return new Tuple(v.value1, v.value0);
};
var snd = function (v) {
    return v.value1;
};
var showTuple = function (dictShow) {
    var show = Data_Show.show(dictShow);
    return function (dictShow1) {
        var show1 = Data_Show.show(dictShow1);
        return {
            show: function (v) {
                return "(Tuple " + (show(v.value0) + (" " + (show1(v.value1) + ")")));
            }
        };
    };
};
var semiringTuple = function (dictSemiring) {
    var add = Data_Semiring.add(dictSemiring);
    var one = Data_Semiring.one(dictSemiring);
    var mul = Data_Semiring.mul(dictSemiring);
    var zero = Data_Semiring.zero(dictSemiring);
    return function (dictSemiring1) {
        var add1 = Data_Semiring.add(dictSemiring1);
        var mul1 = Data_Semiring.mul(dictSemiring1);
        return {
            add: function (v) {
                return function (v1) {
                    return new Tuple(add(v.value0)(v1.value0), add1(v.value1)(v1.value1));
                };
            },
            one: new Tuple(one, Data_Semiring.one(dictSemiring1)),
            mul: function (v) {
                return function (v1) {
                    return new Tuple(mul(v.value0)(v1.value0), mul1(v.value1)(v1.value1));
                };
            },
            zero: new Tuple(zero, Data_Semiring.zero(dictSemiring1))
        };
    };
};
var semigroupoidTuple = {
    compose: function (v) {
        return function (v1) {
            return new Tuple(v1.value0, v.value1);
        };
    }
};
var semigroupTuple = function (dictSemigroup) {
    var append1 = Data_Semigroup.append(dictSemigroup);
    return function (dictSemigroup1) {
        var append2 = Data_Semigroup.append(dictSemigroup1);
        return {
            append: function (v) {
                return function (v1) {
                    return new Tuple(append1(v.value0)(v1.value0), append2(v.value1)(v1.value1));
                };
            }
        };
    };
};
var ringTuple = function (dictRing) {
    var sub = Data_Ring.sub(dictRing);
    var semiringTuple1 = semiringTuple(dictRing.Semiring0());
    return function (dictRing1) {
        var sub1 = Data_Ring.sub(dictRing1);
        var semiringTuple2 = semiringTuple1(dictRing1.Semiring0());
        return {
            sub: function (v) {
                return function (v1) {
                    return new Tuple(sub(v.value0)(v1.value0), sub1(v.value1)(v1.value1));
                };
            },
            Semiring0: function () {
                return semiringTuple2;
            }
        };
    };
};
var monoidTuple = function (dictMonoid) {
    var mempty = Data_Monoid.mempty(dictMonoid);
    var semigroupTuple1 = semigroupTuple(dictMonoid.Semigroup0());
    return function (dictMonoid1) {
        var semigroupTuple2 = semigroupTuple1(dictMonoid1.Semigroup0());
        return {
            mempty: new Tuple(mempty, Data_Monoid.mempty(dictMonoid1)),
            Semigroup0: function () {
                return semigroupTuple2;
            }
        };
    };
};
var heytingAlgebraTuple = function (dictHeytingAlgebra) {
    var tt = Data_HeytingAlgebra.tt(dictHeytingAlgebra);
    var ff = Data_HeytingAlgebra.ff(dictHeytingAlgebra);
    var implies = Data_HeytingAlgebra.implies(dictHeytingAlgebra);
    var conj1 = Data_HeytingAlgebra.conj(dictHeytingAlgebra);
    var disj = Data_HeytingAlgebra.disj(dictHeytingAlgebra);
    var not = Data_HeytingAlgebra.not(dictHeytingAlgebra);
    return function (dictHeytingAlgebra1) {
        var implies1 = Data_HeytingAlgebra.implies(dictHeytingAlgebra1);
        var conj2 = Data_HeytingAlgebra.conj(dictHeytingAlgebra1);
        var disj1 = Data_HeytingAlgebra.disj(dictHeytingAlgebra1);
        var not1 = Data_HeytingAlgebra.not(dictHeytingAlgebra1);
        return {
            tt: new Tuple(tt, Data_HeytingAlgebra.tt(dictHeytingAlgebra1)),
            ff: new Tuple(ff, Data_HeytingAlgebra.ff(dictHeytingAlgebra1)),
            implies: function (v) {
                return function (v1) {
                    return new Tuple(implies(v.value0)(v1.value0), implies1(v.value1)(v1.value1));
                };
            },
            conj: function (v) {
                return function (v1) {
                    return new Tuple(conj1(v.value0)(v1.value0), conj2(v.value1)(v1.value1));
                };
            },
            disj: function (v) {
                return function (v1) {
                    return new Tuple(disj(v.value0)(v1.value0), disj1(v.value1)(v1.value1));
                };
            },
            not: function (v) {
                return new Tuple(not(v.value0), not1(v.value1));
            }
        };
    };
};
var genericTuple = {
    to: function (x) {
        return new Tuple(x.value0, x.value1);
    },
    from: function (x) {
        return new Data_Generic_Rep.Product(x.value0, x.value1);
    }
};
var functorTuple = {
    map: function (f) {
        return function (m) {
            return new Tuple(m.value0, f(m.value1));
        };
    }
};
var invariantTuple = {
    imap: /* #__PURE__ */ Data_Functor_Invariant.imapF(functorTuple)
};
var fst = function (v) {
    return v.value0;
};
var lazyTuple = function (dictLazy) {
    var defer = Control_Lazy.defer(dictLazy);
    return function (dictLazy1) {
        var defer1 = Control_Lazy.defer(dictLazy1);
        return {
            defer: function (f) {
                return new Tuple(defer(function (v) {
                    return fst(f(Data_Unit.unit));
                }), defer1(function (v) {
                    return snd(f(Data_Unit.unit));
                }));
            }
        };
    };
};
var extendTuple = {
    extend: function (f) {
        return function (v) {
            return new Tuple(v.value0, f(v));
        };
    },
    Functor0: function () {
        return functorTuple;
    }
};
var eqTuple = function (dictEq) {
    var eq = Data_Eq.eq(dictEq);
    return function (dictEq1) {
        var eq1 = Data_Eq.eq(dictEq1);
        return {
            eq: function (x) {
                return function (y) {
                    return eq(x.value0)(y.value0) && eq1(x.value1)(y.value1);
                };
            }
        };
    };
};
var ordTuple = function (dictOrd) {
    var compare = Data_Ord.compare(dictOrd);
    var eqTuple1 = eqTuple(dictOrd.Eq0());
    return function (dictOrd1) {
        var compare1 = Data_Ord.compare(dictOrd1);
        var eqTuple2 = eqTuple1(dictOrd1.Eq0());
        return {
            compare: function (x) {
                return function (y) {
                    var v = compare(x.value0)(y.value0);
                    if (v instanceof Data_Ordering.LT) {
                        return Data_Ordering.LT.value;
                    };
                    if (v instanceof Data_Ordering.GT) {
                        return Data_Ordering.GT.value;
                    };
                    return compare1(x.value1)(y.value1);
                };
            },
            Eq0: function () {
                return eqTuple2;
            }
        };
    };
};
var eq1Tuple = function (dictEq) {
    var eqTuple1 = eqTuple(dictEq);
    return {
        eq1: function (dictEq1) {
            return Data_Eq.eq(eqTuple1(dictEq1));
        }
    };
};
var ord1Tuple = function (dictOrd) {
    var ordTuple1 = ordTuple(dictOrd);
    var eq1Tuple1 = eq1Tuple(dictOrd.Eq0());
    return {
        compare1: function (dictOrd1) {
            return Data_Ord.compare(ordTuple1(dictOrd1));
        },
        Eq10: function () {
            return eq1Tuple1;
        }
    };
};
var curry = function (f) {
    return function (a) {
        return function (b) {
            return f(new Tuple(a, b));
        };
    };
};
var comonadTuple = {
    extract: snd,
    Extend0: function () {
        return extendTuple;
    }
};
var commutativeRingTuple = function (dictCommutativeRing) {
    var ringTuple1 = ringTuple(dictCommutativeRing.Ring0());
    return function (dictCommutativeRing1) {
        var ringTuple2 = ringTuple1(dictCommutativeRing1.Ring0());
        return {
            Ring0: function () {
                return ringTuple2;
            }
        };
    };
};
var boundedTuple = function (dictBounded) {
    var top = Data_Bounded.top(dictBounded);
    var bottom = Data_Bounded.bottom(dictBounded);
    var ordTuple1 = ordTuple(dictBounded.Ord0());
    return function (dictBounded1) {
        var ordTuple2 = ordTuple1(dictBounded1.Ord0());
        return {
            top: new Tuple(top, Data_Bounded.top(dictBounded1)),
            bottom: new Tuple(bottom, Data_Bounded.bottom(dictBounded1)),
            Ord0: function () {
                return ordTuple2;
            }
        };
    };
};
var booleanAlgebraTuple = function (dictBooleanAlgebra) {
    var heytingAlgebraTuple1 = heytingAlgebraTuple(dictBooleanAlgebra.HeytingAlgebra0());
    return function (dictBooleanAlgebra1) {
        var heytingAlgebraTuple2 = heytingAlgebraTuple1(dictBooleanAlgebra1.HeytingAlgebra0());
        return {
            HeytingAlgebra0: function () {
                return heytingAlgebraTuple2;
            }
        };
    };
};
var applyTuple = function (dictSemigroup) {
    var append1 = Data_Semigroup.append(dictSemigroup);
    return {
        apply: function (v) {
            return function (v1) {
                return new Tuple(append1(v.value0)(v1.value0), v.value1(v1.value1));
            };
        },
        Functor0: function () {
            return functorTuple;
        }
    };
};
var bindTuple = function (dictSemigroup) {
    var append1 = Data_Semigroup.append(dictSemigroup);
    var applyTuple1 = applyTuple(dictSemigroup);
    return {
        bind: function (v) {
            return function (f) {
                var v1 = f(v.value1);
                return new Tuple(append1(v.value0)(v1.value0), v1.value1);
            };
        },
        Apply0: function () {
            return applyTuple1;
        }
    };
};
var applicativeTuple = function (dictMonoid) {
    var applyTuple1 = applyTuple(dictMonoid.Semigroup0());
    return {
        pure: Tuple.create(Data_Monoid.mempty(dictMonoid)),
        Apply0: function () {
            return applyTuple1;
        }
    };
};
var monadTuple = function (dictMonoid) {
    var applicativeTuple1 = applicativeTuple(dictMonoid);
    var bindTuple1 = bindTuple(dictMonoid.Semigroup0());
    return {
        Applicative0: function () {
            return applicativeTuple1;
        },
        Bind1: function () {
            return bindTuple1;
        }
    };
};
export {
    Tuple,
    fst,
    snd,
    curry,
    uncurry,
    swap,
    showTuple,
    eqTuple,
    eq1Tuple,
    ordTuple,
    ord1Tuple,
    boundedTuple,
    semigroupoidTuple,
    semigroupTuple,
    monoidTuple,
    semiringTuple,
    ringTuple,
    commutativeRingTuple,
    heytingAlgebraTuple,
    booleanAlgebraTuple,
    functorTuple,
    genericTuple,
    invariantTuple,
    applyTuple,
    applicativeTuple,
    bindTuple,
    monadTuple,
    extendTuple,
    comonadTuple,
    lazyTuple
};
//# sourceMappingURL=index.js.map
