// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Node_Library_Execa from "../Node.Library.Execa/index.js";
import * as Partial_Unsafe from "../Partial.Unsafe/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff);
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect_Aff.applicativeAff);
var when = /* #__PURE__ */ Control_Applicative.when(Effect_Aff.applicativeAff);
var liftAff = /* #__PURE__ */ Effect_Aff_Class.liftAff(Effect_Aff_Class.monadAffAff);
var $$void = /* #__PURE__ */ Data_Functor["void"](Effect_Aff.functorAff);
var show = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Show.showRecord()()(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "command";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "escapedCommand";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "exitCode";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "stderr";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil({
    reflectSymbol: function () {
        return "stdout";
    }
})(Data_Show.showString))(Data_Show.showString))(Data_Show.showInt))(Data_Show.showString))(Data_Show.showString)));
var StdinPipeParent = /* #__PURE__ */ (function () {
    function StdinPipeParent() {

    };
    StdinPipeParent.value = new StdinPipeParent();
    return StdinPipeParent;
})();
var StdinNewPipe = /* #__PURE__ */ (function () {
    function StdinNewPipe() {

    };
    StdinNewPipe.value = new StdinNewPipe();
    return StdinNewPipe;
})();
var StdinWrite = /* #__PURE__ */ (function () {
    function StdinWrite(value0) {
        this.value0 = value0;
    };
    StdinWrite.create = function (value0) {
        return new StdinWrite(value0);
    };
    return StdinWrite;
})();
var spawn = function (dictMonadAff) {
    var liftAff1 = Effect_Aff_Class.liftAff(dictMonadAff);
    return function (cmd) {
        return function (args) {
            return function (opts) {
                return liftAff1(bind(Node_Library_Execa.execa(cmd)(args)(function (v) {
                    return {
                        cleanup: v.cleanup,
                        preferLocal: v.preferLocal,
                        stripFinalNewline: v.stripFinalNewline,
                        extendEnv: v.extendEnv,
                        cwd: opts.cwd,
                        env: v.env,
                        encoding: v.encoding,
                        argv0: v.argv0,
                        stdioExtra: v.stdioExtra,
                        detached: v.detached,
                        uid: v.uid,
                        gid: v.gid,
                        shell: v.shell,
                        timeout: v.timeout,
                        maxBuffer: v.maxBuffer,
                        windowsVerbatimArguments: v.windowsVerbatimArguments,
                        windowsHide: v.windowsHide,
                        windowsEnableCmdEcho: v.windowsEnableCmdEcho
                    };
                }))(function (subprocess) {
                    return discard((function () {
                        if (opts.pipeStdin instanceof StdinPipeParent) {
                            return subprocess.stdin.shareParentProcessStdin;
                        };
                        if (opts.pipeStdin instanceof StdinWrite) {
                            return subprocess.stdin.writeUtf8End(opts.pipeStdin.value0);
                        };
                        return pure(Data_Unit.unit);
                    })())(function () {
                        return discard(when(opts.pipeStderr)(subprocess.stderr.pipeToParentStderr))(function () {
                            return discard(when(opts.pipeStdout)(subprocess.stdout.pipeToParentStdout))(function () {
                                return pure(subprocess);
                            });
                        });
                    });
                }));
            };
        };
    };
};
var spawn1 = /* #__PURE__ */ spawn(Effect_Aff_Class.monadAffAff);
var kill = function (cp) {
    return liftAff(discard($$void(cp.killForced(2000.0)))(function () {
        return bind(cp.result)(function (v) {
            if (v instanceof Data_Either.Left) {
                return pure(v.value0);
            };
            if (v instanceof Data_Either.Right) {
                return Partial_Unsafe.unsafeCrashWith("Tried to kill the process, failed. Result: " + show(v.value0));
            };
            throw new Error("Failed pattern match at Spago.Cmd (line 63, column 17 - line 65, column 93): " + [ v.constructor.name ]);
        });
    }));
};
var joinProcess = function (dictMonadAff) {
    var liftAff1 = Effect_Aff_Class.liftAff(dictMonadAff);
    return function (cp) {
        return liftAff1(cp.result);
    };
};
var findFlag = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        var words = Data_String_Common.split(" ");
        var splitOnEqual = Data_String_Common.split("=");
        var isFlag = function (word) {
            return Data_Maybe.isJust(Data_Array.find(function (v1) {
                return v1 === word;
            })(v.flags));
        };
        var hasFlag = function (a) {
            var firstWord = Data_Maybe.fromMaybe("")((function () {
                var v1 = Data_Array.uncons(words(a));
                if (v1 instanceof Data_Maybe.Just) {
                    if (v1.value0.tail.length === 0) {
                        var v2 = Data_Array.uncons(splitOnEqual(v1.value0.head));
                        if (v2 instanceof Data_Maybe.Just) {
                            return new Data_Maybe.Just(v2.value0.head);
                        };
                        return Data_Maybe.Nothing.value;
                    };
                    return new Data_Maybe.Just(v1.value0.head);
                };
                return Data_Maybe.Nothing.value;
            })());
            return Data_Maybe.isJust(Data_Array.find(function (v1) {
                return v1 === firstWord;
            })(v.flags));
        };
        var v1 = Data_Array.uncons(v.args);
        if (v1 instanceof Data_Maybe.Just) {
            var $65 = isFlag(v1.value0.head);
            if ($65) {
                var v2 = Data_Array.uncons(v1.value0.tail);
                if (v2 instanceof Data_Maybe.Just) {
                    $tco_done = true;
                    return new Data_Maybe.Just(v2.value0.head);
                };
                $tco_done = true;
                return Data_Maybe.Nothing.value;
            };
            var $69 = hasFlag(v1.value0.head);
            if ($69) {
                var v2 = words(v1.value0.head);
                if (v2.length === 1) {
                    var v3 = splitOnEqual(v2[0]);
                    if (v3.length === 2) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v3[1]);
                    };
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v2.length === 3) {
                    $tco_done = true;
                    return new Data_Maybe.Just(v2[1]);
                };
                $tco_done = true;
                return Data_Maybe.Nothing.value;
            };
            $copy_v = {
                flags: v.flags,
                args: v1.value0.tail
            };
            return;
        };
        $tco_done = true;
        return Data_Maybe.Nothing.value;
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var exec = function (dictMonadAff) {
    var liftAff1 = Effect_Aff_Class.liftAff(dictMonadAff);
    return function (cmd) {
        return function (args) {
            return function (opts) {
                return liftAff1(bind(spawn1(cmd)(args)(opts))(function (subprocess) {
                    return subprocess.result;
                }));
            };
        };
    };
};
var defaultExecOptions = /* #__PURE__ */ (function () {
    return {
        pipeStdin: StdinNewPipe.value,
        pipeStdout: true,
        pipeStderr: true,
        cwd: Data_Maybe.Nothing.value
    };
})();
export {
    StdinPipeParent,
    StdinNewPipe,
    StdinWrite,
    defaultExecOptions,
    spawn,
    joinProcess,
    exec,
    kill,
    findFlag
};
//# sourceMappingURL=index.js.map
