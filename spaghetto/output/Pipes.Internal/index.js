// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Control_Monad_Rec_Class from "../Control.Monad.Rec.Class/index.js";
import * as Control_Monad_State_Class from "../Control.Monad.State.Class/index.js";
import * as Control_Monad_Trans_Class from "../Control.Monad.Trans.Class/index.js";
import * as Control_Monad_Writer_Class from "../Control.Monad.Writer.Class/index.js";
import * as Control_Plus from "../Control.Plus/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
var bind1 = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(Effect_Aff.applicativeAff);
var X = function (x) {
    return x;
};
var Request = /* #__PURE__ */ (function () {
    function Request(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Request.create = function (value0) {
        return function (value1) {
            return new Request(value0, value1);
        };
    };
    return Request;
})();
var Respond = /* #__PURE__ */ (function () {
    function Respond(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Respond.create = function (value0) {
        return function (value1) {
            return new Respond(value0, value1);
        };
    };
    return Respond;
})();
var M = /* #__PURE__ */ (function () {
    function M(value0) {
        this.value0 = value0;
    };
    M.create = function (value0) {
        return new M(value0);
    };
    return M;
})();
var Pure = /* #__PURE__ */ (function () {
    function Pure(value0) {
        this.value0 = value0;
    };
    Pure.create = function (value0) {
        return new Pure(value0);
    };
    return Pure;
})();
var observe = function (dictMonad) {
    var pure2 = Control_Applicative.pure(dictMonad.Applicative0());
    var bind2 = Control_Bind.bind(dictMonad.Bind1());
    return function (p0) {
        var go = function (p) {
            if (p instanceof Request) {
                return pure2(new Request(p.value0, (function () {
                    var $270 = observe(dictMonad);
                    return function ($271) {
                        return $270(p.value1($271));
                    };
                })()));
            };
            if (p instanceof Respond) {
                return pure2(new Respond(p.value0, (function () {
                    var $272 = observe(dictMonad);
                    return function ($273) {
                        return $272(p.value1($273));
                    };
                })()));
            };
            if (p instanceof M) {
                return bind2(p.value0)(go);
            };
            if (p instanceof Pure) {
                return pure2(new Pure(p.value0));
            };
            throw new Error("Failed pattern match at Pipes.Internal (line 173, column 12 - line 177, column 40): " + [ p.constructor.name ]);
        };
        return new M(go(p0));
    };
};
var proxyMFunctor = {
    hoist: function (dictMonad) {
        var bind2 = Control_Bind.bind(dictMonad.Bind1());
        var pure2 = Control_Applicative.pure(dictMonad.Applicative0());
        var observe1 = observe(dictMonad);
        return function (nat) {
            return function (p0) {
                var go = function (p) {
                    if (p instanceof Request) {
                        return new Request(p.value0, function (x) {
                            return go(p.value1(x));
                        });
                    };
                    if (p instanceof Respond) {
                        return new Respond(p.value0, function (x) {
                            return go(p.value1(x));
                        });
                    };
                    if (p instanceof M) {
                        return new M(nat(bind2(p.value0)(function (p$prime) {
                            return pure2(go(p$prime));
                        })));
                    };
                    if (p instanceof Pure) {
                        return new Pure(p.value0);
                    };
                    throw new Error("Failed pattern match at Pipes.Internal (line 72, column 16 - line 76, column 37): " + [ p.constructor.name ]);
                };
                return go(observe1(p0));
            };
        };
    }
};
var monadTransProxy = {
    lift: function (dictMonad) {
        var map = Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0());
        return function (m) {
            return new M(map(Pure.create)(m));
        };
    }
};
var lift = /* #__PURE__ */ Control_Monad_Trans_Class.lift(monadTransProxy);
var functorProxy = function (dictMonad) {
    var bind2 = Control_Bind.bind(dictMonad.Bind1());
    var pure2 = Control_Applicative.pure(dictMonad.Applicative0());
    return {
        map: function (f) {
            return function (p0) {
                var go = function (p) {
                    if (p instanceof Request) {
                        return new Request(p.value0, function (x) {
                            return go(p.value1(x));
                        });
                    };
                    if (p instanceof Respond) {
                        return new Respond(p.value0, function (x) {
                            return go(p.value1(x));
                        });
                    };
                    if (p instanceof M) {
                        return new M(bind2(p.value0)(function (v) {
                            return pure2(go(v));
                        }));
                    };
                    if (p instanceof Pure) {
                        return new Pure(f(p.value0));
                    };
                    throw new Error("Failed pattern match at Pipes.Internal (line 28, column 12 - line 32, column 41): " + [ p.constructor.name ]);
                };
                return go(p0);
            };
        }
    };
};
var proxyAlt = function (dictMonadPlus) {
    var Alternative1 = dictMonadPlus.Alternative1();
    var alt = Control_Alt.alt((Alternative1.Plus1()).Alt0());
    var Monad0 = dictMonadPlus.Monad0();
    var bind2 = Control_Bind.bind(Monad0.Bind1());
    var pure2 = Control_Applicative.pure(Alternative1.Applicative0());
    var functorProxy1 = functorProxy(Monad0);
    return {
        alt: function (v) {
            return function (v1) {
                if (v instanceof Request) {
                    return new Request(v.value0, function (a) {
                        return Control_Alt.alt(proxyAlt(dictMonadPlus))(v.value1(a))(v1);
                    });
                };
                if (v instanceof Respond) {
                    return new Respond(v.value0, function (b$prime) {
                        return Control_Alt.alt(proxyAlt(dictMonadPlus))(v.value1(b$prime))(v1);
                    });
                };
                if (v instanceof Pure) {
                    return new Pure(v.value0);
                };
                if (v instanceof M) {
                    return new M(alt(bind2(v.value0)(function (p$prime) {
                        return pure2(Control_Alt.alt(proxyAlt(dictMonadPlus))(p$prime)(v1));
                    }))(pure2(v1)));
                };
                throw new Error("Failed pattern match at Pipes.Internal (line 132, column 1 - line 138, column 63): " + [ v.constructor.name, v1.constructor.name ]);
            };
        },
        Functor0: function () {
            return functorProxy1;
        }
    };
};
var proxyPlus = function (dictMonadPlus) {
    var proxyAlt1 = proxyAlt(dictMonadPlus);
    return {
        empty: lift(dictMonadPlus.Monad0())(Control_Plus.empty((dictMonadPlus.Alternative1()).Plus1())),
        Alt0: function () {
            return proxyAlt1;
        }
    };
};
var semigroupProxy = function (dictMonad) {
    var bind2 = Control_Bind.bind(dictMonad.Bind1());
    var pure2 = Control_Applicative.pure(dictMonad.Applicative0());
    var map = Data_Functor.map(functorProxy(dictMonad));
    return function (dictSemigroup) {
        var append = Data_Semigroup.append(dictSemigroup);
        return {
            append: function (p1) {
                return function (p2) {
                    var go = function (p) {
                        if (p instanceof Request) {
                            return new Request(p.value0, function (x) {
                                return go(p.value1(x));
                            });
                        };
                        if (p instanceof Respond) {
                            return new Respond(p.value0, function (x) {
                                return go(p.value1(x));
                            });
                        };
                        if (p instanceof M) {
                            return new M(bind2(p.value0)(function (v) {
                                return pure2(go(v));
                            }));
                        };
                        if (p instanceof Pure) {
                            return map(function (v) {
                                return append(p.value0)(v);
                            })(p2);
                        };
                        throw new Error("Failed pattern match at Pipes.Internal (line 60, column 12 - line 64, column 41): " + [ p.constructor.name ]);
                    };
                    return go(p1);
                };
            }
        };
    };
};
var monoidProxy = function (dictMonad) {
    var semigroupProxy1 = semigroupProxy(dictMonad);
    return function (dictMonoid) {
        var semigroupProxy2 = semigroupProxy1(dictMonoid.Semigroup0());
        return {
            mempty: new Pure(Data_Monoid.mempty(dictMonoid)),
            Semigroup0: function () {
                return semigroupProxy2;
            }
        };
    };
};
var closed = function ($copy_v) {
    var $tco_result;
    function $tco_loop(v) {
        $copy_v = v;
        return;
    };
    while (!false) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var applyProxy = function (dictMonad) {
    var bind2 = Control_Bind.bind(dictMonad.Bind1());
    var pure2 = Control_Applicative.pure(dictMonad.Applicative0());
    var functorProxy1 = functorProxy(dictMonad);
    var map = Data_Functor.map(functorProxy1);
    return {
        apply: function (pf0) {
            return function (px) {
                var go = function (pf) {
                    if (pf instanceof Request) {
                        return new Request(pf.value0, function (x) {
                            return go(pf.value1(x));
                        });
                    };
                    if (pf instanceof Respond) {
                        return new Respond(pf.value0, function (x) {
                            return go(pf.value1(x));
                        });
                    };
                    if (pf instanceof M) {
                        return new M(bind2(pf.value0)(function (v) {
                            return pure2(go(v));
                        }));
                    };
                    if (pf instanceof Pure) {
                        return map(pf.value0)(px);
                    };
                    throw new Error("Failed pattern match at Pipes.Internal (line 36, column 13 - line 40, column 33): " + [ pf.constructor.name ]);
                };
                return go(pf0);
            };
        },
        Functor0: function () {
            return functorProxy1;
        }
    };
};
var bindProxy = function (dictMonad) {
    var bind2 = Control_Bind.bind(dictMonad.Bind1());
    var pure2 = Control_Applicative.pure(dictMonad.Applicative0());
    var applyProxy1 = applyProxy(dictMonad);
    return {
        bind: function (p0) {
            return function (f) {
                var go = function (p) {
                    if (p instanceof Request) {
                        return new Request(p.value0, function (x) {
                            return go(p.value1(x));
                        });
                    };
                    if (p instanceof Respond) {
                        return new Respond(p.value0, function (x) {
                            return go(p.value1(x));
                        });
                    };
                    if (p instanceof M) {
                        return new M(bind2(p.value0)(function (v) {
                            return pure2(go(v));
                        }));
                    };
                    if (p instanceof Pure) {
                        return f(p.value0);
                    };
                    throw new Error("Failed pattern match at Pipes.Internal (line 47, column 12 - line 51, column 28): " + [ p.constructor.name ]);
                };
                return go(p0);
            };
        },
        Apply0: function () {
            return applyProxy1;
        }
    };
};
var proxyMMonad = {
    embed: function (dictMonad) {
        var bind2 = Control_Bind.bind(bindProxy(dictMonad));
        return function (f) {
            var go = function (p) {
                if (p instanceof Request) {
                    return new Request(p.value0, function (x) {
                        return go(p.value1(x));
                    });
                };
                if (p instanceof Respond) {
                    return new Respond(p.value0, function (x) {
                        return go(p.value1(x));
                    });
                };
                if (p instanceof M) {
                    return bind2(f(p.value0))(go);
                };
                if (p instanceof Pure) {
                    return new Pure(p.value0);
                };
                throw new Error("Failed pattern match at Pipes.Internal (line 81, column 16 - line 85, column 37): " + [ p.constructor.name ]);
            };
            return go;
        };
    },
    MFunctor0: function () {
        return proxyMFunctor;
    },
    MonadTrans1: function () {
        return monadTransProxy;
    }
};
var applicativeProxy = function (dictMonad) {
    var applyProxy1 = applyProxy(dictMonad);
    return {
        pure: Pure.create,
        Apply0: function () {
            return applyProxy1;
        }
    };
};
var monadProxy = function (dictMonad) {
    var applicativeProxy1 = applicativeProxy(dictMonad);
    var bindProxy1 = bindProxy(dictMonad);
    return {
        Applicative0: function () {
            return applicativeProxy1;
        },
        Bind1: function () {
            return bindProxy1;
        }
    };
};
var monadRecProxy = function (dictMonad) {
    var bind2 = Control_Bind.bind(dictMonad.Bind1());
    var pure2 = Control_Applicative.pure(dictMonad.Applicative0());
    var monadProxy1 = monadProxy(dictMonad);
    return {
        tailRecM: function (f) {
            return function (a0) {
                var go = function (v) {
                    if (v instanceof Pure && v.value0 instanceof Control_Monad_Rec_Class.Loop) {
                        return go(f(v.value0.value0));
                    };
                    if (v instanceof Pure && v.value0 instanceof Control_Monad_Rec_Class.Done) {
                        return new Pure(v.value0.value0);
                    };
                    if (v instanceof M) {
                        return new M(bind2(v.value0)(function (v1) {
                            return pure2(go(v1));
                        }));
                    };
                    if (v instanceof Request) {
                        return new Request(v.value0, function (x) {
                            return go(v.value1(x));
                        });
                    };
                    if (v instanceof Respond) {
                        return new Respond(v.value0, function (x) {
                            return go(v.value1(x));
                        });
                    };
                    throw new Error("Failed pattern match at Pipes.Internal (line 163, column 10 - line 168, column 52): " + [ v.constructor.name ]);
                };
                return go(f(a0));
            };
        },
        Monad0: function () {
            return monadProxy1;
        }
    };
};
var proxyMonadAsk = function (dictMonadAsk) {
    var Monad0 = dictMonadAsk.Monad0();
    var monadProxy1 = monadProxy(Monad0);
    return {
        ask: lift(Monad0)(Control_Monad_Reader_Class.ask(dictMonadAsk)),
        Monad0: function () {
            return monadProxy1;
        }
    };
};
var proxyMonadReader = function (dictMonadReader) {
    var MonadAsk0 = dictMonadReader.MonadAsk0();
    var Monad0 = MonadAsk0.Monad0();
    var bind2 = Control_Bind.bind(Monad0.Bind1());
    var local = Control_Monad_Reader_Class.local(dictMonadReader);
    var pure2 = Control_Applicative.pure(Monad0.Applicative0());
    var proxyMonadAsk1 = proxyMonadAsk(MonadAsk0);
    return {
        local: function (f) {
            var go = function (p) {
                if (p instanceof Request) {
                    return new Request(p.value0, function (a) {
                        return go(p.value1(a));
                    });
                };
                if (p instanceof Respond) {
                    return new Respond(p.value0, function (b$prime) {
                        return go(p.value1(b$prime));
                    });
                };
                if (p instanceof Pure) {
                    return new Pure(p.value0);
                };
                if (p instanceof M) {
                    return new M(bind2(local(f)(p.value0))(function (r) {
                        return pure2(go(r));
                    }));
                };
                throw new Error("Failed pattern match at Pipes.Internal (line 99, column 18 - line 103, column 68): " + [ p.constructor.name ]);
            };
            return go;
        },
        MonadAsk0: function () {
            return proxyMonadAsk1;
        }
    };
};
var proxyMonadEffect = function (dictMonadEffect) {
    var liftEffect = Effect_Class.liftEffect(dictMonadEffect);
    var monadProxy1 = monadProxy(dictMonadEffect.Monad0());
    return {
        liftEffect: function (m) {
            return new M(liftEffect(function __do() {
                var r = m();
                return new Pure(r);
            }));
        },
        Monad0: function () {
            return monadProxy1;
        }
    };
};
var proxyMonadAff = function (dictMonadAff) {
    var liftAff = Effect_Aff_Class.liftAff(dictMonadAff);
    var proxyMonadEffect1 = proxyMonadEffect(dictMonadAff.MonadEffect0());
    return {
        liftAff: function (m) {
            return new M(liftAff(bind1(m)(function (r) {
                return pure1(new Pure(r));
            })));
        },
        MonadEffect0: function () {
            return proxyMonadEffect1;
        }
    };
};
var proxyMonadState = function (dictMonadState) {
    var Monad0 = dictMonadState.Monad0();
    var monadProxy1 = monadProxy(Monad0);
    return {
        state: (function () {
            var $274 = lift(Monad0);
            var $275 = Control_Monad_State_Class.state(dictMonadState);
            return function ($276) {
                return $274($275($276));
            };
        })(),
        Monad0: function () {
            return monadProxy1;
        }
    };
};
var proxyMonadTell = function (dictMonoid) {
    return function (dictMonadTell) {
        var Monad1 = dictMonadTell.Monad1();
        var Semigroup0 = dictMonadTell.Semigroup0();
        var monadProxy1 = monadProxy(Monad1);
        return {
            tell: (function () {
                var $277 = lift(Monad1);
                var $278 = Control_Monad_Writer_Class.tell(dictMonadTell);
                return function ($279) {
                    return $277($278($279));
                };
            })(),
            Semigroup0: function () {
                return Semigroup0;
            },
            Monad1: function () {
                return monadProxy1;
            }
        };
    };
};
var proxyMonadWriter = function (dictMonoid) {
    return function (dictMonadWriter) {
        var MonadTell1 = dictMonadWriter.MonadTell1();
        var Monad1 = MonadTell1.Monad1();
        var bind2 = Control_Bind.bind(Monad1.Bind1());
        var listen = Control_Monad_Writer_Class.listen(dictMonadWriter);
        var pure2 = Control_Applicative.pure(Monad1.Applicative0());
        var append = Data_Semigroup.append(MonadTell1.Semigroup0());
        var Monoid0 = dictMonadWriter.Monoid0();
        var mempty = Data_Monoid.mempty(Monoid0);
        var pass = Control_Monad_Writer_Class.pass(dictMonadWriter);
        var proxyMonadTell1 = proxyMonadTell(Monoid0)(MonadTell1);
        return {
            listen: function (p0) {
                var go = function (p) {
                    return function (w) {
                        if (p instanceof Request) {
                            return new Request(p.value0, function (a) {
                                return go(p.value1(a))(w);
                            });
                        };
                        if (p instanceof Respond) {
                            return new Respond(p.value0, function (b$prime) {
                                return go(p.value1(b$prime))(w);
                            });
                        };
                        if (p instanceof Pure) {
                            return new Pure(new Data_Tuple.Tuple(p.value0, w));
                        };
                        if (p instanceof M) {
                            return new M(bind2(listen(p.value0))(function (v) {
                                return pure2(go(v.value0)(append(w)(v.value1)));
                            }));
                        };
                        throw new Error("Failed pattern match at Pipes.Internal (line 114, column 18 - line 120, column 60): " + [ p.constructor.name ]);
                    };
                };
                return go(p0)(mempty);
            },
            pass: function (p0) {
                var go = function (p) {
                    return function (w) {
                        if (p instanceof Request) {
                            return new Request(p.value0, function (a) {
                                return go(p.value1(a))(w);
                            });
                        };
                        if (p instanceof Respond) {
                            return new Respond(p.value0, function (b$prime) {
                                return go(p.value1(b$prime))(w);
                            });
                        };
                        if (p instanceof Pure) {
                            return new M(pass(pure2(new Data_Tuple.Tuple(new Pure(p.value0.value0), function (v) {
                                return p.value0.value1(w);
                            }))));
                        };
                        if (p instanceof M) {
                            return new M(bind2(listen(p.value0))(function (v) {
                                return pure2(go(v.value0)(append(w)(v.value1)));
                            }));
                        };
                        throw new Error("Failed pattern match at Pipes.Internal (line 124, column 18 - line 130, column 64): " + [ p.constructor.name ]);
                    };
                };
                return go(p0)(mempty);
            },
            Monoid0: function () {
                return Monoid0;
            },
            MonadTell1: function () {
                return proxyMonadTell1;
            }
        };
    };
};
var proxyMonadThrow = function (dictMonadThrow) {
    var Monad0 = dictMonadThrow.Monad0();
    var monadProxy1 = monadProxy(Monad0);
    return {
        throwError: (function () {
            var $280 = lift(Monad0);
            var $281 = Control_Monad_Error_Class.throwError(dictMonadThrow);
            return function ($282) {
                return $280($281($282));
            };
        })(),
        Monad0: function () {
            return monadProxy1;
        }
    };
};
var proxyMonadError = function (dictMonadError) {
    var catchError = Control_Monad_Error_Class.catchError(dictMonadError);
    var MonadThrow0 = dictMonadError.MonadThrow0();
    var Monad0 = MonadThrow0.Monad0();
    var bind2 = Control_Bind.bind(Monad0.Bind1());
    var pure2 = Control_Applicative.pure(Monad0.Applicative0());
    var proxyMonadThrow1 = proxyMonadThrow(MonadThrow0);
    return {
        catchError: function (v) {
            return function (v1) {
                if (v instanceof Request) {
                    return new Request(v.value0, function (a) {
                        return Control_Monad_Error_Class.catchError(proxyMonadError(dictMonadError))(v.value1(a))(v1);
                    });
                };
                if (v instanceof Respond) {
                    return new Respond(v.value0, function (b$prime) {
                        return Control_Monad_Error_Class.catchError(proxyMonadError(dictMonadError))(v.value1(b$prime))(v1);
                    });
                };
                if (v instanceof Pure) {
                    return new Pure(v.value0);
                };
                if (v instanceof M) {
                    return new M(catchError(bind2(v.value0)(function (p$prime) {
                        return pure2(Control_Monad_Error_Class.catchError(proxyMonadError(dictMonadError))(p$prime)(v1));
                    }))(function ($283) {
                        return pure2(v1($283));
                    }));
                };
                throw new Error("Failed pattern match at Pipes.Internal (line 152, column 1 - line 158, column 93): " + [ v.constructor.name, v1.constructor.name ]);
            };
        },
        MonadThrow0: function () {
            return proxyMonadThrow1;
        }
    };
};
var proxyAlternative = function (dictMonadPlus) {
    var applicativeProxy1 = applicativeProxy(dictMonadPlus.Monad0());
    var proxyPlus1 = proxyPlus(dictMonadPlus);
    return {
        Applicative0: function () {
            return applicativeProxy1;
        },
        Plus1: function () {
            return proxyPlus1;
        }
    };
};
export {
    Request,
    Respond,
    M,
    Pure,
    observe,
    X,
    closed,
    functorProxy,
    applyProxy,
    applicativeProxy,
    bindProxy,
    monadProxy,
    monoidProxy,
    semigroupProxy,
    monadTransProxy,
    proxyMFunctor,
    proxyMMonad,
    proxyMonadEffect,
    proxyMonadAff,
    proxyMonadAsk,
    proxyMonadReader,
    proxyMonadState,
    proxyMonadTell,
    proxyMonadWriter,
    proxyAlt,
    proxyPlus,
    proxyAlternative,
    proxyMonadThrow,
    proxyMonadError,
    monadRecProxy
};
//# sourceMappingURL=index.js.map
