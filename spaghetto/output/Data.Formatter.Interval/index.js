// Generated by purs version 0.15.10
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Formatter_DateTime from "../Data.Formatter.DateTime/index.js";
import * as Data_Formatter_Parser_Interval from "../Data.Formatter.Parser.Interval/index.js";
import * as Data_Formatter_Parser_Utils from "../Data.Formatter.Parser.Utils/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Interval from "../Data.Interval/index.js";
import * as Data_Interval_Duration from "../Data.Interval.Duration/index.js";
import * as Data_Interval_Duration_Iso from "../Data.Interval.Duration.Iso/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
var parseDateTime = /* #__PURE__ */ Data_Formatter_Parser_Interval.parseDateTime(Data_Identity.monadIdentity);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var show1 = /* #__PURE__ */ Data_Show.show(Data_Show.showNumber);
var mempty = /* #__PURE__ */ Data_Monoid.mempty(Data_Monoid.monoidString);
var lookup = /* #__PURE__ */ Data_Map_Internal.lookup(Data_Interval_Duration.ordDurationComponent);
var foldMap = /* #__PURE__ */ Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString);
var unformatRecurringInterval = /* #__PURE__ */ Data_Formatter_Parser_Utils.runP(/* #__PURE__ */ Data_Formatter_Parser_Interval.parseRecurringInterval(Data_Formatter_Parser_Interval.parseIsoDuration)(parseDateTime));
var unformatInterval = /* #__PURE__ */ Data_Formatter_Parser_Utils.runP(/* #__PURE__ */ Data_Formatter_Parser_Interval.parseInterval(Data_Formatter_Parser_Interval.parseIsoDuration)(parseDateTime));
var formatNumber = function (n) {
    var $18 = Data_Int.toNumber(Data_Int.floor(n)) === n;
    if ($18) {
        return show(Data_Int.floor(n));
    };
    return show1(n);
};
var formatInteger = show;
var formatDuration = function (v) {
    var timeComponentsToStr = [ new Data_Tuple.Tuple(Data_Interval_Duration.Hour.value, "H"), new Data_Tuple.Tuple(Data_Interval_Duration.Minute.value, "M"), new Data_Tuple.Tuple(Data_Interval_Duration.Second.value, "S") ];
    var ifmempty = function (v1) {
        return function (v2) {
            if (v2 === mempty) {
                return mempty;
            };
            return v1(v2);
        };
    };
    var formatComponent = function (designator) {
        return function (num) {
            return formatNumber(num) + designator;
        };
    };
    var dateComponentsToStr = [ new Data_Tuple.Tuple(Data_Interval_Duration.Year.value, "Y"), new Data_Tuple.Tuple(Data_Interval_Duration.Month.value, "M"), new Data_Tuple.Tuple(Data_Interval_Duration.Week.value, "W"), new Data_Tuple.Tuple(Data_Interval_Duration.Day.value, "D") ];
    var componentToString = function (v1) {
        return Data_Maybe.maybe("")(formatComponent(v1.value1))(lookup(v1.value0)(v));
    };
    var datePart = foldMap(componentToString)(dateComponentsToStr);
    var timePart = ifmempty(function (v1) {
        return "T" + v1;
    })(foldMap(componentToString)(timeComponentsToStr));
    return "P" + (datePart + timePart);
};
var formatIsoDuration = function ($36) {
    return formatDuration(Data_Interval_Duration_Iso.unIsoDuration($36));
};
var formatDateTime = /* #__PURE__ */ Data_Formatter_DateTime.format(Data_Formatter_Parser_Interval.extendedDateTimeFormatInUTC);
var formatInterval = function (v) {
    if (v instanceof Data_Interval.StartEnd) {
        return formatDateTime(v.value0) + ("/" + formatDateTime(v.value1));
    };
    if (v instanceof Data_Interval.DurationEnd) {
        return formatIsoDuration(v.value0) + ("/" + formatDateTime(v.value1));
    };
    if (v instanceof Data_Interval.StartDuration) {
        return formatDateTime(v.value0) + ("/" + formatIsoDuration(v.value1));
    };
    if (v instanceof Data_Interval.DurationOnly) {
        return formatIsoDuration(v.value0);
    };
    throw new Error("Failed pattern match at Data.Formatter.Interval (line 26, column 1 - line 26, column 60): " + [ v.constructor.name ]);
};
var formatRecurringInterval = function (v) {
    return "R" + (Data_Maybe.maybe("")(formatInteger)(v.value0) + ("/" + formatInterval(v.value1)));
};
export {
    unformatRecurringInterval,
    unformatInterval,
    formatRecurringInterval,
    formatInterval
};
//# sourceMappingURL=index.js.map
