{"comments":"Implementation of the `Range` data type from the registry spec. Packages\nspecify their dependencies using version ranges.\nhttps://github.com/purescript/registry-dev/blob/master/SPEC.md#range\n","declarations":[{"children":[{"comments":null,"info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Eq"],"Eq"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[46,55],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/Range.purs","start":[45,1]},"title":"<anonymous>"}],"comments":"A Registry-compliant version range of the form '>=X.Y.Z <X.Y.Z', where the\nleft-hand version is less than the right-hand version.\n","info":{"dataDeclType":"newtype","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[43,4],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/Range.purs","start":[40,1]},"title":"Range"},{"children":[],"comments":"Produce a \"caret range\" from a version.\nI.e. \"^0.15.6\" ==> \">=0.15.6 > 0.16.0\"\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Version"],"Version"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[142,26],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/Range.purs","start":[142,1]},"title":"caret"},{"children":[],"comments":"A codec for encoding and decoding a `Range` as JSON. Ranges are encoded as\nstrings of the form \">=X.Y.Z <X.Y.Z\".\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Codec","Argonaut"],"JsonCodec"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[50,25],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/Range.purs","start":[50,1]},"title":"codec"},{"children":[],"comments":"Retrieve the left-hand side of a range, ie. the 'greater than or eq' part\nof the range.\n\nGiven the range \">=1.0.0 <2.0.0\", produces the version \"1.0.0\".\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Registry","Version"],"Version"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[96,36],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/Range.purs","start":[96,1]},"title":"greaterThanOrEq"},{"children":[],"comments":"Check whether a range includes the provided version.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Version"],"Version"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[107,40],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/Range.purs","start":[107,1]},"title":"includes"},{"children":[],"comments":"Intersect two ranges, taking the maximum of the left-hand sides and the\nminimum of the right-hand sides.\n\nGiven the ranges \">=1.0.0 <3.0.0\" \">=2.0.0 <4.0.0\", an intersection will\nproduce \">=2.0.0 <3.0.0\".\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[126,43],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/Range.purs","start":[126,1]},"title":"intersect"},{"children":[],"comments":"Retrieve the right-hand side of a range, ie. the 'less than' part of the\nrange.\n\nGiven the range \">=1.0.0 <2.0.0\", produces the version \"2.0.0\".\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Registry","Version"],"Version"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[103,29],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/Range.purs","start":[103,1]},"title":"lessThan"},{"children":[],"comments":"Parse a string representing a range, ie. a string which must be of the form\n\">=X.Y.Z <X.Y.Z\" where \"X.Y.Z\" is a valid `Version`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[65,39],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/Range.purs","start":[65,1]},"title":"parse"},{"children":[],"comments":"A parser for strings that represent a `Range`. This parser will fail on\nleading or trailing spaces.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Parsing"],"Parser"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[70,30],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/Range.purs","start":[70,1]},"title":"parser"},{"children":[],"comments":"Print a range in the form \">=X.Y.Z <X.Y.Z\"\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[54,25],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/Range.purs","start":[54,1]},"title":"print"},{"children":[],"comments":"Union two ranges, taking the minimum of the left-hand sides and the maximum\nof the right-hand sides.\n\nGiven the ranges \">=1.0.0 <3.0.0\" \">=2.0.0 <4.0.0\", a union will produce\n\">=1.0.0 <4.0.0\".\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[115,33],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/Range.purs","start":[115,1]},"title":"union"},{"children":[],"comments":"Produce a range from two versions, producing Nothing if the versions\nwould not produce a valid range (ie. the lhs is not less than the rhs).\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Version"],"Version"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Version"],"Version"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Registry","Range"],"Range"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[136,40],"name":".spago/packages/registry-lib/7e1f67d1205d68d7f22d9d55d25ba2354dfbb14e/lib/src/Range.purs","start":[136,1]},"title":"mk"}],"name":"Registry.Range","reExports":[]}