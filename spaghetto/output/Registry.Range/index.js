// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Bifunctor from "../Data.Bifunctor/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as Registry_Internal_Parsing from "../Registry.Internal.Parsing/index.js";
import * as Registry_Version from "../Registry.Version/index.js";
var min = /* #__PURE__ */ Data_Ord.min(Registry_Version.ordVersion);
var max = /* #__PURE__ */ Data_Ord.max(Registry_Version.ordVersion);
var fold = /* #__PURE__ */ Data_Array.fold(Data_Monoid.monoidString);
var liftEither = /* #__PURE__ */ Control_Monad_Error_Class.liftEither(Parsing.monadThrowParseErrorParse);
var bind = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT);
var alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);
var bindFlipped = /* #__PURE__ */ Control_Bind.bindFlipped(Parsing.bindParserT);
var map = /* #__PURE__ */ Data_Functor.map(Parsing.functorParserT);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(Parsing.bindParserT);
var greaterThanOrEq1 = /* #__PURE__ */ Data_Ord.greaterThanOrEq(Registry_Version.ordVersion);
var pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);
var lessThan1 = /* #__PURE__ */ Data_Ord.lessThan(Registry_Version.ordVersion);
var Range = function (x) {
    return x;
};
var eqRange = {
    eq: /* #__PURE__ */ Data_Function.on(/* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Eq.eqArray(Registry_Version.eqVersion)))(function (v) {
        return [ v.lhs, v.rhs ];
    })
};
var union = function (v) {
    return function (v1) {
        var lhs = min(v.lhs)(v1.lhs);
        var rhs = max(v.rhs)(v1.rhs);
        return {
            lhs: lhs,
            rhs: rhs
        };
    };
};
var print = function (v) {
    return fold([ ">=", Registry_Version.print(v.lhs), " <", Registry_Version.print(v.rhs) ]);
};
var parser = /* #__PURE__ */ (function () {
    var parseVersion = function (input) {
        return liftEither(Parsing.runParser(input)(Registry_Version.parser));
    };
    return bind(alt(Parsing_String.string(">="))(Parsing.fail("Ranges must begin with >=")))(function () {
        return bind(bindFlipped(parseVersion)(map(Data_String_CodeUnits.fromCharArray)(Registry_Internal_Parsing.charsUntilSpace)))(function (lhs) {
            return bind(alt(Parsing_String["char"]("<"))(Parsing.fail("Ranges must end with <")))(function () {
                return bind(bindFlipped(parseVersion)(map(Data_String_CodeUnits.fromCharArray)(Registry_Internal_Parsing.chars)))(function (rhs) {
                    return discard(Parsing_String.eof)(function () {
                        var $39 = greaterThanOrEq1(lhs)(rhs);
                        if ($39) {
                            return Parsing.fail(fold([ "Left-hand version (", Registry_Version.print(lhs), ") must be less than right-hand version (", Registry_Version.print(rhs), ")" ]));
                        };
                        return pure({
                            lhs: lhs,
                            rhs: rhs
                        });
                    });
                });
            });
        });
    });
})();
var parse = /* #__PURE__ */ (function () {
    var $50 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Parsing.parseErrorMessage);
    var $51 = Data_Function.flip(Parsing.runParser)(parser);
    return function ($52) {
        return $50($51($52));
    };
})();
var mk = function (v) {
    return function (v1) {
        if (lessThan1(v)(v1)) {
            return new Data_Maybe.Just({
                lhs: v,
                rhs: v1
            });
        };
        return Data_Maybe.Nothing.value;
    };
};
var lessThan = function (v) {
    return v.rhs;
};
var intersect = function (v) {
    return function (v1) {
        if (greaterThanOrEq1(v.lhs)(v1.rhs) || greaterThanOrEq1(v1.lhs)(v.rhs)) {
            return Data_Maybe.Nothing.value;
        };
        if (Data_Boolean.otherwise) {
            return new Data_Maybe.Just({
                lhs: max(v.lhs)(v1.lhs),
                rhs: min(v.rhs)(v1.rhs)
            });
        };
        throw new Error("Failed pattern match at Registry.Range (line 126, column 1 - line 126, column 43): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var includes = function (v) {
    return function (version) {
        return greaterThanOrEq1(version)(v.lhs) && lessThan1(version)(v.rhs);
    };
};
var greaterThanOrEq = function (v) {
    return v.lhs;
};
var codec = /* #__PURE__ */ Data_Codec_Argonaut.prismaticCodec("Range")(function ($53) {
    return Data_Either.hush(parse($53));
})(print)(Data_Codec_Argonaut.string);
var caret = function (v) {
    return {
        lhs: v,
        rhs: Registry_Version.bumpHighest(v)
    };
};
export {
    caret,
    codec,
    greaterThanOrEq,
    includes,
    intersect,
    lessThan,
    parse,
    parser,
    print,
    union,
    mk,
    eqRange
};
//# sourceMappingURL=index.js.map
