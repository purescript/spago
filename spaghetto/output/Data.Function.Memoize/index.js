// Generated by purs version 0.15.10
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Char from "../Data.Char/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Generic_Rep from "../Data.Generic.Rep/index.js";
import * as Data_Lazy from "../Data.Lazy/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Lazy.bindLazy);
var fromJust = /* #__PURE__ */ Data_Maybe.fromJust();
var toUnfoldable = /* #__PURE__ */ Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray);
var fromFoldable = /* #__PURE__ */ Data_List.fromFoldable(Data_Foldable.foldableArray);
var NatTrie = /* #__PURE__ */ (function () {
    function NatTrie(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    NatTrie.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new NatTrie(value0, value1, value2);
            };
        };
    };
    return NatTrie;
})();
var tabulateUnit = {
    tabulate: function (f) {
        var r = Data_Lazy.defer(function (v) {
            return f(Data_Unit.unit);
        });
        return function (v) {
            return r;
        };
    }
};
var tabulateNoArguments = {
    tabulate: function (f) {
        var r = Data_Lazy.defer(function (v) {
            return f(Data_Generic_Rep.NoArguments.value);
        });
        return function (v) {
            return r;
        };
    }
};
var tabulateNat = {
    tabulate: /* #__PURE__ */ (function () {
        var tabulateImpl = function (f) {
            var walk = function (v) {
                return function (v1) {
                    if (v instanceof Data_List_Types.Nil) {
                        return v1.value0;
                    };
                    if (v instanceof Data_List_Types.Cons && !v.value0) {
                        return bind(v1.value1)(walk(v.value1));
                    };
                    if (v instanceof Data_List_Types.Cons && v.value0) {
                        return bind(v1.value2)(walk(v.value1));
                    };
                    throw new Error("Failed pattern match at Data.Function.Memoize (line 137, column 11 - line 137, column 64): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            var build = function (n) {
                return new NatTrie(Data_Lazy.defer(function (v) {
                    return f(n);
                }), Data_Lazy.defer(function (v) {
                    return build(n * 2 | 0);
                }), Data_Lazy.defer(function (v) {
                    return build((n * 2 | 0) + 1 | 0);
                }));
            };
            var trie = build(0);
            var bits = (function () {
                var bits$prime = function ($copy_v) {
                    return function ($copy_v1) {
                        var $tco_var_v = $copy_v;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v, v1) {
                            if (v1 === 0) {
                                $tco_done = true;
                                return v;
                            };
                            $tco_var_v = new Data_List_Types.Cons((v1 & 1) !== 0, v);
                            $copy_v1 = v1 >>> 1;
                            return;
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_v, $copy_v1);
                        };
                        return $tco_result;
                    };
                };
                return bits$prime(Data_List_Types.Nil.value);
            })();
            var go = function (n) {
                return walk(bits(n))(trie);
            };
            return go;
        };
        return tabulateImpl;
    })()
};
var tabulateBool = {
    tabulate: function (f) {
        var r2 = Data_Lazy.defer(function (v) {
            return f(false);
        });
        var r1 = Data_Lazy.defer(function (v) {
            return f(true);
        });
        return function (b) {
            if (b) {
                return r1;
            };
            return r2;
        };
    }
};
var tabulate = function (dict) {
    return dict.tabulate;
};
var tabulate1 = /* #__PURE__ */ tabulate(tabulateNat);
var tabulateArgument = function (dictTabulate) {
    var tabulate3 = tabulate(dictTabulate);
    return {
        tabulate: function (f) {
            var g = tabulate3(function ($123) {
                return f(Data_Generic_Rep.Argument($123));
            });
            return function ($124) {
                return g((function (v) {
                    return v;
                })($124));
            };
        }
    };
};
var tabulateChar = {
    tabulate: function (f) {
        var f1 = tabulate1(function ($126) {
            return f(fromJust(Data_Char.fromCharCode($126)));
        });
        return function ($127) {
            return f1(Data_Char.toCharCode($127));
        };
    }
};
var tabulateConstructor = function (dictTabulate) {
    var tabulate3 = tabulate(dictTabulate);
    return {
        tabulate: function (f) {
            var g = tabulate3(function ($128) {
                return f(Data_Generic_Rep.Constructor($128));
            });
            return function ($129) {
                return g((function (v) {
                    return v;
                })($129));
            };
        }
    };
};
var tabulateEither = function (dictTabulate) {
    var tabulate3 = tabulate(dictTabulate);
    return function (dictTabulate1) {
        var tabulate4 = tabulate(dictTabulate1);
        return {
            tabulate: function (f) {
                var r = tabulate4(function ($130) {
                    return f(Data_Either.Right.create($130));
                });
                var l = tabulate3(function ($131) {
                    return f(Data_Either.Left.create($131));
                });
                return function (v) {
                    if (v instanceof Data_Either.Left) {
                        return l(v.value0);
                    };
                    if (v instanceof Data_Either.Right) {
                        return r(v.value0);
                    };
                    throw new Error("Failed pattern match at Data.Function.Memoize (line 74, column 19 - line 76, column 35): " + [ v.constructor.name ]);
                };
            }
        };
    };
};
var tabulateMaybe = function (dictTabulate) {
    var tabulate3 = tabulate(dictTabulate);
    return {
        tabulate: function (f) {
            var n = Data_Lazy.defer(function (v) {
                return f(Data_Maybe.Nothing.value);
            });
            var j = tabulate3(function ($132) {
                return f(Data_Maybe.Just.create($132));
            });
            return function (v) {
                if (v instanceof Data_Maybe.Nothing) {
                    return n;
                };
                if (v instanceof Data_Maybe.Just) {
                    return j(v.value0);
                };
                throw new Error("Failed pattern match at Data.Function.Memoize (line 67, column 19 - line 69, column 35): " + [ v.constructor.name ]);
            };
        }
    };
};
var tabulateProduct = function (dictTabulate) {
    var tabulate3 = tabulate(dictTabulate);
    return function (dictTabulate1) {
        var tabulate4 = tabulate(dictTabulate1);
        return {
            tabulate: function (f) {
                var f$prime = tabulate3(function (a) {
                    return tabulate4(function (b) {
                        return f(new Data_Generic_Rep.Product(a, b));
                    });
                });
                return function (v) {
                    return bind(f$prime(v.value0))(function (g) {
                        return g(v.value1);
                    });
                };
            }
        };
    };
};
var tabulateSum = function (dictTabulate) {
    var tabulate3 = tabulate(dictTabulate);
    return function (dictTabulate1) {
        var tabulate4 = tabulate(dictTabulate1);
        return {
            tabulate: function (f) {
                var r = tabulate4(function ($133) {
                    return f(Data_Generic_Rep.Inr.create($133));
                });
                var l = tabulate3(function ($134) {
                    return f(Data_Generic_Rep.Inl.create($134));
                });
                return function (v) {
                    if (v instanceof Data_Generic_Rep.Inl) {
                        return l(v.value0);
                    };
                    if (v instanceof Data_Generic_Rep.Inr) {
                        return r(v.value0);
                    };
                    throw new Error("Failed pattern match at Data.Function.Memoize (line 81, column 19 - line 83, column 33): " + [ v.constructor.name ]);
                };
            }
        };
    };
};
var tabulateTuple = function (dictTabulate) {
    var tabulate3 = tabulate(dictTabulate);
    return function (dictTabulate1) {
        var tabulate4 = tabulate(dictTabulate1);
        return {
            tabulate: function (f) {
                var f$prime = tabulate3(function (a) {
                    return tabulate4(function (b) {
                        return f(new Data_Tuple.Tuple(a, b));
                    });
                });
                return function (v) {
                    return bind(f$prime(v.value0))(function (g) {
                        return g(v.value1);
                    });
                };
            }
        };
    };
};
var tabulateList = function (dictTabulate) {
    var tabulateTuple1 = tabulateTuple(dictTabulate);
    return {
        tabulate: function (f) {
            var toList = function (v) {
                if (v instanceof Data_Maybe.Nothing) {
                    return Data_List_Types.Nil.value;
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_List_Types.Cons(v.value0.value0, v.value0.value1);
                };
                throw new Error("Failed pattern match at Data.Function.Memoize (line 99, column 7 - line 99, column 27): " + [ v.constructor.name ]);
            };
            var fromList = function (v) {
                if (v instanceof Data_List_Types.Nil) {
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_List_Types.Cons) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
                };
                throw new Error("Failed pattern match at Data.Function.Memoize (line 102, column 7 - line 102, column 29): " + [ v.constructor.name ]);
            };
            var f$prime = tabulate(tabulateMaybe(tabulateTuple1(tabulateList(dictTabulate))))(function ($135) {
                return f(toList($135));
            });
            return function ($136) {
                return f$prime(fromList($136));
            };
        }
    };
};
var tabulateArray = function (dictTabulate) {
    var tabulate3 = tabulate(tabulateList(dictTabulate));
    return {
        tabulate: function (f) {
            var f1 = tabulate3(function ($137) {
                return f(toUnfoldable($137));
            });
            return function ($138) {
                return f1(fromFoldable($138));
            };
        }
    };
};
var tabulate2 = /* #__PURE__ */ tabulate(/* #__PURE__ */ tabulateArray(tabulateChar));
var tabulateString = {
    tabulate: function (f) {
        var f1 = tabulate2(function ($139) {
            return f(Data_String_CodeUnits.fromCharArray($139));
        });
        return function ($140) {
            return f1(Data_String_CodeUnits.toCharArray($140));
        };
    }
};
var memoize = function (dictTabulate) {
    var tabulate3 = tabulate(dictTabulate);
    return function (f) {
        var f1 = tabulate3(f);
        return function ($141) {
            return Data_Lazy.force(f1($141));
        };
    };
};
var memoize2 = function (dictTabulate) {
    var tabulateTuple1 = tabulateTuple(dictTabulate);
    return function (dictTabulate1) {
        var memoize1 = memoize(tabulateTuple1(dictTabulate1));
        return function (f) {
            var f1 = memoize1(Data_Tuple.uncurry(f));
            return Data_Tuple.curry(f1);
        };
    };
};
var memoize3 = function (dictTabulate) {
    var tabulateTuple1 = tabulateTuple(dictTabulate);
    return function (dictTabulate1) {
        var tabulateTuple2 = tabulateTuple(tabulateTuple1(dictTabulate1));
        return function (dictTabulate2) {
            var memoize1 = memoize(tabulateTuple2(dictTabulate2));
            return function (f) {
                var f1 = memoize1(Data_Tuple.uncurry(Data_Tuple.uncurry(f)));
                return Data_Tuple.curry(Data_Tuple.curry(f1));
            };
        };
    };
};
var genericTabulate = function (dictGeneric) {
    var to = Data_Generic_Rep.to(dictGeneric);
    var from = Data_Generic_Rep.from(dictGeneric);
    return function (dictTabulate) {
        var tabulate3 = tabulate(dictTabulate);
        return function (f) {
            var f1 = tabulate3(function ($142) {
                return f(to($142));
            });
            return function ($143) {
                return f1(from($143));
            };
        };
    };
};
export {
    tabulate,
    memoize,
    memoize2,
    memoize3,
    genericTabulate,
    tabulateUnit,
    tabulateNoArguments,
    tabulateBool,
    tabulateChar,
    tabulateString,
    tabulateConstructor,
    tabulateArgument,
    tabulateMaybe,
    tabulateEither,
    tabulateSum,
    tabulateTuple,
    tabulateProduct,
    tabulateList,
    tabulateArray,
    tabulateNat
};
//# sourceMappingURL=index.js.map
