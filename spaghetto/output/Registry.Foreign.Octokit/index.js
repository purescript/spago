// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Promise from "../Control.Promise/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Bifunctor from "../Data.Bifunctor/index.js";
import * as Data_Codec from "../Data.Codec/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Codec_Argonaut_Record from "../Data.Codec.Argonaut.Record/index.js";
import * as Data_Codec_Argonaut_Variant from "../Data.Codec.Argonaut.Variant/index.js";
import * as Data_DateTime_Instant from "../Data.DateTime.Instant/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_HTTP_Method from "../Data.HTTP.Method/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Profunctor from "../Data.Profunctor/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Base64 from "../Data.String.Base64/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Data_Variant from "../Data.Variant/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Effect_Uncurried from "../Effect.Uncurried/index.js";
import * as Foreign_Object from "../Foreign.Object/index.js";
import * as Registry_Internal_Codec from "../Registry.Internal.Codec/index.js";
import * as Type_Equality from "../Type.Equality/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
import * as Unsafe_Coerce from "../Unsafe.Coerce/index.js";
var eq = /* #__PURE__ */ Data_Eq.eq(Data_HTTP_Method.eqMethod);
var eq1 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Eq.eqArray(Data_Eq.eqString));
var eq2 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Map_Internal.eqMap(Data_Eq.eqString)(Data_Eq.eqString));
var compare = /* #__PURE__ */ Data_Ord.compare(Data_HTTP_Method.ordMethod);
var compare1 = /* #__PURE__ */ Data_Ord.compare(/* #__PURE__ */ Data_Ord.ordArray(Data_Ord.ordString));
var compare2 = /* #__PURE__ */ Data_Ord.compare(/* #__PURE__ */ Data_Map_Internal.ordMap(Data_Ord.ordString)(Data_Ord.ordString));
var compare3 = /* #__PURE__ */ Data_Ord.compare(Data_Ord.ordString);
var compare4 = /* #__PURE__ */ Data_Ord.compare(Data_Ord.ordInt);
var foldMap = /* #__PURE__ */ Data_Array.foldMap(Data_Monoid.monoidString);
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupString);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var toUnfoldable = /* #__PURE__ */ Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray);
var show = /* #__PURE__ */ Data_Show.show(Data_HTTP_Method.showMethod);
var fold = /* #__PURE__ */ Data_Array.fold(Data_Monoid.monoidString);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var unwrap = /* #__PURE__ */ Data_Newtype.unwrap();
var dimap = /* #__PURE__ */ Data_Profunctor.dimap(/* #__PURE__ */ Data_Codec.profunctorCodec(Data_Either.functorEither));
var object = /* #__PURE__ */ Data_Codec_Argonaut_Record.object();
var rowListCodecCons = /* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(Data_Codec_Argonaut_Record.rowListCodecNil)()();
var object1 = /* #__PURE__ */ object(/* #__PURE__ */ rowListCodecCons({
    reflectSymbol: function () {
        return "data";
    }
}));
var object2 = /* #__PURE__ */ object(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ rowListCodecCons({
    reflectSymbol: function () {
        return "login";
    }
}))()()({
    reflectSymbol: function () {
        return "id";
    }
}));
var object3 = /* #__PURE__ */ object(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ rowListCodecCons({
    reflectSymbol: function () {
        return "name";
    }
}))()()({
    reflectSymbol: function () {
        return "commit";
    }
}));
var shaIsSymbol = {
    reflectSymbol: function () {
        return "sha";
    }
};
var object4 = /* #__PURE__ */ object(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ rowListCodecCons({
    reflectSymbol: function () {
        return "url";
    }
}))()()(shaIsSymbol));
var inj = /* #__PURE__ */ Data_Variant.inj();
var unexpectedErrorIsSymbol = {
    reflectSymbol: function () {
        return "unexpectedError";
    }
};
var inj1 = /* #__PURE__ */ inj(unexpectedErrorIsSymbol);
var apiErrorIsSymbol = {
    reflectSymbol: function () {
        return "apiError";
    }
};
var inj2 = /* #__PURE__ */ inj(apiErrorIsSymbol);
var decodeErrorIsSymbol = {
    reflectSymbol: function () {
        return "decodeError";
    }
};
var inj3 = /* #__PURE__ */ inj(decodeErrorIsSymbol);
var object5 = /* #__PURE__ */ object(/* #__PURE__ */ rowListCodecCons({
    reflectSymbol: function () {
        return "object";
    }
}));
var object6 = /* #__PURE__ */ object(/* #__PURE__ */ rowListCodecCons(shaIsSymbol));
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Either.bindEither);
var pure = /* #__PURE__ */ Control_Applicative.pure(Data_Either.applicativeEither);
var object7 = /* #__PURE__ */ object(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ rowListCodecCons({
    reflectSymbol: function () {
        return "type";
    }
}))()()({
    reflectSymbol: function () {
        return "encoding";
    }
}))()()({
    reflectSymbol: function () {
        return "content";
    }
}));
var object8 = /* #__PURE__ */ object(/* #__PURE__ */ rowListCodecCons({
    reflectSymbol: function () {
        return "committer";
    }
}));
var object9 = /* #__PURE__ */ object(/* #__PURE__ */ rowListCodecCons({
    reflectSymbol: function () {
        return "date";
    }
}));
var traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither);
var lmap = /* #__PURE__ */ Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither);
var IssueNumber = function (x) {
    return x;
};
var GitHubToken = function (x) {
    return x;
};
var GitHubRoute = /* #__PURE__ */ (function () {
    function GitHubRoute(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    GitHubRoute.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new GitHubRoute(value0, value1, value2);
            };
        };
    };
    return GitHubRoute;
})();
var UnexpectedError = /* #__PURE__ */ (function () {
    function UnexpectedError(value0) {
        this.value0 = value0;
    };
    UnexpectedError.create = function (value0) {
        return new UnexpectedError(value0);
    };
    return UnexpectedError;
})();
var APIError = /* #__PURE__ */ (function () {
    function APIError(value0) {
        this.value0 = value0;
    };
    APIError.create = function (value0) {
        return new APIError(value0);
    };
    return APIError;
})();
var DecodeError = /* #__PURE__ */ (function () {
    function DecodeError(value0) {
        this.value0 = value0;
    };
    DecodeError.create = function (value0) {
        return new DecodeError(value0);
    };
    return DecodeError;
})();
var Base64Content = function (x) {
    return x;
};
var ordGitHubToken = Data_Ord.ordString;
var newtypeIssueNumberInt = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeGitHubToken_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeBase64Content_ = {
    Coercible0: function () {
        return undefined;
    }
};
var eqIssueNumber = Data_Eq.eqInt;
var eqGitHubToken = Data_Eq.eqString;
var eqGitHubRoute = {
    eq: function (x) {
        return function (y) {
            return eq(x.value0)(y.value0) && eq1(x.value1)(y.value1) && eq2(x.value2)(y.value2);
        };
    }
};
var ordGitHubRoute = {
    compare: function (x) {
        return function (y) {
            var v = compare(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            var v1 = compare1(x.value1)(y.value1);
            if (v1 instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v1 instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return compare2(x.value2)(y.value2);
        };
    },
    Eq0: function () {
        return eqGitHubRoute;
    }
};
var eqGitHubError = {
    eq: function (x) {
        return function (y) {
            if (x instanceof UnexpectedError && y instanceof UnexpectedError) {
                return x.value0 === y.value0;
            };
            if (x instanceof APIError && y instanceof APIError) {
                return x.value0.message === y.value0.message && x.value0.statusCode === y.value0.statusCode;
            };
            if (x instanceof DecodeError && y instanceof DecodeError) {
                return x.value0 === y.value0;
            };
            return false;
        };
    }
};
var ordGitHubError = {
    compare: function (x) {
        return function (y) {
            if (x instanceof UnexpectedError && y instanceof UnexpectedError) {
                return compare3(x.value0)(y.value0);
            };
            if (x instanceof UnexpectedError) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof UnexpectedError) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof APIError && y instanceof APIError) {
                var v = compare3(x.value0.message)(y.value0.message);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return compare4(x.value0.statusCode)(y.value0.statusCode);
            };
            if (x instanceof APIError) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof APIError) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof DecodeError && y instanceof DecodeError) {
                return compare3(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at Registry.Foreign.Octokit (line 0, column 0 - line 0, column 0): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqGitHubError;
    }
};
var unsafeToJSArgs = Unsafe_Coerce.unsafeCoerce;
var printGitHubRoute = function (v) {
    var printPath = foldMap(append("/"))(v.value1);
    var printParams = (function () {
        var v1 = Data_Map_Internal.size(v.value2);
        if (v1 === 0) {
            return "";
        };
        return "?" + Data_String_Common.joinWith("&")(map(function (v2) {
            return v2.value0 + ("=" + v2.value1);
        })(toUnfoldable(v.value2)));
    })();
    return show(v.value0) + (" " + (printPath + printParams));
};
var printGitHubError = function (v) {
    if (v instanceof UnexpectedError) {
        return fold([ "Unexpected error: ", v.value0 ]);
    };
    if (v instanceof APIError) {
        return fold([ "GitHub API error (", Data_Int.toStringAs(Data_Int.decimal)(v.value0.statusCode), "): ", v.value0.message ]);
    };
    if (v instanceof DecodeError) {
        return fold([ "Decoding error: ", v.value0 ]);
    };
    throw new Error("Failed pattern match at Registry.Foreign.Octokit (line 362, column 20 - line 376, column 6): " + [ v.constructor.name ]);
};
var noArgs = /* #__PURE__ */ unsafeToJSArgs({});
var rateLimitRequest = /* #__PURE__ */ (function () {
    var toJsonRep = function (v) {
        var reset = Data_Maybe.fromMaybe(-9999.0)(map1(function ($342) {
            return unwrap(Data_DateTime_Instant.unInstant($342));
        })(v.resetTime));
        return {
            data: {
                resources: {
                    core: {
                        limit: v.limit,
                        remaining: v.remaining,
                        reset: reset
                    }
                }
            }
        };
    };
    var fromJsonRep = function (v) {
        return {
            limit: v.data.resources.core.limit,
            remaining: v.data.resources.core.remaining,
            resetTime: Data_DateTime_Instant.instant(v.data.resources.core.reset * 1000.0)
        };
    };
    return {
        route: new GitHubRoute(Data_HTTP_Method.GET.value, [ "rate_limit" ], Data_Map_Internal.empty),
        headers: Foreign_Object.empty,
        args: noArgs,
        paginate: false,
        codec: dimap(toJsonRep)(fromJsonRep)(object1("RateLimit")({
            data: object(rowListCodecCons({
                reflectSymbol: function () {
                    return "resources";
                }
            }))("RateLimit.data")({
                resources: object(rowListCodecCons({
                    reflectSymbol: function () {
                        return "core";
                    }
                }))("RateLimit.data.resources")({
                    core: object(Data_Codec_Argonaut_Record.rowListCodecCons(Data_Codec_Argonaut_Record.rowListCodecCons(rowListCodecCons({
                        reflectSymbol: function () {
                            return "reset";
                        }
                    }))()()({
                        reflectSymbol: function () {
                            return "remaining";
                        }
                    }))()()({
                        reflectSymbol: function () {
                            return "limit";
                        }
                    }))("RateLimit.data.resources.core")({
                        limit: Data_Codec_Argonaut["int"],
                        remaining: Data_Codec_Argonaut["int"],
                        reset: Data_Codec_Argonaut.number
                    })
                })
            })
        }))
    };
})();
var newOctokit = function (dictMonadEffect) {
    var $343 = Effect_Class.liftEffect(dictMonadEffect);
    var $344 = Effect_Uncurried.runEffectFn1($foreign.newOctokitImpl);
    return function ($345) {
        return $343($344($345));
    };
};
var listTeamMembersRequest = function (team) {
    return {
        route: new GitHubRoute(Data_HTTP_Method.GET.value, [ "orgs", team.org, "teams", team.team, "members" ], Data_Map_Internal.empty),
        headers: Foreign_Object.empty,
        args: noArgs,
        paginate: true,
        codec: Data_Codec_Argonaut.array(object2("TeamMember")({
            login: Data_Codec_Argonaut.string,
            id: Data_Codec_Argonaut["int"]
        }))
    };
};
var listTagsRequest = function (address) {
    var toJsonRep = function (v) {
        return {
            name: v.name,
            commit: {
                sha: v.sha,
                url: v.url
            }
        };
    };
    var fromJsonRep = function (v) {
        return {
            name: v.name,
            sha: v.commit.sha,
            url: v.commit.url
        };
    };
    return {
        route: new GitHubRoute(Data_HTTP_Method.GET.value, [ "repos", address.owner, address.repo, "tags" ], Data_Map_Internal.empty),
        headers: Foreign_Object.empty,
        args: noArgs,
        paginate: true,
        codec: Data_Codec_Argonaut.array(dimap(toJsonRep)(fromJsonRep)(object3("Tag")({
            name: Data_Codec_Argonaut.string,
            commit: object4("Tag.Commit")({
                sha: Data_Codec_Argonaut.string,
                url: Data_Codec_Argonaut.string
            })
        })))
    };
};
var githubApiErrorCodec = /* #__PURE__ */ object(/* #__PURE__ */ Data_Codec_Argonaut_Record.rowListCodecCons(/* #__PURE__ */ rowListCodecCons({
    reflectSymbol: function () {
        return "statusCode";
    }
}))()()({
    reflectSymbol: function () {
        return "message";
    }
}))("GitHubAPIError")({
    statusCode: Data_Codec_Argonaut["int"],
    message: Data_Codec_Argonaut.string
});
var githubErrorCodec = /* #__PURE__ */ (function () {
    var toVariant = function (v) {
        if (v instanceof UnexpectedError) {
            return inj1(Type_Proxy["Proxy"].value)(v.value0);
        };
        if (v instanceof APIError) {
            return inj2(Type_Proxy["Proxy"].value)(v.value0);
        };
        if (v instanceof DecodeError) {
            return inj3(Type_Proxy["Proxy"].value)(v.value0);
        };
        throw new Error("Failed pattern match at Registry.Foreign.Octokit (line 350, column 15 - line 353, column 70): " + [ v.constructor.name ]);
    };
    var fromVariant = Data_Variant.match()()()({
        unexpectedError: UnexpectedError.create,
        apiError: APIError.create,
        decodeError: DecodeError.create
    });
    return dimap(toVariant)(fromVariant)(Data_Codec_Argonaut_Variant.variantMatch()(Data_Codec_Argonaut_Variant.variantCodecCons(Data_Codec_Argonaut_Variant.variantCodecCons(Data_Codec_Argonaut_Variant.variantCodecCons(Data_Codec_Argonaut_Variant.variantCodecNil)()()(unexpectedErrorIsSymbol)(Type_Equality.refl))()()(decodeErrorIsSymbol)(Type_Equality.refl))()()(apiErrorIsSymbol)(Type_Equality.refl))({
        unexpectedError: new Data_Either.Right(Data_Codec_Argonaut.string),
        apiError: new Data_Either.Right(githubApiErrorCodec),
        decodeError: new Data_Either.Right(Data_Codec_Argonaut.string)
    }));
})();
var getRefCommitRequest = function (v) {
    var toJsonRep = function (sha) {
        return {
            object: {
                sha: sha
            }
        };
    };
    var fromJsonRep = function (v1) {
        return v1.object.sha;
    };
    return {
        route: new GitHubRoute(Data_HTTP_Method.GET.value, [ "repos", v.address.owner, v.address.repo, "git", "ref", v.ref ], Data_Map_Internal.empty),
        headers: Foreign_Object.empty,
        args: noArgs,
        paginate: false,
        codec: dimap(toJsonRep)(fromJsonRep)(object5("Ref")({
            object: object6("Ref.object")({
                sha: Data_Codec_Argonaut.string
            })
        }))
    };
};
var getContentRequest = function (v) {
    var value = function (expected) {
        return Data_Codec["codec$prime"](function (json) {
            return bind(Data_Codec.decode(Data_Codec_Argonaut.string)(json))(function (decoded) {
                var $302 = decoded === expected;
                if ($302) {
                    return pure(expected);
                };
                return new Data_Either.Left(new Data_Codec_Argonaut.UnexpectedValue(json));
            });
        })(function (v1) {
            return Data_Codec.encode(Data_Codec_Argonaut.string)(expected);
        });
    };
    var toJsonRep = function (v1) {
        return {
            data: {
                type: "file",
                encoding: "base64",
                content: v1
            }
        };
    };
    var fromJsonRep = function (v1) {
        return v1.data.content;
    };
    return {
        route: new GitHubRoute(Data_HTTP_Method.GET.value, [ "repos", v.address.owner, v.address.repo, "contents", v.path ], Data_Map_Internal.singleton("ref")(v.ref)),
        headers: Foreign_Object.empty,
        args: noArgs,
        paginate: false,
        codec: dimap(toJsonRep)(fromJsonRep)(object1("Content")({
            data: object7("Content.data")({
                type: value("file"),
                encoding: value("base64"),
                content: Data_Codec_Argonaut.string
            })
        }))
    };
};
var getCommitDateRequest = function (v) {
    var toJsonRep = function (date) {
        return {
            committer: {
                date: date
            }
        };
    };
    var fromJsonRep = function (v1) {
        return v1.committer.date;
    };
    return {
        route: new GitHubRoute(Data_HTTP_Method.GET.value, [ "repos", v.address.owner, v.address.repo, "git", "commits", v.commitSha ], Data_Map_Internal.empty),
        headers: Foreign_Object.empty,
        args: noArgs,
        paginate: false,
        codec: dimap(toJsonRep)(fromJsonRep)(object8("Commit")({
            committer: object9("Commit.committer")({
                date: Registry_Internal_Codec.iso8601DateTime
            })
        }))
    };
};
var decodeBase64Content = function (v) {
    var v1 = traverse(Data_String_Base64.decode)(Data_String_Common.split("\x0a")(v));
    if (v1 instanceof Data_Either.Left) {
        return new Data_Either.Left(Effect_Exception.message(v1.value0));
    };
    if (v1 instanceof Data_Either.Right) {
        return new Data_Either.Right(fold(v1.value0));
    };
    throw new Error("Failed pattern match at Registry.Foreign.Octokit (line 102, column 3 - line 104, column 46): " + [ v1.constructor.name ]);
};
var createCommentRequest = function (v) {
    return {
        route: new GitHubRoute(Data_HTTP_Method.POST.value, [ "repos", v.address.owner, v.address.repo, "issues", Data_Int.toStringAs(Data_Int.decimal)(v.issue), "comments" ], Data_Map_Internal.empty),
        headers: Foreign_Object.empty,
        args: unsafeToJSArgs({
            body: v.body
        }),
        paginate: false,
        codec: Data_Codec["codec$prime"](function (v1) {
            return pure(Data_Unit.unit);
        })(Data_Codec.encode(Data_Codec_Argonaut["null"]))
    };
};
var closeIssueRequest = function (v) {
    return {
        route: new GitHubRoute(Data_HTTP_Method.PATCH.value, [ "repos", v.address.owner, v.address.repo, "issues", Data_Int.toStringAs(Data_Int.decimal)(v.issue) ], Data_Map_Internal.empty),
        headers: Foreign_Object.empty,
        args: unsafeToJSArgs({
            state: "closed"
        }),
        paginate: false,
        codec: Data_Codec["codec$prime"](function (v1) {
            return pure(Data_Unit.unit);
        })(Data_Codec.encode(Data_Codec_Argonaut["null"]))
    };
};
var atKey = function (key) {
    return function (codec) {
        return function (object10) {
            return Data_Maybe.maybe(new Data_Either.Left(new Data_Codec_Argonaut.AtKey(key, Data_Codec_Argonaut.MissingValue.value)))((function () {
                var $346 = lmap(Data_Codec_Argonaut.AtKey.create(key));
                var $347 = Data_Codec.decode(codec);
                return function ($348) {
                    return $346($347($348));
                };
            })())(Foreign_Object.lookup(key)(object10));
        };
    };
};
var request = function (dictMonadAff) {
    var Monad0 = (dictMonadAff.MonadEffect0()).Monad0();
    var bind1 = Control_Bind.bind(Monad0.Bind1());
    var liftAff = Effect_Aff_Class.liftAff(dictMonadAff);
    var pure1 = Control_Applicative.pure(Monad0.Applicative0());
    return function (octokit) {
        return function (v) {
            var decodeGitHubAPIError = function (object10) {
                return lmap(Data_Codec_Argonaut.printJsonDecodeError)(bind(atKey("status")(Data_Codec_Argonaut["int"])(object10))(function (statusCode) {
                    return bind((function () {
                        if (statusCode === 304) {
                            return pure("");
                        };
                        return bind(bind(atKey("response")(Data_Codec_Argonaut.jobject)(object10))(atKey("data")(Data_Codec_Argonaut.jobject)))(atKey("message")(Data_Codec_Argonaut.string));
                    })())(function (message) {
                        return pure({
                            statusCode: statusCode,
                            message: message
                        });
                    });
                }));
            };
            return bind1(liftAff(Control_Promise.toAffE(function () {
                return (function () {
                    if (v.paginate) {
                        return $foreign.paginateImpl;
                    };
                    return $foreign.requestImpl;
                })()(octokit, printGitHubRoute(v.route), v.headers, v.args, Data_Either.Left.create, Data_Either.Right.create);
            })))(function (result) {
                return pure1((function () {
                    if (result instanceof Data_Either.Left) {
                        var v1 = decodeGitHubAPIError(result.value0);
                        if (v1 instanceof Data_Either.Left) {
                            return new Data_Either.Left(new UnexpectedError(v1.value0));
                        };
                        if (v1 instanceof Data_Either.Right) {
                            return new Data_Either.Left(new APIError(v1.value0));
                        };
                        throw new Error("Failed pattern match at Registry.Foreign.Octokit (line 309, column 25 - line 311, column 47): " + [ v1.constructor.name ]);
                    };
                    if (result instanceof Data_Either.Right) {
                        var v1 = Data_Codec.decode(v.codec)(result.value0);
                        if (v1 instanceof Data_Either.Left) {
                            return new Data_Either.Left(new DecodeError(Data_Codec_Argonaut.printJsonDecodeError(v1.value0)));
                        };
                        if (v1 instanceof Data_Either.Right) {
                            return new Data_Either.Right(v1.value0);
                        };
                        throw new Error("Failed pattern match at Registry.Foreign.Octokit (line 312, column 19 - line 314, column 35): " + [ v1.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Registry.Foreign.Octokit (line 308, column 10 - line 314, column 35): " + [ result.constructor.name ]);
                })());
            });
        };
    };
};
export {
    Base64Content,
    UnexpectedError,
    APIError,
    DecodeError,
    GitHubRoute,
    GitHubToken,
    IssueNumber,
    closeIssueRequest,
    createCommentRequest,
    decodeBase64Content,
    getCommitDateRequest,
    getContentRequest,
    getRefCommitRequest,
    githubApiErrorCodec,
    githubErrorCodec,
    listTagsRequest,
    listTeamMembersRequest,
    newOctokit,
    noArgs,
    printGitHubError,
    printGitHubRoute,
    rateLimitRequest,
    request,
    unsafeToJSArgs,
    newtypeGitHubToken_,
    eqGitHubToken,
    ordGitHubToken,
    newtypeBase64Content_,
    newtypeIssueNumberInt,
    eqIssueNumber,
    eqGitHubRoute,
    ordGitHubRoute,
    eqGitHubError,
    ordGitHubError
};
//# sourceMappingURL=index.js.map
