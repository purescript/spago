// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Promise from "../Control.Promise/index.js";
import * as ConvertableOptions from "../ConvertableOptions/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Filterable from "../Data.Filterable/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Registry_Internal_Path from "../Registry.Internal.Path/index.js";
var traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableArray);
var partitionMap = /* #__PURE__ */ Data_Filterable.partitionMap(Data_Filterable.filterableArray);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var defaultsRecord = /* #__PURE__ */ ConvertableOptions.defaultsRecord()();
var FilesAndDirectories = /* #__PURE__ */ (function () {
    function FilesAndDirectories() {

    };
    FilesAndDirectories.value = new FilesAndDirectories();
    return FilesAndDirectories;
})();
var FilesOnly = /* #__PURE__ */ (function () {
    function FilesOnly() {

    };
    FilesOnly.value = new FilesOnly();
    return FilesOnly;
})();
var DirectoriesOnly = /* #__PURE__ */ (function () {
    function DirectoriesOnly() {

    };
    DirectoriesOnly.value = new DirectoriesOnly();
    return DirectoriesOnly;
})();
var eqInclude = {
    eq: function (x) {
        return function (y) {
            if (x instanceof FilesAndDirectories && y instanceof FilesAndDirectories) {
                return true;
            };
            if (x instanceof FilesOnly && y instanceof FilesOnly) {
                return true;
            };
            if (x instanceof DirectoriesOnly && y instanceof DirectoriesOnly) {
                return true;
            };
            return false;
        };
    }
};
var eq = /* #__PURE__ */ Data_Eq.eq(eqInclude);
var globOptionsToJSGlobOptions = function (cwd) {
    return function (options) {
        return {
            cwd: cwd,
            ignore: options.ignore,
            onlyDirectories: eq(options.include)(DirectoriesOnly.value),
            onlyFiles: eq(options.include)(FilesOnly.value),
            caseSensitive: options.caseSensitive,
            dotfiles: options.dotfiles,
            unique: options.unique
        };
    };
};
var defaultGlobOptions = /* #__PURE__ */ (function () {
    return {
        ignore: [  ],
        include: FilesAndDirectories.value,
        caseSensitive: true,
        dotfiles: true,
        unique: true
    };
})();
var match$prime = function (dictMonadAff) {
    var Monad0 = (dictMonadAff.MonadEffect0()).Monad0();
    var bind = Control_Bind.bind(Monad0.Bind1());
    var liftAff = Effect_Aff_Class.liftAff(dictMonadAff);
    var Applicative0 = Monad0.Applicative0();
    var traverse1 = traverse(Applicative0);
    var sanitizePath = Registry_Internal_Path.sanitizePath(dictMonadAff);
    var pure = Control_Applicative.pure(Applicative0);
    return function (dictDefaults) {
        var defaults = ConvertableOptions.defaults(dictDefaults);
        return function (baseDirectory) {
            return function (entries) {
                return function (opts) {
                    var options = defaults(defaultGlobOptions)(opts);
                    var jsOptions = globOptionsToJSGlobOptions(baseDirectory)(options);
                    return bind(liftAff(Control_Promise.toAffE($foreign.matchImpl(entries)(jsOptions))))(function (matches) {
                        return bind(traverse1(sanitizePath(baseDirectory))(matches))(function (results) {
                            var v = partitionMap(identity)(results);
                            return pure({
                                failed: v.left,
                                succeeded: v.right
                            });
                        });
                    });
                };
            };
        };
    };
};
var match = function (dictMonadAff) {
    var match$prime1 = match$prime(dictMonadAff)(defaultsRecord);
    return function (baseDir) {
        return function (entries) {
            return match$prime1(baseDir)(entries)({});
        };
    };
};
export {
    FilesAndDirectories,
    FilesOnly,
    DirectoriesOnly,
    match,
    match$prime,
    eqInclude
};
//# sourceMappingURL=index.js.map
