// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Function_Uncurried from "../Data.Function.Uncurried/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Safe_Coerce from "../Safe.Coerce/index.js";
var coerce = /* #__PURE__ */ Safe_Coerce.coerce();
var And = /* #__PURE__ */ (function () {
    function And() {

    };
    And.value = new And();
    return And;
})();
var Or = /* #__PURE__ */ (function () {
    function Or() {

    };
    Or.value = new Or();
    return Or;
})();
var License = function (x) {
    return x;
};
var eqSPDXConjunction = {
    eq: function (x) {
        return function (y) {
            if (x instanceof And && y instanceof And) {
                return true;
            };
            if (x instanceof Or && y instanceof Or) {
                return true;
            };
            return false;
        };
    }
};
var eqLicense = Data_Eq.eqString;
var print = function (v) {
    return v;
};
var parse = /* #__PURE__ */ (function () {
    return Data_Function_Uncurried.runFn3($foreign.parseSPDXLicenseIdImpl)(Data_Either.Left.create)(function ($12) {
        return Data_Either.Right.create(License($12));
    });
})();
var joinWith = function (v) {
    if (v instanceof And) {
        var $13 = Data_String_Common.joinWith(" AND ");
        return function ($14) {
            return coerce($13(coerce($14)));
        };
    };
    if (v instanceof Or) {
        var $15 = Data_String_Common.joinWith(" OR ");
        return function ($16) {
            return coerce($15(coerce($16)));
        };
    };
    throw new Error("Failed pattern match at Registry.License (line 56, column 12 - line 58, column 53): " + [ v.constructor.name ]);
};
var codec = /* #__PURE__ */ Data_Codec_Argonaut.prismaticCodec("License")(function ($17) {
    return Data_Either.hush(parse($17));
})(print)(Data_Codec_Argonaut.string);
export {
    And,
    Or,
    codec,
    joinWith,
    parse,
    print,
    eqLicense,
    eqSPDXConjunction
};
//# sourceMappingURL=index.js.map
