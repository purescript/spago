// Generated by purs version 0.15.10
import * as $foreign from "./foreign.js";
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Nullable from "../Data.Nullable/index.js";
import * as Data_Posix_Signal from "../Data.Posix.Signal/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Effect_Exception_Unsafe from "../Effect.Exception.Unsafe/index.js";
import * as Node_Encoding from "../Node.Encoding/index.js";
import * as Unsafe_Coerce from "../Unsafe.Coerce/index.js";
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var show1 = /* #__PURE__ */ Data_Show.show(Data_Posix_Signal.showSignal);
var composeKleisli = /* #__PURE__ */ Control_Bind.composeKleisli(Data_Maybe.bindMaybe);
var alt = /* #__PURE__ */ Control_Alt.alt(Data_Maybe.altMaybe);
var Pipe = /* #__PURE__ */ (function () {
    function Pipe() {

    };
    Pipe.value = new Pipe();
    return Pipe;
})();
var Ignore = /* #__PURE__ */ (function () {
    function Ignore() {

    };
    Ignore.value = new Ignore();
    return Ignore;
})();
var ShareStream = /* #__PURE__ */ (function () {
    function ShareStream(value0) {
        this.value0 = value0;
    };
    ShareStream.create = function (value0) {
        return new ShareStream(value0);
    };
    return ShareStream;
})();
var ShareFD = /* #__PURE__ */ (function () {
    function ShareFD(value0) {
        this.value0 = value0;
    };
    ShareFD.create = function (value0) {
        return new ShareFD(value0);
    };
    return ShareFD;
})();
var Normally = /* #__PURE__ */ (function () {
    function Normally(value0) {
        this.value0 = value0;
    };
    Normally.create = function (value0) {
        return new Normally(value0);
    };
    return Normally;
})();
var BySignal = /* #__PURE__ */ (function () {
    function BySignal(value0) {
        this.value0 = value0;
    };
    BySignal.create = function (value0) {
        return new BySignal(value0);
    };
    return BySignal;
})();
var ChildProcess = function (x) {
    return x;
};
var toStandardError = Unsafe_Coerce.unsafeCoerce;
var toActualStdIOBehaviour = function (b) {
    if (b instanceof Pipe) {
        return "pipe";
    };
    if (b instanceof Ignore) {
        return "ignore";
    };
    if (b instanceof ShareFD) {
        return b.value0;
    };
    if (b instanceof ShareStream) {
        return b.value0;
    };
    throw new Error("Failed pattern match at Node.ChildProcess (line 517, column 28 - line 521, column 33): " + [ b.constructor.name ]);
};
var toActualStdIOOptions = /* #__PURE__ */ map(/* #__PURE__ */ (function () {
    var $38 = map1(toActualStdIOBehaviour);
    return function ($39) {
        return Data_Nullable.toNullable($38($39));
    };
})());
var spawn = function (cmd) {
    return function (args) {
        var convertOpts = function (opts) {
            return {
                cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
                stdio: toActualStdIOOptions(opts.stdio),
                env: Data_Nullable.toNullable(opts.env),
                detached: opts.detached,
                uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
                gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
            };
        };
        var $40 = $foreign.spawnImpl(cmd)(args);
        return function ($41) {
            return $40(convertOpts($41));
        };
    };
};
var showExit = {
    show: function (v) {
        if (v instanceof Normally) {
            return "Normally " + show(v.value0);
        };
        if (v instanceof BySignal) {
            return "BySignal " + show1(v.value0);
        };
        throw new Error("Failed pattern match at Node.ChildProcess (line 164, column 1 - line 166, column 48): " + [ v.constructor.name ]);
    }
};
var runChildProcess = function (v) {
    return v;
};
var pipe = /* #__PURE__ */ (function () {
    return map(Data_Maybe.Just.create)([ Pipe.value, Pipe.value, Pipe.value ]);
})();
var pid = function ($42) {
    return (function (v) {
        return v.pid;
    })(runChildProcess($42));
};
var onMessage = /* #__PURE__ */ (function () {
    return $foreign.mkOnMessage(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
})();
var mkExit = function (code) {
    return function (signal) {
        var fromSignal = composeKleisli(Data_Nullable.toMaybe)((function () {
            var $43 = map1(BySignal.create);
            return function ($44) {
                return $43(Data_Posix_Signal.fromString($44));
            };
        })());
        var fromCode = (function () {
            var $45 = map1(Normally.create);
            return function ($46) {
                return $45(Data_Nullable.toMaybe($46));
            };
        })();
        var v = alt(fromCode(code))(fromSignal(signal));
        if (v instanceof Data_Maybe.Just) {
            return v.value0;
        };
        if (v instanceof Data_Maybe.Nothing) {
            return Effect_Exception_Unsafe.unsafeThrow("Node.ChildProcess.mkExit: Invalid arguments");
        };
        throw new Error("Failed pattern match at Node.ChildProcess (line 170, column 3 - line 172, column 73): " + [ v.constructor.name ]);
    };
};
var onClose = /* #__PURE__ */ $foreign.mkOnClose(mkExit);
var onExit = /* #__PURE__ */ $foreign.mkOnExit(mkExit);
var mkEffect = Unsafe_Coerce.unsafeCoerce;
var send = function (msg) {
    return function (handle) {
        return function (v) {
            return mkEffect(function (v1) {
                return v.send(msg, handle);
            });
        };
    };
};
var missingStream = function (str) {
    return "Node.ChildProcess: stream not available: " + (str + ("\x0aThis is probably " + ("because you passed something other than Pipe to the stdio option when " + "you spawned it.")));
};
var stderr = /* #__PURE__ */ (function () {
    var $47 = $foreign.unsafeFromNullable(missingStream("stderr"));
    return function ($48) {
        return $47((function (v) {
            return v.stderr;
        })(runChildProcess($48)));
    };
})();
var stdin = /* #__PURE__ */ (function () {
    var $49 = $foreign.unsafeFromNullable(missingStream("stdin"));
    return function ($50) {
        return $49((function (v) {
            return v.stdin;
        })(runChildProcess($50)));
    };
})();
var stdout = /* #__PURE__ */ (function () {
    var $51 = $foreign.unsafeFromNullable(missingStream("stdout"));
    return function ($52) {
        return $51((function (v) {
            return v.stdout;
        })(runChildProcess($52)));
    };
})();
var kill = function (sig) {
    return function (v) {
        return mkEffect(function (v1) {
            return v.kill(Data_Posix_Signal.toString(sig));
        });
    };
};
var inherit = /* #__PURE__ */ (function () {
    return map(Data_Maybe.Just.create)([ new ShareStream($foreign.process.stdin), new ShareStream($foreign.process.stdout), new ShareStream($foreign.process.stderr) ]);
})();
var ignore = /* #__PURE__ */ (function () {
    return map(Data_Maybe.Just.create)([ Ignore.value, Ignore.value, Ignore.value ]);
})();
var disconnect = function ($53) {
    return (function (v) {
        return v.disconnect;
    })(runChildProcess($53));
};
var defaultSpawnOptions = /* #__PURE__ */ (function () {
    return {
        cwd: Data_Maybe.Nothing.value,
        stdio: pipe,
        env: Data_Maybe.Nothing.value,
        detached: false,
        uid: Data_Maybe.Nothing.value,
        gid: Data_Maybe.Nothing.value
    };
})();
var defaultExecSyncOptions = /* #__PURE__ */ (function () {
    return {
        cwd: Data_Maybe.Nothing.value,
        input: Data_Maybe.Nothing.value,
        stdio: pipe,
        env: Data_Maybe.Nothing.value,
        timeout: Data_Maybe.Nothing.value,
        maxBuffer: Data_Maybe.Nothing.value,
        killSignal: Data_Maybe.Nothing.value,
        uid: Data_Maybe.Nothing.value,
        gid: Data_Maybe.Nothing.value
    };
})();
var defaultExecOptions = /* #__PURE__ */ (function () {
    return {
        cwd: Data_Maybe.Nothing.value,
        env: Data_Maybe.Nothing.value,
        encoding: Data_Maybe.Nothing.value,
        shell: Data_Maybe.Nothing.value,
        timeout: Data_Maybe.Nothing.value,
        maxBuffer: Data_Maybe.Nothing.value,
        killSignal: Data_Maybe.Nothing.value,
        uid: Data_Maybe.Nothing.value,
        gid: Data_Maybe.Nothing.value
    };
})();
var convertExecSyncOptions = function (opts) {
    return {
        cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
        input: Data_Maybe.fromMaybe($foreign["undefined"])(opts.input),
        stdio: toActualStdIOOptions(opts.stdio),
        env: Data_Maybe.fromMaybe($foreign["undefined"])(opts.env),
        timeout: Data_Maybe.fromMaybe($foreign["undefined"])(opts.timeout),
        maxBuffer: Data_Maybe.fromMaybe($foreign["undefined"])(opts.maxBuffer),
        killSignal: Data_Maybe.fromMaybe($foreign["undefined"])(opts.killSignal),
        uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
        gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
    };
};
var execFileSync = function (cmd) {
    return function (args) {
        return function (opts) {
            return $foreign.execFileSyncImpl(cmd)(args)(convertExecSyncOptions(opts));
        };
    };
};
var execSync = function (cmd) {
    return function (opts) {
        return $foreign.execSyncImpl(cmd)(convertExecSyncOptions(opts));
    };
};
var convertExecOptions = function (opts) {
    return {
        cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
        env: Data_Maybe.fromMaybe($foreign["undefined"])(opts.env),
        encoding: Data_Maybe.maybe($foreign["undefined"])(Node_Encoding.encodingToNode)(opts.encoding),
        shell: Data_Maybe.fromMaybe($foreign["undefined"])(opts.shell),
        timeout: Data_Maybe.fromMaybe($foreign["undefined"])(opts.timeout),
        maxBuffer: Data_Maybe.fromMaybe($foreign["undefined"])(opts.maxBuffer),
        killSignal: Data_Maybe.fromMaybe($foreign["undefined"])(opts.killSignal),
        uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
        gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
    };
};
var exec = function (cmd) {
    return function (opts) {
        return function (callback) {
            return $foreign.execImpl(cmd)(convertExecOptions(opts))(function (err) {
                return function (stdout$prime) {
                    return function (stderr$prime) {
                        return callback({
                            error: Data_Nullable.toMaybe(err),
                            stdout: stdout$prime,
                            stderr: stderr$prime
                        });
                    };
                };
            });
        };
    };
};
var execFile = function (cmd) {
    return function (args) {
        return function (opts) {
            return function (callback) {
                return $foreign.execFileImpl(cmd)(args)(convertExecOptions(opts))(function (err) {
                    return function (stdout$prime) {
                        return function (stderr$prime) {
                            return callback({
                                error: Data_Nullable.toMaybe(err),
                                stdout: stdout$prime,
                                stderr: stderr$prime
                            });
                        };
                    };
                });
            };
        };
    };
};
var connected = function (v) {
    return mkEffect(function (v1) {
        return v.connected;
    });
};
export {
    onDisconnect,
    onError,
    fork
} from "./foreign.js";
export {
    stdin,
    stdout,
    stderr,
    pid,
    connected,
    kill,
    send,
    disconnect,
    toStandardError,
    Normally,
    BySignal,
    onExit,
    onClose,
    onMessage,
    spawn,
    defaultSpawnOptions,
    exec,
    execFile,
    defaultExecOptions,
    execSync,
    execFileSync,
    defaultExecSyncOptions,
    Pipe,
    Ignore,
    ShareStream,
    ShareFD,
    pipe,
    inherit,
    ignore,
    showExit
};
//# sourceMappingURL=index.js.map
