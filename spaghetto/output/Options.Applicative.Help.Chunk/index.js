// Generated by purs version 0.15.10
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show_Generic from "../Data.Show.Generic/index.js";
import * as Options_Applicative_Internal_Utils from "../Options.Applicative.Internal.Utils/index.js";
import * as Text_PrettyPrint_Leijen from "../Text.PrettyPrint.Leijen/index.js";
var un = /* #__PURE__ */ Data_Newtype.un();
var foldr = /* #__PURE__ */ Data_Foldable.foldr(Data_Foldable.foldableArray);
var mempty = /* #__PURE__ */ Data_Monoid.mempty(Text_PrettyPrint_Leijen.docMonoid);
var ChunkIsSymbol = {
    reflectSymbol: function () {
        return "Chunk";
    }
};
var fold = /* #__PURE__ */ Data_Foldable.fold(Data_Foldable.foldableArray);
var mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(Data_Functor.functorArray);
var Chunk = function (x) {
    return x;
};
var chunked = function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return v2;
            };
            if (v2 instanceof Data_Maybe.Nothing) {
                return v1;
            };
            if (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                return new Data_Maybe.Just(v(v1.value0)(v2.value0));
            };
            throw new Error("Failed pattern match at Options.Applicative.Help.Chunk (line 57, column 1 - line 58, column 41): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var chunkSemigroup = function (dictSemigroup) {
    return {
        append: chunked(Data_Semigroup.append(dictSemigroup))
    };
};
var chunkPlus = Data_Maybe.plusMaybe;
var chunkOrd = function (dictOrd) {
    return Data_Maybe.ordMaybe(dictOrd);
};
var chunkNewtype = {
    Coercible0: function () {
        return undefined;
    }
};
var extractChunk = function (dictMonoid) {
    var $56 = Data_Maybe.fromMaybe(Data_Monoid.mempty(dictMonoid));
    var $57 = un(Chunk);
    return function ($58) {
        return $56($57($58));
    };
};
var isEmpty = /* #__PURE__ */ (function () {
    var $59 = un(Chunk);
    return function ($60) {
        return Data_Maybe.isNothing($59($60));
    };
})();
var chunkMonoid = function (dictSemigroup) {
    var chunkSemigroup1 = chunkSemigroup(dictSemigroup);
    return {
        mempty: Data_Maybe.Nothing.value,
        Semigroup0: function () {
            return chunkSemigroup1;
        }
    };
};
var mempty1 = /* #__PURE__ */ Data_Monoid.mempty(/* #__PURE__ */ chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
var vcatChunks = /* #__PURE__ */ foldr(/* #__PURE__ */ chunked(Text_PrettyPrint_Leijen.appendWithLine))(mempty1);
var vsepChunks = /* #__PURE__ */ foldr(/* #__PURE__ */ chunked(function (x) {
    return function (y) {
        return Text_PrettyPrint_Leijen.appendWithLine(x)(Text_PrettyPrint_Leijen.appendWithLine(mempty)(y));
    };
}))(mempty1);
var chunkMonad = Data_Maybe.monadMaybe;
var chunkGeneric = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericShow = /* #__PURE__ */ Data_Show_Generic.genericShow(chunkGeneric);
var chunkShow = function (dictShow) {
    return {
        show: genericShow(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(dictShow)))(ChunkIsSymbol))
    };
};
var chunkFunctor = Data_Maybe.functorMaybe;
var chunkEq = function (dictEq) {
    return Data_Maybe.eqMaybe(dictEq);
};
var chunkBind = Data_Maybe.bindMaybe;
var chunkBesideOrBelow = /* #__PURE__ */ chunked(Text_PrettyPrint_Leijen.appendWithSoftline);
var chunkBeside = /* #__PURE__ */ chunked(Text_PrettyPrint_Leijen.appendWithSpace);
var chunkApply = Data_Maybe.applyMaybe;
var chunkApplicative = Data_Maybe.applicativeMaybe;
var pure = /* #__PURE__ */ Control_Applicative.pure(chunkApplicative);
var listToChunk = function (dictMonoid) {
    var mempty2 = Data_Monoid.mempty(chunkMonoid(dictMonoid.Semigroup0()));
    var fold1 = fold(dictMonoid);
    return function (v) {
        if (v.length === 0) {
            return mempty2;
        };
        return pure(fold1(v));
    };
};
var stringChunk = function (v) {
    if (v === "") {
        return mempty1;
    };
    return pure(Text_PrettyPrint_Leijen.text(v));
};
var paragraph = /* #__PURE__ */ (function () {
    var $61 = foldr((function () {
        var $63 = chunked(Text_PrettyPrint_Leijen.appendWithSoftline);
        return function ($64) {
            return $63(stringChunk($64));
        };
    })())(mempty1);
    return function ($62) {
        return $61(Options_Applicative_Internal_Utils.words($62));
    };
})();
var tabulate$prime = function (v) {
    return function (v1) {
        if (v1.length === 0) {
            return mempty1;
        };
        return pure(Text_PrettyPrint_Leijen.vcat(mapFlipped(v1)(function (v2) {
            return Text_PrettyPrint_Leijen.indent(2)(Text_PrettyPrint_Leijen.appendWithSpace(Text_PrettyPrint_Leijen.fillBreak(v)(v2.value0))(v2.value1));
        })));
    };
};
var tabulate = /* #__PURE__ */ tabulate$prime(24);
var chunkAlternative = Data_Maybe.alternativeMaybe;
var chunkAlt = Data_Maybe.altMaybe;
export {
    Chunk,
    chunked,
    listToChunk,
    chunkBeside,
    chunkBesideOrBelow,
    vcatChunks,
    vsepChunks,
    isEmpty,
    stringChunk,
    paragraph,
    extractChunk,
    tabulate,
    chunkNewtype,
    chunkGeneric,
    chunkShow,
    chunkEq,
    chunkOrd,
    chunkFunctor,
    chunkApply,
    chunkApplicative,
    chunkAlt,
    chunkPlus,
    chunkAlternative,
    chunkBind,
    chunkMonad,
    chunkSemigroup,
    chunkMonoid
};
//# sourceMappingURL=index.js.map
