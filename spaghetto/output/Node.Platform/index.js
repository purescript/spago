// Generated by purs version 0.15.10
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
var AIX = /* #__PURE__ */ (function () {
    function AIX() {

    };
    AIX.value = new AIX();
    return AIX;
})();
var Darwin = /* #__PURE__ */ (function () {
    function Darwin() {

    };
    Darwin.value = new Darwin();
    return Darwin;
})();
var FreeBSD = /* #__PURE__ */ (function () {
    function FreeBSD() {

    };
    FreeBSD.value = new FreeBSD();
    return FreeBSD;
})();
var Linux = /* #__PURE__ */ (function () {
    function Linux() {

    };
    Linux.value = new Linux();
    return Linux;
})();
var OpenBSD = /* #__PURE__ */ (function () {
    function OpenBSD() {

    };
    OpenBSD.value = new OpenBSD();
    return OpenBSD;
})();
var SunOS = /* #__PURE__ */ (function () {
    function SunOS() {

    };
    SunOS.value = new SunOS();
    return SunOS;
})();
var Win32 = /* #__PURE__ */ (function () {
    function Win32() {

    };
    Win32.value = new Win32();
    return Win32;
})();
var Android = /* #__PURE__ */ (function () {
    function Android() {

    };
    Android.value = new Android();
    return Android;
})();
var toString = function (v) {
    if (v instanceof AIX) {
        return "aix";
    };
    if (v instanceof Darwin) {
        return "darwin";
    };
    if (v instanceof FreeBSD) {
        return "freebsd";
    };
    if (v instanceof Linux) {
        return "linux";
    };
    if (v instanceof OpenBSD) {
        return "openbsd";
    };
    if (v instanceof SunOS) {
        return "sunos";
    };
    if (v instanceof Win32) {
        return "win32";
    };
    if (v instanceof Android) {
        return "android";
    };
    throw new Error("Failed pattern match at Node.Platform (line 20, column 1 - line 20, column 31): " + [ v.constructor.name ]);
};
var showPlatform = {
    show: function (v) {
        if (v instanceof AIX) {
            return "AIX";
        };
        if (v instanceof Darwin) {
            return "Darwin";
        };
        if (v instanceof FreeBSD) {
            return "FreeBSD";
        };
        if (v instanceof Linux) {
            return "Linux";
        };
        if (v instanceof OpenBSD) {
            return "OpenBSD";
        };
        if (v instanceof SunOS) {
            return "SunOS";
        };
        if (v instanceof Win32) {
            return "Win32";
        };
        if (v instanceof Android) {
            return "Android";
        };
        throw new Error("Failed pattern match at Node.Platform (line 43, column 1 - line 51, column 27): " + [ v.constructor.name ]);
    }
};
var fromString = function (v) {
    if (v === "aix") {
        return new Data_Maybe.Just(AIX.value);
    };
    if (v === "darwin") {
        return new Data_Maybe.Just(Darwin.value);
    };
    if (v === "freebsd") {
        return new Data_Maybe.Just(FreeBSD.value);
    };
    if (v === "linux") {
        return new Data_Maybe.Just(Linux.value);
    };
    if (v === "openbsd") {
        return new Data_Maybe.Just(OpenBSD.value);
    };
    if (v === "sunos") {
        return new Data_Maybe.Just(SunOS.value);
    };
    if (v === "win32") {
        return new Data_Maybe.Just(Win32.value);
    };
    if (v === "android") {
        return new Data_Maybe.Just(Android.value);
    };
    return Data_Maybe.Nothing.value;
};
var eqPlatform = {
    eq: function (x) {
        return function (y) {
            if (x instanceof AIX && y instanceof AIX) {
                return true;
            };
            if (x instanceof Darwin && y instanceof Darwin) {
                return true;
            };
            if (x instanceof FreeBSD && y instanceof FreeBSD) {
                return true;
            };
            if (x instanceof Linux && y instanceof Linux) {
                return true;
            };
            if (x instanceof OpenBSD && y instanceof OpenBSD) {
                return true;
            };
            if (x instanceof SunOS && y instanceof SunOS) {
                return true;
            };
            if (x instanceof Win32 && y instanceof Win32) {
                return true;
            };
            if (x instanceof Android && y instanceof Android) {
                return true;
            };
            return false;
        };
    }
};
var ordPlatform = {
    compare: function (x) {
        return function (y) {
            if (x instanceof AIX && y instanceof AIX) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof AIX) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof AIX) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Darwin && y instanceof Darwin) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Darwin) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Darwin) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof FreeBSD && y instanceof FreeBSD) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FreeBSD) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FreeBSD) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Linux && y instanceof Linux) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Linux) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Linux) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof OpenBSD && y instanceof OpenBSD) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof OpenBSD) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof OpenBSD) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof SunOS && y instanceof SunOS) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof SunOS) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof SunOS) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Win32 && y instanceof Win32) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Win32) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Win32) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Android && y instanceof Android) {
                return Data_Ordering.EQ.value;
            };
            throw new Error("Failed pattern match at Node.Platform (line 0, column 0 - line 0, column 0): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqPlatform;
    }
};
export {
    AIX,
    Darwin,
    FreeBSD,
    Linux,
    OpenBSD,
    SunOS,
    Win32,
    Android,
    toString,
    fromString,
    showPlatform,
    eqPlatform,
    ordPlatform
};
//# sourceMappingURL=index.js.map
