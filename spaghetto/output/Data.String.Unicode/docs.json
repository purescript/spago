{"comments":null,"declarations":[{"children":[],"comments":"Convert each code point in the string to its corresponding uppercase\nsequence. This is the full (locale-independent) Unicode algorithm,\nand may map single code points to more than one code point. For example,\n`toUpper \"ÃŸ\" == \"SS\"`.\n\nBecause this matches on more rules, it may be slower than `toUpperSimple`,\nbut it provides more correct results.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[26,28],"name":".spago/packages/unicode-6.0.0/src/Data/String/Unicode.purs","start":[26,1]},"title":"toUpper"},{"children":[],"comments":"Convert each code point in the string to its corresponding lower\nsequence. This is the full (locale-independent) Unicode algorithm,\nand may map single code points to more than one code point. For example,\n`toLower \"\\x0130\" == \"\\x0069\\x0307\"`.\n\nBecause this matches on more rules, it may be slower than `toLowerSimple`,\nbut it provides more correct results.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[36,28],"name":".spago/packages/unicode-6.0.0/src/Data/String/Unicode.purs","start":[36,1]},"title":"toLower"},{"children":[],"comments":"The full Unicode case folding algorithm, may increase the length of the\nstring by mapping individual code points to longer sequences.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[41,29],"name":".spago/packages/unicode-6.0.0/src/Data/String/Unicode.purs","start":[41,1]},"title":"caseFold"},{"children":[],"comments":"Caseless matching, based on `caseFold`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[45,45],"name":".spago/packages/unicode-6.0.0/src/Data/String/Unicode.purs","start":[45,1]},"title":"caselessMatch"},{"children":[],"comments":"Convert each code point in the string to its corresponding uppercase\ncode point. This will preserve the number of code points in the string.\n\nNote: this is not the full Unicode algorithm, see `toUpper`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[54,34],"name":".spago/packages/unicode-6.0.0/src/Data/String/Unicode.purs","start":[54,1]},"title":"toUpperSimple"},{"children":[],"comments":"Convert each code point in the string to its corresponding lowercase\ncode point. This will preserve the number of code points in the string.\n\nNote: this is not the full Unicode algorithm, see `toLower`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[61,34],"name":".spago/packages/unicode-6.0.0/src/Data/String/Unicode.purs","start":[61,1]},"title":"toLowerSimple"},{"children":[],"comments":"Convert each code point in the string to its corresponding case-folded\ncode point. This will preserve the number of code points in the string.\n\nNote: this is not the full Unicode algorithm, see `caseFold`.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[68,35],"name":".spago/packages/unicode-6.0.0/src/Data/String/Unicode.purs","start":[68,1]},"title":"caseFoldSimple"}],"name":"Data.String.Unicode","reExports":[]}