// Generated by purs version 0.15.10
import * as Control_Alternative from "../Control.Alternative/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Filterable from "../Data.Filterable/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_Set_NonEmpty from "../Data.Set.NonEmpty/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Registry_PackageName from "../Registry.PackageName/index.js";
import * as Spago_BuildInfo from "../Spago.BuildInfo/index.js";
import * as Spago_Cmd from "../Spago.Cmd/index.js";
import * as Spago_Config from "../Spago.Config/index.js";
import * as Spago_Core_Prelude from "../Spago.Core.Prelude/index.js";
import * as Spago_Log from "../Spago.Log/index.js";
import * as Spago_Paths from "../Spago.Paths/index.js";
import * as Spago_Psa from "../Spago.Psa/index.js";
import * as Spago_Purs_Graph from "../Spago.Purs.Graph/index.js";
var join = /* #__PURE__ */ Control_Bind.join(Control_Bind.bindArray);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var partition = /* #__PURE__ */ Data_Filterable.partition(Data_Filterable.filterableArray);
var toUnfoldable = /* #__PURE__ */ Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray);
var bindFlipped = /* #__PURE__ */ Control_Bind.bindFlipped(Control_Bind.bindArray);
var fromFoldable = /* #__PURE__ */ Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordString);
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var discard1 = /* #__PURE__ */ discard(Spago_Core_Prelude.bindSpago);
var logInfo = /* #__PURE__ */ Spago_Log.logInfo(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var bind = /* #__PURE__ */ Control_Bind.bind(Spago_Core_Prelude.bindSpago);
var ask = /* #__PURE__ */ Control_Monad_Reader_Class.ask(Spago_Core_Prelude.monadAskSpago);
var when = /* #__PURE__ */ Control_Applicative.when(Spago_Core_Prelude.applicativeSpago);
var die = /* #__PURE__ */ Spago_Log.die(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(/* #__PURE__ */ Spago_Log.loggableArray(Spago_Log.loggableString));
var discard2 = /* #__PURE__ */ discard(Data_Maybe.bindMaybe);
var guard = /* #__PURE__ */ Control_Alternative.guard(Data_Maybe.alternativeMaybe);
var bind1 = /* #__PURE__ */ Control_Bind.bind(Data_Maybe.bindMaybe);
var pure = /* #__PURE__ */ Control_Applicative.pure(Spago_Core_Prelude.applicativeSpago);
var logDebug = /* #__PURE__ */ Spago_Log.logDebug(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var exec = /* #__PURE__ */ Spago_Cmd.exec(Spago_Core_Prelude.monadAffSpago);
var showMaybe = /* #__PURE__ */ Data_Maybe.showMaybe(Data_Show.showString);
var show = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Show.showRecord()()(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "escapedCommand";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "exitCode";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "failed";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "isCanceled";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "killed";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "message";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "originalMessage";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "shortMessage";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "signal";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "signalDescription";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "stderr";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "stdout";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil({
    reflectSymbol: function () {
        return "timedOut";
    }
})(Data_Show.showBoolean))(Data_Show.showString))(Data_Show.showString))(showMaybe))(/* #__PURE__ */ Data_Maybe.showMaybe(/* #__PURE__ */ Data_Either.showEither(Data_Show.showInt)(Data_Show.showString))))(Data_Show.showString))(showMaybe))(Data_Show.showString))(Data_Show.showBoolean))(Data_Show.showBoolean))(Data_Show.showBoolean))(/* #__PURE__ */ Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Show.showString)));
var logSuccess = /* #__PURE__ */ Spago_Log.logSuccess(Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableString);
var map1 = /* #__PURE__ */ Data_Functor.map(Spago_Core_Prelude.functorSpago);
var fold = /* #__PURE__ */ Data_Array.fold(Data_Monoid.monoidArray);
var $$for = /* #__PURE__ */ Data_Traversable["for"](Spago_Core_Prelude.applicativeSpago)(Data_Traversable.traversableArray);
var unless = /* #__PURE__ */ Control_Applicative.unless(Spago_Core_Prelude.applicativeSpago);
var die$prime = /* #__PURE__ */ Spago_Log["die$prime"](Spago_Core_Prelude.monadEffectSpago)(Spago_Core_Prelude.monadAskSpago)(Spago_Log.loggableDocc);
var isWorkspacePackage = function (v) {
    if (v.value1 instanceof Spago_Config.WorkspacePackage) {
        return true;
    };
    return false;
};
var getBuildGlobs = function (v) {
    var testGlobs = (function () {
        if (v.withTests) {
            return Spago_Config.WithTestGlobs.value;
        };
        if (!v.withTests) {
            return Spago_Config.NoTestGlobs.value;
        };
        throw new Error("Failed pattern match at Spago.Command.Build (line 173, column 15 - line 175, column 25): " + [ v.withTests.constructor.name ]);
    })();
    var workspacePackageGlob = function (p) {
        return Spago_Config.sourceGlob(testGlobs)(p["package"].name)(new Spago_Config.WorkspacePackage(p));
    };
    var projectGlobs = join((function () {
        if (v.depsOnly) {
            return [  ];
        };
        if (!v.depsOnly) {
            return map(workspacePackageGlob)(v.selected);
        };
        throw new Error("Failed pattern match at Spago.Command.Build (line 167, column 23 - line 171, column 40): " + [ v.depsOnly.constructor.name ]);
    })());
    var v1 = partition(isWorkspacePackage)(toUnfoldable(v.dependencies));
    var monorepoPkgGlobs = (function () {
        if (v.depsOnly) {
            return [  ];
        };
        if (Data_Boolean.otherwise) {
            return bindFlipped(Data_Tuple.uncurry(Spago_Config.sourceGlob(testGlobs)))(v1.yes);
        };
        throw new Error("Failed pattern match at Spago.Command.Build (line 183, column 3 - line 185, column 81): " + [  ]);
    })();
    var dependencyGlobs = bindFlipped(Data_Tuple.uncurry(Spago_Config.sourceGlob(Spago_Config.NoTestGlobs.value)))(v1.no);
    return fromFoldable(append(projectGlobs)(append(monorepoPkgGlobs)(append(dependencyGlobs)([ Spago_BuildInfo.buildInfoPath ]))));
};
var run = function (opts) {
    return discard1(logInfo("Building..."))(function () {
        return bind(ask)(function (v) {
            var v1 = partition(isWorkspacePackage)(toUnfoldable(v.dependencies));
            var dependencyLibs = map(Data_Tuple.uncurry(Spago_Config.getPackageLocation))(v1.no);
            return discard1(Spago_BuildInfo.writeBuildInfo)(function () {
                return discard1(when(Data_Maybe.isJust(Spago_Cmd.findFlag({
                    flags: [ "-o", "--output" ],
                    args: opts.pursArgs
                })))(die([ "Can't pass `--output` option directly to purs.", "Use the --output flag for Spago, or add it to your config file." ])))(function () {
                    var addOutputArgs = function (args) {
                        if (v.workspace.buildOptions.output instanceof Data_Maybe.Nothing) {
                            return args;
                        };
                        if (v.workspace.buildOptions.output instanceof Data_Maybe.Just) {
                            return append(args)([ "--output", v.workspace.buildOptions.output.value0 ]);
                        };
                        throw new Error("Failed pattern match at Spago.Command.Build (line 61, column 26 - line 63, column 52): " + [ v.workspace.buildOptions.output.constructor.name ]);
                    };
                    return discard1(when(Data_Maybe.isJust(Spago_Cmd.findFlag({
                        flags: [ "--json-errors" ],
                        args: opts.pursArgs
                    })))(die([ "Can't pass `--json-errors` option directly to purs.", "Use the --json-errors flag for Spago." ])))(function () {
                        var psaOptions = {
                            strict: Data_Maybe.fromMaybe(Spago_Psa.defaultParseOptions.strict)(v.workspace.buildOptions.strict),
                            censorBuildWarnings: Data_Maybe.fromMaybe(Spago_Psa.defaultParseOptions.censorBuildWarnings)(v.workspace.buildOptions.censorBuildWarnings),
                            showSource: Data_Maybe.fromMaybe(Spago_Psa.defaultParseOptions.showSource)(v.workspace.buildOptions.showSource),
                            censorCodes: Data_Maybe.maybe(Spago_Psa.defaultParseOptions.censorCodes)(Data_Set_NonEmpty.toSet)(v.workspace.buildOptions.censorCodes),
                            filterCodes: Data_Maybe.maybe(Spago_Psa.defaultParseOptions.filterCodes)(Data_Set_NonEmpty.toSet)(v.workspace.buildOptions.filterCodes),
                            statVerbosity: Data_Maybe.fromMaybe(Spago_Psa.defaultParseOptions.statVerbosity)(v.workspace.buildOptions.statVerbosity),
                            stashFile: discard2(guard(!opts.depsOnly))(function () {
                                return bind1(v.workspace.buildOptions.persistWarnings)(function (shouldStashWarnings) {
                                    return discard2(guard(shouldStashWarnings))(function () {
                                        if (v.workspace.selected instanceof Data_Maybe.Just) {
                                            return new Data_Maybe.Just(Spago_Paths.mkLocalCachesPersistentWarningsFile(Registry_PackageName.print(v["workspace"]["selected"]["value0"]["package"].name)));
                                        };
                                        if (v.workspace.selected instanceof Data_Maybe.Nothing) {
                                            return new Data_Maybe.Just(Spago_Paths.localCachesPersistedWarningsEntireWorkspace);
                                        };
                                        throw new Error("Failed pattern match at Spago.Command.Build (line 89, column 11 - line 91, column 78): " + [ v.workspace.selected.constructor.name ]);
                                    });
                                });
                            })
                        };
                        var psaArgs = {
                            libraryDirs: dependencyLibs,
                            color: v.logOptions.color,
                            jsonErrors: opts.jsonErrors
                        };
                        var buildBackend = (function () {
                            if (v.workspace.backend instanceof Data_Maybe.Nothing) {
                                return pure(Data_Unit.unit);
                            };
                            if (v.workspace.backend instanceof Data_Maybe.Just) {
                                return discard1(logInfo("Compiling with backend \"" + (v.workspace.backend.value0.cmd + "\"")))(function () {
                                    return discard1(logDebug("Running command `" + (v.workspace.backend.value0.cmd + "`")))(function () {
                                        var moreBackendArgs = (function () {
                                            if (v.workspace.backend.value0.args instanceof Data_Maybe.Just && Data_Array.length(v.workspace.backend.value0.args.value0) > 0) {
                                                return v.workspace.backend.value0.args.value0;
                                            };
                                            return [  ];
                                        })();
                                        return bind(exec(v.workspace.backend.value0.cmd)(addOutputArgs(moreBackendArgs))(Spago_Cmd.defaultExecOptions))(function (v2) {
                                            if (v2 instanceof Data_Either.Left) {
                                                return discard1(logDebug(show(v2.value0)))(function () {
                                                    return die([ "Failed to build with backend " + v.workspace.backend.value0.cmd ]);
                                                });
                                            };
                                            if (v2 instanceof Data_Either.Right) {
                                                return logSuccess("Backend build succeeded.");
                                            };
                                            throw new Error("Failed pattern match at Spago.Command.Build (line 103, column 91 - line 108, column 52): " + [ v2.constructor.name ]);
                                        });
                                    });
                                });
                            };
                            throw new Error("Failed pattern match at Spago.Command.Build (line 94, column 7 - line 108, column 52): " + [ v.workspace.backend.constructor.name ]);
                        })();
                        var globs = getBuildGlobs({
                            dependencies: v.dependencies,
                            depsOnly: opts.depsOnly,
                            withTests: true,
                            selected: (function () {
                                if (v.workspace.selected instanceof Data_Maybe.Just) {
                                    return [ v.workspace.selected.value0 ];
                                };
                                if (v.workspace.selected instanceof Data_Maybe.Nothing) {
                                    return Spago_Config.getWorkspacePackages(v.workspace.packageSet);
                                };
                                throw new Error("Failed pattern match at Spago.Command.Build (line 124, column 19 - line 126, column 70): " + [ v.workspace.selected.constructor.name ]);
                            })()
                        });
                        return discard1(when(Data_Maybe.isJust(Spago_Cmd.findFlag({
                            flags: [ "-g", "--codegen" ],
                            args: opts.pursArgs
                        })))(die([ "Can't pass `--codegen` option to build when using a backend", "Hint: No need to pass `--codegen corefn` explicitly when using the `backend` option.", "Remove the argument to solve the error" ])))(function () {
                            var args = append(addOutputArgs(opts.pursArgs))([ "--codegen", "corefn,docs,js,sourcemaps" ]);
                            return discard1(Spago_Psa.psaCompile(globs)(args)(psaArgs)(psaOptions))(function () {
                                return discard1(buildBackend)(function () {
                                    return when(v.workspace.buildOptions.pedanticPackages)(discard1(logInfo("Looking for unused and undeclared transitive dependencies..."))(function () {
                                        return bind((function () {
                                            if (v.workspace.selected instanceof Data_Maybe.Just) {
                                                return Spago_Purs_Graph.runGraphCheck(v.workspace.selected.value0)(globs)(opts.pursArgs);
                                            };
                                            if (v.workspace.selected instanceof Data_Maybe.Nothing) {
                                                return map1(fold)($$for(Spago_Config.getWorkspacePackages(v.workspace.packageSet))(function (selected) {
                                                    return Spago_Purs_Graph.runGraphCheck(selected)(globs)(opts.pursArgs);
                                                }));
                                            };
                                            throw new Error("Failed pattern match at Spago.Command.Build (line 142, column 15 - line 148, column 59): " + [ v.workspace.selected.constructor.name ]);
                                        })())(function (errors) {
                                            return unless(Data_Array["null"](errors))(die$prime(errors));
                                        });
                                    }));
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};
export {
    run,
    getBuildGlobs
};
