// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Codec from "../Data.Codec/index.js";
import * as Data_Codec_Argonaut from "../Data.Codec.Argonaut/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Profunctor from "../Data.Profunctor/index.js";
import * as Record from "../Record/index.js";
import * as Registry_Internal_Codec from "../Registry.Internal.Codec/index.js";
import * as Registry_PackageName from "../Registry.PackageName/index.js";
import * as Registry_Sha256 from "../Registry.Sha256/index.js";
import * as Registry_Version from "../Registry.Version/index.js";
import * as Spago_Core_Config from "../Spago.Core.Config/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var eq = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Eq.eqArray(Registry_PackageName.eqPackageName));
var eq2 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Maybe.eqMaybe(Data_Eq.eqString));
var eq3 = /* #__PURE__ */ Data_Eq.eq(Registry_Sha256.eqSha256);
var eq4 = /* #__PURE__ */ Data_Eq.eq(Registry_Version.eqVersion);
var recordProp = /* #__PURE__ */ Data_Codec_Argonaut.recordProp({
    reflectSymbol: function () {
        return "path";
    }
})();
var recordProp1 = /* #__PURE__ */ Data_Codec_Argonaut.recordProp({
    reflectSymbol: function () {
        return "dependencies";
    }
})();
var recordProp2 = /* #__PURE__ */ Data_Codec_Argonaut.recordProp({
    reflectSymbol: function () {
        return "packages";
    }
})();
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Either.bindEither);
var pure = /* #__PURE__ */ Control_Applicative.pure(Data_Either.applicativeEither);
var typeIsSymbol = {
    reflectSymbol: function () {
        return "type";
    }
};
var insert = /* #__PURE__ */ Record.insert(typeIsSymbol)()();
var $$delete = /* #__PURE__ */ Record["delete"](typeIsSymbol)()();
var dimap = /* #__PURE__ */ Data_Profunctor.dimap(/* #__PURE__ */ Data_Codec.profunctorCodec(Data_Either.functorEither));
var recordProp3 = /* #__PURE__ */ Data_Codec_Argonaut.recordProp(typeIsSymbol)();
var alt = /* #__PURE__ */ Control_Alt.alt(Data_Either.altEither);
var map = /* #__PURE__ */ Data_Functor.map(Data_Either.functorEither);
var FromPath = /* #__PURE__ */ (function () {
    function FromPath(value0) {
        this.value0 = value0;
    };
    FromPath.create = function (value0) {
        return new FromPath(value0);
    };
    return FromPath;
})();
var FromGit = /* #__PURE__ */ (function () {
    function FromGit(value0) {
        this.value0 = value0;
    };
    FromGit.create = function (value0) {
        return new FromGit(value0);
    };
    return FromGit;
})();
var FromRegistry = /* #__PURE__ */ (function () {
    function FromRegistry(value0) {
        this.value0 = value0;
    };
    FromRegistry.create = function (value0) {
        return new FromRegistry(value0);
    };
    return FromRegistry;
})();
var eqLockEntry = {
    eq: function (x) {
        return function (y) {
            if (x instanceof FromPath && y instanceof FromPath) {
                return eq(x.value0.dependencies)(y.value0.dependencies) && x.value0.path === y.value0.path;
            };
            if (x instanceof FromGit && y instanceof FromGit) {
                return eq(x.value0.dependencies)(y.value0.dependencies) && x.value0.rev === y.value0.rev && eq2(x.value0.subdir)(y.value0.subdir) && x.value0.url === y.value0.url;
            };
            if (x instanceof FromRegistry && y instanceof FromRegistry) {
                return eq(x.value0.dependencies)(y.value0.dependencies) && eq3(x.value0.integrity)(y.value0.integrity) && eq4(x.value0.version)(y.value0.version);
            };
            return false;
        };
    }
};
var workspaceLockCodec = /* #__PURE__ */ (function () {
    var dependenciesCodec = Data_Codec_Argonaut.object("Dependencies")(recordProp(Type_Proxy["Proxy"].value)(Data_Codec_Argonaut.string)(recordProp1(Type_Proxy["Proxy"].value)(Spago_Core_Config.dependenciesCodec)(Data_Codec_Argonaut.recordProp({
        reflectSymbol: function () {
            return "test_dependencies";
        }
    })()(Type_Proxy["Proxy"].value)(Spago_Core_Config.dependenciesCodec)(Data_Codec_Argonaut.record))));
    return Data_Codec_Argonaut.object("WorkspaceLock")(recordProp2(Type_Proxy["Proxy"].value)(Registry_Internal_Codec.packageMap(dependenciesCodec))(Data_Codec_Argonaut.recordPropOptional({
        reflectSymbol: function () {
            return "package_set";
        }
    })()(Type_Proxy["Proxy"].value)(Spago_Core_Config.setAddressCodec)(Data_Codec_Argonaut.recordProp({
        reflectSymbol: function () {
            return "extra_packages";
        }
    })()(Type_Proxy["Proxy"].value)(Registry_Internal_Codec.packageMap(Spago_Core_Config.extraPackageCodec))(Data_Codec_Argonaut.record))));
})();
var registryLockType = "registry";
var pathLockType = "local";
var gitLockType = "git";
var constant = function (val) {
    var encode = Data_Codec.encode(Data_Codec_Argonaut.string);
    var decode = function (json) {
        return bind(Data_Codec.decode(Data_Codec_Argonaut.string)(json))(function (v) {
            if (v === val) {
                return pure(val);
            };
            return new Data_Either.Left(new Data_Codec_Argonaut.UnexpectedValue(json));
        });
    };
    return Data_Codec["codec$prime"](decode)(encode);
};
var gitLockCodec = /* #__PURE__ */ (function () {
    var toRep = insert(Type_Proxy["Proxy"].value)(gitLockType);
    var fromRep = $$delete(Type_Proxy["Proxy"].value);
    return dimap(toRep)(fromRep)(Data_Codec_Argonaut.object("GitLock")(recordProp3(Type_Proxy["Proxy"].value)(constant(gitLockType))(Data_Codec_Argonaut.recordProp({
        reflectSymbol: function () {
            return "url";
        }
    })()(Type_Proxy["Proxy"].value)(Data_Codec_Argonaut.string)(Data_Codec_Argonaut.recordProp({
        reflectSymbol: function () {
            return "rev";
        }
    })()(Type_Proxy["Proxy"].value)(Data_Codec_Argonaut.string)(Data_Codec_Argonaut.recordPropOptional({
        reflectSymbol: function () {
            return "subdir";
        }
    })()(Type_Proxy["Proxy"].value)(Data_Codec_Argonaut.string)(recordProp1(Type_Proxy["Proxy"].value)(Data_Codec_Argonaut.array(Registry_PackageName.codec))(Data_Codec_Argonaut.record)))))));
})();
var pathLockCodec = /* #__PURE__ */ (function () {
    var toRep = insert(Type_Proxy["Proxy"].value)(pathLockType);
    var fromRep = $$delete(Type_Proxy["Proxy"].value);
    return dimap(toRep)(fromRep)(Data_Codec_Argonaut.object("PathLock")(recordProp3(Type_Proxy["Proxy"].value)(constant(pathLockType))(recordProp(Type_Proxy["Proxy"].value)(Data_Codec_Argonaut.string)(recordProp1(Type_Proxy["Proxy"].value)(Data_Codec_Argonaut.array(Registry_PackageName.codec))(Data_Codec_Argonaut.record)))));
})();
var registryLockCodec = /* #__PURE__ */ (function () {
    var toRep = insert(Type_Proxy["Proxy"].value)(registryLockType);
    var fromRep = $$delete(Type_Proxy["Proxy"].value);
    return dimap(toRep)(fromRep)(Data_Codec_Argonaut.object("RegistryLock")(recordProp3(Type_Proxy["Proxy"].value)(constant(registryLockType))(Data_Codec_Argonaut.recordProp({
        reflectSymbol: function () {
            return "version";
        }
    })()(Type_Proxy["Proxy"].value)(Registry_Version.codec)(Data_Codec_Argonaut.recordProp({
        reflectSymbol: function () {
            return "integrity";
        }
    })()(Type_Proxy["Proxy"].value)(Registry_Sha256.codec)(recordProp1(Type_Proxy["Proxy"].value)(Data_Codec_Argonaut.array(Registry_PackageName.codec))(Data_Codec_Argonaut.record))))));
})();
var lockEntryCodec = /* #__PURE__ */ (function () {
    var encode = function (v) {
        if (v instanceof FromPath) {
            return Data_Codec.encode(pathLockCodec)(v.value0);
        };
        if (v instanceof FromGit) {
            return Data_Codec.encode(gitLockCodec)(v.value0);
        };
        if (v instanceof FromRegistry) {
            return Data_Codec.encode(registryLockCodec)(v.value0);
        };
        throw new Error("Failed pattern match at Spago.Lock (line 72, column 12 - line 75, column 58): " + [ v.constructor.name ]);
    };
    var decode = function (json) {
        return alt(map(FromPath.create)(Data_Codec.decode(pathLockCodec)(json)))(alt(map(FromGit.create)(Data_Codec.decode(gitLockCodec)(json)))(map(FromRegistry.create)(Data_Codec.decode(registryLockCodec)(json))));
    };
    return Data_Codec["codec$prime"](decode)(encode);
})();
var lockfileCodec = /* #__PURE__ */ (function () {
    return Data_Codec_Argonaut.object("Lockfile")(Data_Codec_Argonaut.recordProp({
        reflectSymbol: function () {
            return "workspace";
        }
    })()(Type_Proxy["Proxy"].value)(workspaceLockCodec)(recordProp2(Type_Proxy["Proxy"].value)(Registry_Internal_Codec.packageMap(lockEntryCodec))(Data_Codec_Argonaut.record)));
})();
export {
    lockfileCodec,
    FromPath,
    FromGit,
    FromRegistry,
    lockEntryCodec,
    eqLockEntry
};
//# sourceMappingURL=index.js.map
