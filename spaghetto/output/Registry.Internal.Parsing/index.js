// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_CodePoints from "../Data.String.CodePoints/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_Combinators from "../Parsing.Combinators/index.js";
import * as Parsing_Combinators_Array from "../Parsing.Combinators.Array/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as Parsing_String_Basic from "../Parsing.String.Basic/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT);
var alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);
var voidLeft = /* #__PURE__ */ Data_Functor.voidLeft(Parsing.functorParserT);
var pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);
var applySecond = /* #__PURE__ */ Control_Apply.applySecond(Parsing.applyParserT);
var mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(Parsing.functorParserT);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var fold = /* #__PURE__ */ Data_Array.fold(Data_Monoid.monoidString);
var gitUrl = /* #__PURE__ */ bind(Parsing.getParserT)(function (v) {
    return bind(alt(Parsing_String.string("git"))(alt(Parsing_String.string("https"))(Parsing_String.string("http"))))(function () {
        return bind(Parsing_String.string("://"))(function () {
            return bind((function () {
                var terminator = alt(voidLeft(Parsing_String.string(".git"))(false))(voidLeft(Parsing_String.eof)(true));
                var matcher = alt(Parsing_String_Basic.alphaNum)(Parsing_String_Basic.oneOf([ ".", "/", "@", "_", "-", "~" ]));
                return Parsing_Combinators_Array.manyTill_(matcher)(terminator);
            })())(function (v1) {
                if (v1.value1) {
                    return pure(v.value0);
                };
                return bind(Parsing_Combinators.optional(Parsing_Combinators["try"](Parsing_String["char"]("/"))))(function () {
                    return bind(Parsing_String.eof)(function () {
                        return pure(v.value0);
                    });
                });
            });
        });
    });
});
var charsUntil = /* #__PURE__ */ (function () {
    var $28 = Data_Functor.map(Parsing.functorParserT)(Data_Tuple.fst);
    var $29 = Parsing_Combinators_Array.manyTill_(Parsing_String.anyChar);
    return function ($30) {
        return $28($29($30));
    };
})();
var charsUntilSpace = /* #__PURE__ */ charsUntil(/* #__PURE__ */ Parsing_String["char"](" "));
var rfc3339 = /* #__PURE__ */ bind(/* #__PURE__ */ Parsing_String.takeN(4))(function (year) {
    return bind(Parsing_String["char"]("-"))(function () {
        return bind(Parsing_String.takeN(2))(function (month) {
            return bind(Parsing_String["char"]("-"))(function () {
                return bind(Parsing_String.takeN(2))(function (day) {
                    return bind(Parsing_String["char"]("T"))(function () {
                        return bind(Parsing_String.takeN(2))(function (hour) {
                            return bind(Parsing_String["char"](":"))(function () {
                                return bind(Parsing_String.takeN(2))(function (minute) {
                                    return bind(Parsing_String["char"](":"))(function () {
                                        return bind(Parsing_String.takeN(2))(function (second) {
                                            return bind(bind(Parsing_Combinators.optionMaybe(Parsing_String["char"](".")))(function (v) {
                                                if (v instanceof Data_Maybe.Nothing) {
                                                    return applySecond(Parsing_String["char"]("Z"))(pure("000"));
                                                };
                                                if (v instanceof Data_Maybe.Just) {
                                                    return mapFlipped(charsUntil(Parsing_String["char"]("Z")))(Data_String_CodeUnits.fromCharArray);
                                                };
                                                throw new Error("Failed pattern match at Registry.Internal.Parsing (line 60, column 82 - line 62, column 79): " + [ v.constructor.name ]);
                                            }))(function (milliseconds$prime) {
                                                return bind((function () {
                                                    var v = Data_String_CodePoints.length(milliseconds$prime);
                                                    if (v === 0) {
                                                        return pure("000");
                                                    };
                                                    if (v === 1) {
                                                        return pure(milliseconds$prime + "00");
                                                    };
                                                    if (v === 2) {
                                                        return pure(milliseconds$prime + "0");
                                                    };
                                                    if (v === 3) {
                                                        return pure(milliseconds$prime);
                                                    };
                                                    return Parsing.fail("Expected milliseconds with length 0-3, but received milliseconds with length: " + show(v));
                                                })())(function (milliseconds) {
                                                    return pure({
                                                        date: fold([ year, "-", month, "-", day ]),
                                                        time: fold([ hour, ":", minute, ":", second ]),
                                                        milliseconds: milliseconds
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
var chars = /* #__PURE__ */ Data_Array.many(Parsing.alternativeParserT)(Parsing.lazyParserT)(Parsing_String.anyChar);
export {
    chars,
    charsUntil,
    charsUntilSpace,
    rfc3339,
    gitUrl
};
//# sourceMappingURL=index.js.map
