// Generated by purs version 0.15.10
import * as Control_Alt from "../Control.Alt/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Effect from "../Effect/index.js";
import * as Foreign_Object from "../Foreign.Object/index.js";
import * as Node_Path from "../Node.Path/index.js";
import * as Node_Process from "../Node.Process/index.js";
var intercalate = /* #__PURE__ */ Data_Array.intercalate(Data_Monoid.monoidString);
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var foldMap = /* #__PURE__ */ Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidArray);
var alt = /* #__PURE__ */ Control_Alt.alt(Data_Maybe.altMaybe);
var map = /* #__PURE__ */ Data_Functor.map(Effect.functorEffect);
var monoidMaybe = /* #__PURE__ */ Data_Maybe.monoidMaybe(Data_Semigroup.semigroupString);
var npmRunPath = function (initialOptions) {
    var go = function (options) {
        return function (result) {
            return function (previous) {
                return function (cwdPath) {
                    if (previous instanceof Data_Maybe.Just && previous.value0 === cwdPath) {
                        return function __do() {
                            var nodeBinaryPath = Node_Path.resolve([ cwdPath, options.execPath ])("..")();
                            return intercalate(Node_Path.delimiter)(append(result)(append([ nodeBinaryPath ])(foldMap(Data_Array.singleton)(options.path))));
                        };
                    };
                    var nextResult = Node_Path.concat([ cwdPath, "node_modules/.bin" ]);
                    var nextPrevious = new Data_Maybe.Just(cwdPath);
                    return function __do() {
                        var nextCwdPath = Node_Path.resolve([ cwdPath ])("..")();
                        return go(options)(Data_Array.snoc(result)(nextResult))(nextPrevious)(nextCwdPath)();
                    };
                };
            };
        };
    };
    return function __do() {
        var processCwd = Node_Process.cwd();
        var processPath = Node_Process.lookupEnv("PATH")();
        var processExecPath = Node_Process.execPath();
        var options = {
            cwd: Data_Maybe.fromMaybe(processCwd)(initialOptions.cwd),
            path: alt(initialOptions.path)(processPath),
            execPath: Data_Maybe.fromMaybe(processExecPath)(initialOptions.execPath)
        };
        var cwdPath = Node_Path.resolve([  ])(options.cwd)();
        return go(options)([  ])(Data_Maybe.Nothing.value)(cwdPath)();
    };
};
var npmRunPathEnv = function (env) {
    return function (options) {
        return map(function (p) {
            return Foreign_Object.insert("PATH")(p)(env);
        })(npmRunPath(options));
    };
};
var defaultNpmRunPathOptions = /* #__PURE__ */ Data_Monoid.mempty(/* #__PURE__ */ Data_Monoid.monoidRecord()(/* #__PURE__ */ Data_Monoid.monoidRecordCons({
    reflectSymbol: function () {
        return "cwd";
    }
})(monoidMaybe)()(/* #__PURE__ */ Data_Monoid.monoidRecordCons({
    reflectSymbol: function () {
        return "execPath";
    }
})(monoidMaybe)()(/* #__PURE__ */ Data_Monoid.monoidRecordCons({
    reflectSymbol: function () {
        return "path";
    }
})(monoidMaybe)()(Data_Monoid.monoidRecordNil)))));
export {
    defaultNpmRunPathOptions,
    npmRunPath,
    npmRunPathEnv
};
//# sourceMappingURL=index.js.map
