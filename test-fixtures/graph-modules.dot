strict digraph modules {
node[shape=rect]
splines=ortho
"Main" [style=dashed];
"Control.Applicative" -> "Control.Apply";
"Control.Applicative" -> "Data.Functor";
"Control.Applicative" -> "Data.Unit";
"Control.Applicative" -> "Type.Proxy";
"Control.Apply" -> "Data.Functor";
"Control.Apply" -> "Data.Function";
"Control.Apply" -> "Control.Category";
"Control.Apply" -> "Type.Proxy";
"Control.Bind" -> "Control.Applicative";
"Control.Bind" -> "Control.Apply";
"Control.Bind" -> "Control.Category";
"Control.Bind" -> "Data.Function";
"Control.Bind" -> "Data.Functor";
"Control.Bind" -> "Data.Unit";
"Control.Bind" -> "Type.Proxy";
"Control.Category" -> "Control.Semigroupoid";
"Control.Monad" -> "Control.Applicative";
"Control.Monad" -> "Control.Apply";
"Control.Monad" -> "Control.Bind";
"Control.Monad" -> "Data.Functor";
"Control.Monad" -> "Data.Unit";
"Control.Monad" -> "Type.Proxy";
"Data.BooleanAlgebra" -> "Data.HeytingAlgebra";
"Data.BooleanAlgebra" -> "Data.Symbol";
"Data.BooleanAlgebra" -> "Data.Unit";
"Data.BooleanAlgebra" -> "Type.Proxy";
"Data.Bounded" -> "Data.Ord";
"Data.Bounded" -> "Data.Symbol";
"Data.Bounded" -> "Data.Unit";
"Data.Bounded" -> "Record.Unsafe";
"Data.Bounded" -> "Type.Proxy";
"Data.Bounded.Generic" -> "Data.Generic.Rep";
"Data.Bounded.Generic" -> "Data.Bounded";
"Data.CommutativeRing" -> "Data.Ring";
"Data.CommutativeRing" -> "Data.Semiring";
"Data.CommutativeRing" -> "Data.Symbol";
"Data.CommutativeRing" -> "Data.Unit";
"Data.CommutativeRing" -> "Type.Proxy";
"Data.DivisionRing" -> "Data.EuclideanRing";
"Data.DivisionRing" -> "Data.Ring";
"Data.DivisionRing" -> "Data.Semiring";
"Data.Eq" -> "Data.HeytingAlgebra";
"Data.Eq" -> "Data.Symbol";
"Data.Eq" -> "Data.Unit";
"Data.Eq" -> "Data.Void";
"Data.Eq" -> "Record.Unsafe";
"Data.Eq" -> "Type.Proxy";
"Data.Eq.Generic" -> "Prelude";
"Data.Eq.Generic" -> "Data.Generic.Rep";
"Data.EuclideanRing" -> "Data.BooleanAlgebra";
"Data.EuclideanRing" -> "Data.CommutativeRing";
"Data.EuclideanRing" -> "Data.Eq";
"Data.EuclideanRing" -> "Data.Ring";
"Data.EuclideanRing" -> "Data.Semiring";
"Data.Field" -> "Data.DivisionRing";
"Data.Field" -> "Data.CommutativeRing";
"Data.Field" -> "Data.EuclideanRing";
"Data.Field" -> "Data.Ring";
"Data.Field" -> "Data.Semiring";
"Data.Function" -> "Control.Category";
"Data.Function" -> "Data.Boolean";
"Data.Function" -> "Data.Ord";
"Data.Function" -> "Data.Ring";
"Data.Functor" -> "Data.Function";
"Data.Functor" -> "Data.Unit";
"Data.Functor" -> "Type.Proxy";
"Data.Generic.Rep" -> "Data.Semigroup";
"Data.Generic.Rep" -> "Data.Show";
"Data.Generic.Rep" -> "Data.Symbol";
"Data.Generic.Rep" -> "Data.Void";
"Data.Generic.Rep" -> "Type.Proxy";
"Data.HeytingAlgebra" -> "Data.Symbol";
"Data.HeytingAlgebra" -> "Data.Unit";
"Data.HeytingAlgebra" -> "Record.Unsafe";
"Data.HeytingAlgebra" -> "Type.Proxy";
"Data.HeytingAlgebra.Generic" -> "Prelude";
"Data.HeytingAlgebra.Generic" -> "Data.Generic.Rep";
"Data.HeytingAlgebra.Generic" -> "Data.HeytingAlgebra";
"Data.Monoid" -> "Data.Boolean";
"Data.Monoid" -> "Data.Eq";
"Data.Monoid" -> "Data.EuclideanRing";
"Data.Monoid" -> "Data.Ord";
"Data.Monoid" -> "Data.Ordering";
"Data.Monoid" -> "Data.Semigroup";
"Data.Monoid" -> "Data.Symbol";
"Data.Monoid" -> "Data.Unit";
"Data.Monoid" -> "Record.Unsafe";
"Data.Monoid" -> "Type.Proxy";
"Data.Monoid.Additive" -> "Prelude";
"Data.Monoid.Additive" -> "Data.Eq";
"Data.Monoid.Additive" -> "Data.Ord";
"Data.Monoid.Conj" -> "Prelude";
"Data.Monoid.Conj" -> "Data.Eq";
"Data.Monoid.Conj" -> "Data.HeytingAlgebra";
"Data.Monoid.Conj" -> "Data.Ord";
"Data.Monoid.Disj" -> "Prelude";
"Data.Monoid.Disj" -> "Data.Eq";
"Data.Monoid.Disj" -> "Data.HeytingAlgebra";
"Data.Monoid.Disj" -> "Data.Ord";
"Data.Monoid.Dual" -> "Prelude";
"Data.Monoid.Dual" -> "Data.Eq";
"Data.Monoid.Dual" -> "Data.Ord";
"Data.Monoid.Endo" -> "Prelude";
"Data.Monoid.Generic" -> "Data.Monoid";
"Data.Monoid.Generic" -> "Data.Generic.Rep";
"Data.Monoid.Multiplicative" -> "Prelude";
"Data.Monoid.Multiplicative" -> "Data.Eq";
"Data.Monoid.Multiplicative" -> "Data.Ord";
"Data.Ord" -> "Data.Eq";
"Data.Ord" -> "Data.Symbol";
"Data.Ord" -> "Data.Ordering";
"Data.Ord" -> "Data.Ring";
"Data.Ord" -> "Data.Unit";
"Data.Ord" -> "Data.Void";
"Data.Ord" -> "Record.Unsafe";
"Data.Ord" -> "Type.Proxy";
"Data.Ord.Generic" -> "Prelude";
"Data.Ord.Generic" -> "Data.Generic.Rep";
"Data.Ordering" -> "Data.Eq";
"Data.Ordering" -> "Data.Semigroup";
"Data.Ordering" -> "Data.Show";
"Data.Reflectable" -> "Data.Ord";
"Data.Reflectable" -> "Type.Proxy";
"Data.Ring" -> "Data.Semiring";
"Data.Ring" -> "Data.Symbol";
"Data.Ring" -> "Data.Unit";
"Data.Ring" -> "Record.Unsafe";
"Data.Ring" -> "Type.Proxy";
"Data.Ring.Generic" -> "Prelude";
"Data.Ring.Generic" -> "Data.Generic.Rep";
"Data.Semigroup" -> "Data.Symbol";
"Data.Semigroup" -> "Data.Unit";
"Data.Semigroup" -> "Data.Void";
"Data.Semigroup" -> "Record.Unsafe";
"Data.Semigroup" -> "Type.Proxy";
"Data.Semigroup.First" -> "Prelude";
"Data.Semigroup.First" -> "Data.Eq";
"Data.Semigroup.First" -> "Data.Ord";
"Data.Semigroup.Generic" -> "Prelude";
"Data.Semigroup.Generic" -> "Data.Generic.Rep";
"Data.Semigroup.Last" -> "Prelude";
"Data.Semigroup.Last" -> "Data.Eq";
"Data.Semigroup.Last" -> "Data.Ord";
"Data.Semiring" -> "Data.Symbol";
"Data.Semiring" -> "Data.Unit";
"Data.Semiring" -> "Record.Unsafe";
"Data.Semiring" -> "Type.Proxy";
"Data.Semiring.Generic" -> "Prelude";
"Data.Semiring.Generic" -> "Data.Generic.Rep";
"Data.Show" -> "Data.Semigroup";
"Data.Show" -> "Data.Symbol";
"Data.Show" -> "Data.Unit";
"Data.Show" -> "Data.Void";
"Data.Show" -> "Record.Unsafe";
"Data.Show" -> "Type.Proxy";
"Data.Show.Generic" -> "Prelude";
"Data.Show.Generic" -> "Data.Generic.Rep";
"Data.Show.Generic" -> "Data.Symbol";
"Data.Show.Generic" -> "Type.Proxy";
"Data.Symbol" -> "Type.Proxy";
"Effect" -> "Prelude";
"Effect" -> "Control.Apply";
"Effect.Class" -> "Control.Category";
"Effect.Class" -> "Control.Monad";
"Effect.Class" -> "Effect";
"Effect.Class.Console" -> "Data.Function";
"Effect.Class.Console" -> "Data.Show";
"Effect.Class.Console" -> "Data.Unit";
"Effect.Class.Console" -> "Effect.Class";
"Effect.Class.Console" -> "Effect.Console";
"Effect.Console" -> "Effect";
"Effect.Console" -> "Data.Show";
"Effect.Console" -> "Data.Unit";
"Effect.Uncurried" -> "Data.Monoid";
"Effect.Uncurried" -> "Effect";
"Effect.Unsafe" -> "Effect";
"Main" -> "Prelude";
"Main" -> "Effect";
"Main" -> "Effect.Console";
"Prelude" -> "Control.Applicative";
"Prelude" -> "Control.Apply";
"Prelude" -> "Control.Bind";
"Prelude" -> "Control.Category";
"Prelude" -> "Control.Monad";
"Prelude" -> "Control.Semigroupoid";
"Prelude" -> "Data.Boolean";
"Prelude" -> "Data.BooleanAlgebra";
"Prelude" -> "Data.Bounded";
"Prelude" -> "Data.CommutativeRing";
"Prelude" -> "Data.DivisionRing";
"Prelude" -> "Data.Eq";
"Prelude" -> "Data.EuclideanRing";
"Prelude" -> "Data.Field";
"Prelude" -> "Data.Function";
"Prelude" -> "Data.Functor";
"Prelude" -> "Data.HeytingAlgebra";
"Prelude" -> "Data.Monoid";
"Prelude" -> "Data.NaturalTransformation";
"Prelude" -> "Data.Ord";
"Prelude" -> "Data.Ordering";
"Prelude" -> "Data.Ring";
"Prelude" -> "Data.Semigroup";
"Prelude" -> "Data.Semiring";
"Prelude" -> "Data.Show";
"Prelude" -> "Data.Unit";
"Prelude" -> "Data.Void";
}
